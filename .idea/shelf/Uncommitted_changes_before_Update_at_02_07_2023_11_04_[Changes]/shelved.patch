Index: src/main/java/Frame.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import javax.swing.*;\r\nimport javax.swing.event.ChangeEvent;\r\nimport javax.swing.event.ChangeListener;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.event.WindowAdapter;\r\nimport java.awt.event.WindowEvent;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\npublic class Frame{\r\n    private JFrame frame;\r\n    private JTextField firstTextField;\r\n    private JPanel panelSpoiler;\r\n    private JPanel panelNeighbours;\r\n    private  JPanel panelDisplayedResults;\r\n\r\n    private String searchBy;\r\n\r\n\r\n    private List<List<List<String>>> src;\r\n    private int numberOfNeighbours=2;\r\n    private int numberOfDisplayedResults = 10;\r\n\r\n\r\n    Frame(){\r\n        frame=new JFrame(\"Test\");\r\n        frame.setSize(1000,600);\r\n        firstTextField=new JTextField(60);\r\n\r\n        firstTextField.setMaximumSize(new Dimension(200,50));\r\n\r\n        Dimension size = new Dimension(95, 30);\r\n\r\n        JButton loadButton = new JButton(\"load\");\r\n        loadButton.setMaximumSize(size);\r\n        loadButton.addActionListener(new LoadButtonHandler());\r\n\r\n        JRadioButton lemma = new JRadioButton(\"Lemma\");\r\n        JRadioButton pos = new JRadioButton(\"POS\");\r\n        JRadioButton word = new JRadioButton(\"Word\");\r\n\r\n        ButtonGroup buttonGroup = new ButtonGroup();\r\n        buttonGroup.add(lemma);\r\n        buttonGroup.add(pos);\r\n        buttonGroup.add(word);\r\n\r\n        lemma.addActionListener(new WordPosLemmaButtonHandler());\r\n        pos.addActionListener(new WordPosLemmaButtonHandler());\r\n        word.addActionListener(new WordPosLemmaButtonHandler());\r\n\r\n        Box box1 = Box.createVerticalBox();\r\n        box1.add(lemma);\r\n        box1.add(pos);\r\n        box1.add(word);\r\n\r\n        JPanel panel1=new JPanel();\r\n        BoxLayout aBoxLayout = new BoxLayout(panel1,BoxLayout.X_AXIS);\r\n        panel1.setLayout(aBoxLayout);\r\n\r\n        panel1.add(Box.createRigidArea(new Dimension(0,5)));\r\n        panel1.add(loadButton);\r\n        panel1.add(firstTextField);\r\n        panel1.add(box1);\r\n        //panel with spoiler panel\r\n        JPanel panel2=new JPanel();\r\n        BoxLayout bBoxLayout = new BoxLayout(panel2,BoxLayout.Y_AXIS);\r\n        panel2.setLayout(bBoxLayout);\r\n\r\n        panel2.add(Box.createRigidArea(new Dimension(0,5)));\r\n\r\n        JButton spoilerButton = new JButton(\"Additional filters\");\r\n        spoilerButton.setMaximumSize(new Dimension(frame.getWidth(),30));\r\n        spoilerButton.addActionListener(new SpoilerButtonHandler());\r\n        spoilerButton.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n        panel2.add(spoilerButton);\r\n\r\n        panel2.add(Box.createRigidArea(new Dimension(0,5)));\r\n        //spoiler panel\r\n        panelSpoiler=new JPanel();\r\n        BoxLayout spoilerBoxLayout = new BoxLayout(panelSpoiler,BoxLayout.X_AXIS);\r\n        panelSpoiler.setLayout(spoilerBoxLayout);\r\n\r\n        panel2.add(panelSpoiler);\r\n\r\n\r\n        panelNeighbours=new JPanel();\r\n        BoxLayout neigboursBoxLayout = new BoxLayout(panelNeighbours,BoxLayout.Y_AXIS);\r\n        panelNeighbours.setLayout(neigboursBoxLayout);\r\n        panelSpoiler.add(panelNeighbours);\r\n\r\n        JLabel neighbours= new JLabel(\"Neighbours\");\r\n        neighbours.setMaximumSize(size);\r\n\r\n        Integer[] neighboursStrings = {0, 1,2,3,4,5,6,7,8,9,10};\r\n        SpinnerListModel neighboursModel = new SpinnerListModel(neighboursStrings);\r\n        JSpinner spinner = new JSpinner(neighboursModel);\r\n        spinner.setMaximumSize(size);\r\n        spinner.setValue(numberOfNeighbours);\r\n        spinner.addChangeListener(new spinnerListener());\r\n\r\n        panelNeighbours.add(neighbours);\r\n        panelNeighbours.add(spinner);\r\n        neighbours.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        spinner.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n        panelSpoiler.add(Box.createRigidArea(new Dimension(5,0)));\r\n\r\n        panelDisplayedResults=new JPanel();\r\n        BoxLayout displayedResultsLayout = new BoxLayout(panelDisplayedResults,BoxLayout.Y_AXIS);\r\n        panelDisplayedResults.setLayout(displayedResultsLayout);\r\n        panelSpoiler.add(panelDisplayedResults);\r\n\r\n        JLabel displayedResults= new JLabel(\"Amount of displayed results\");\r\n        displayedResults.setMaximumSize(new Dimension(300,30));\r\n\r\n        JSlider slider = new JSlider(JSlider.HORIZONTAL,\r\n                1, 50, numberOfDisplayedResults);\r\n        slider.setMaximumSize(new Dimension(300,100));\r\n        slider.setMajorTickSpacing(10);\r\n        slider.setMinorTickSpacing(1);\r\n        slider.setPaintTicks(true);\r\n        slider.setPaintLabels(true);\r\n        slider.addChangeListener(new sliderListener());\r\n\r\n        panelDisplayedResults.add(displayedResults);\r\n        panelDisplayedResults.add(slider);\r\n        displayedResults.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        slider.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n\r\n        JPanel panel3=new JPanel();\r\n        BoxLayout cBoxLayout = new BoxLayout(panel3,BoxLayout.X_AXIS);\r\n        panel3.setLayout(cBoxLayout);\r\n\r\n        panel3.add(Box.createRigidArea(new Dimension(0,5)));\r\n\r\n        frame.getContentPane().setLayout(new BoxLayout(frame.getContentPane(),BoxLayout.Y_AXIS));\r\n        frame.getContentPane().add(panel1);\r\n        frame.getContentPane().add(panel2);\r\n        frame.getContentPane().add(panel3);\r\n        //This is the common size of the buttons\r\n\r\n        frame.addWindowListener(new MyWindowListener());\r\n        frame.setVisible(true);\r\n\r\n    }\r\n    public class SpoilerButtonHandler implements ActionListener {\r\n        public void actionPerformed(ActionEvent e) {\r\n            if (panelSpoiler.isVisible()){\r\n                panelSpoiler.setVisible(false);\r\n\r\n            } else {\r\n\r\n                panelSpoiler.setVisible(true);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public class LoadButtonHandler implements ActionListener {\r\n        public void actionPerformed(ActionEvent e) {\r\n            JFileChooser fileChooser = new JFileChooser();\r\n            fileChooser.setCurrentDirectory(new File(System.getProperty(\"user.home\")));\r\n            int result = fileChooser.showOpenDialog(frame);\r\n            if (result == JFileChooser.APPROVE_OPTION) {\r\n                File selectedFile = fileChooser.getSelectedFile();\r\n\r\n            String text=\"\";\r\n            Scanner inputStream;\r\n            try{\r\n                inputStream=new Scanner(selectedFile);\r\n\r\n            } catch (FileNotFoundException ex) {\r\n                JOptionPane.showMessageDialog(frame,\"File can not be found\");\r\n                throw new RuntimeException(ex);\r\n            }\r\n            while (inputStream.hasNextLine()){\r\n                text=text+inputStream.nextLine();\r\n            }\r\n\r\n            CorpusBuilder corp= new CorpusBuilder(text);\r\n            corp.getSentences();\r\n            corp.getTokens();\r\n            corp.getPosTags();\r\n            corp.getLemmas();\r\n\r\n            src = corp.getWordPosLemma();\r\n\r\n            inputStream.close();\r\n            }\r\n        }\r\n    }\r\n\r\n    private class spinnerListener implements ChangeListener {\r\n        public void stateChanged(ChangeEvent e) {\r\n            JSpinner spinner= (JSpinner) e.getSource();\r\n            SpinnerModel spinnerModel = (SpinnerModel) spinner.getModel();\r\n            if (spinnerModel instanceof SpinnerDateModel) {\r\n                numberOfNeighbours=(int)spinnerModel.getValue();\r\n            }\r\n        }\r\n    }\r\n    private class sliderListener implements ChangeListener {\r\n        public void stateChanged(ChangeEvent e) {\r\n\r\n        JSlider source = (JSlider) e.getSource();\r\n        if(!source.getValueIsAdjusting())\r\n\r\n        {\r\n             numberOfDisplayedResults= source.getValue();\r\n\r\n        }\r\n    }\r\n    }\r\n    private class QuitButtonHandler implements ActionListener {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            System.exit(0);\r\n        }\r\n    }\r\n    private class MyWindowListener extends WindowAdapter {\r\n\r\n        public void windowClosing(WindowEvent e) {\r\n            System.exit(0);\r\n        }\r\n    }\r\n\r\n    private class WordPosLemmaButtonHandler implements ActionListener {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            JRadioButton button = (JRadioButton) e.getSource();\r\n            searchBy = button.getText();\r\n        }\r\n    }\r\n\r\n\r\n    private class SearchButtonHandler implements ActionListener {\r\n        String s = firstTextField.getText();\r\n        public void actionPerformed(ActionEvent e) {\r\n            if (searchBy.equals(\"Word\")){\r\n                for (int i=0;i<src.size();i++){   //iteration by sentences\r\n                    for (int k=0;k<src.get(i).size();k++){   //iteration by words\r\n                        if (src.get(i).get(k).get(2).equals(s)){\r\n                            System.out.println(src.get(i)); //this should be fixed in the future\r\n                        }\r\n                    }\r\n                }\r\n                //**public static ArrayList<String> getContextWords(ArrayList<String> sentence, int index) {\r\n                //        ArrayList<String> contextWords = new ArrayList<>();\r\n                //\r\n                //        if (index >= 2) {\r\n                //            contextWords.addAll(sentence.subList(index - 2, index));\r\n                //        } else {\r\n                //            contextWords.addAll(sentence.subList(0, index));\r\n                //        }\r\n                //\r\n                //        if (index < sentence.size() - 3) {\r\n                //            contextWords.addAll(sentence.subList(index + 1, index + 4));\r\n                //        } else {\r\n                //            contextWords.addAll(sentence.subList(index + 1, sentence.size()));\r\n                //        }\r\n                //\r\n                //        return contextWords;\r\n                //    }*/\r\n            } else if (searchBy.equals(\"Lemma\")) {\r\n\r\n\r\n            } else if (searchBy.equals(\"POS\")) {\r\n\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    public static void main ( String[] args )\r\n    {\r\n        new Frame();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Frame.java b/src/main/java/Frame.java
--- a/src/main/java/Frame.java	(revision 58d3ccc04d01b3aa660362e1e1adc7bc6c0a2fc3)
+++ b/src/main/java/Frame.java	(date 1688288670599)
@@ -247,28 +247,13 @@
             if (searchBy.equals("Word")){
                 for (int i=0;i<src.size();i++){   //iteration by sentences
                     for (int k=0;k<src.get(i).size();k++){   //iteration by words
-                        if (src.get(i).get(k).get(2).equals(s)){
-                            System.out.println(src.get(i)); //this should be fixed in the future
+                        if (src.get(i).get(k).get(0).equals(s)){
+                            System.out.println(src.get(i)); //prints a list of tokens, lemmas and pos tags
+                            //src.get(i).get(k).get(1) -- POS tag of the word
+                            System.out.println(getContextWords(src.get(i), k, numberOfNeighbours)); //prints final sentences with neighbours
                         }
                     }
                 }
-                //**public static ArrayList<String> getContextWords(ArrayList<String> sentence, int index) {
-                //        ArrayList<String> contextWords = new ArrayList<>();
-                //
-                //        if (index >= 2) {
-                //            contextWords.addAll(sentence.subList(index - 2, index));
-                //        } else {
-                //            contextWords.addAll(sentence.subList(0, index));
-                //        }
-                //
-                //        if (index < sentence.size() - 3) {
-                //            contextWords.addAll(sentence.subList(index + 1, index + 4));
-                //        } else {
-                //            contextWords.addAll(sentence.subList(index + 1, sentence.size()));
-                //        }
-                //
-                //        return contextWords;
-                //    }*/
             } else if (searchBy.equals("Lemma")) {
 
 
@@ -279,6 +264,38 @@
         }
     }
 
+    /**
+     * Helper method that gets a list from CorpusBuilder, index of the word and the number of neighbours
+     * @param sentenceList
+     * @param index
+     * @param numNeighbours
+     * @return a string with word and his neighbours
+     */
+    private static String getContextWords (List<List<String>> sentenceList, int index, int numNeighbours){
+        ArrayList<String> contextWords = new ArrayList<>();
+        ArrayList<String> sentenceArrayList = new ArrayList<>();
+
+        for (List<String> list : sentenceList) {
+            if (!list.isEmpty()) {
+                sentenceArrayList.add(list.get(0));
+            }
+        }
+
+        if (index >= numNeighbours) {
+            contextWords.addAll(sentenceArrayList.subList((index - numNeighbours), index));
+        } else {
+            contextWords.addAll(sentenceArrayList.subList(0, index));
+        }
+
+        if (index < sentenceList.size() - numNeighbours - 1) {
+            contextWords.addAll(sentenceArrayList.subList(index + 1, index + numNeighbours + 1));
+        } else {
+            contextWords.addAll(sentenceArrayList.subList(index + 1, sentenceList.size()));
+        }
+
+        return String.join(", ", contextWords);
+    }
+
     public static void main ( String[] args )
     {
         new Frame();
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"MavenProjectsManager\">\r\n    <option name=\"originalFiles\">\r\n      <list>\r\n        <option value=\"$PROJECT_DIR$/pom.xml\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_19\" default=\"true\" project-jdk-name=\"11\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 58d3ccc04d01b3aa660362e1e1adc7bc6c0a2fc3)
+++ b/.idea/misc.xml	(date 1688287371616)
@@ -8,7 +8,7 @@
       </list>
     </option>
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_19" default="true" project-jdk-name="11" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="11" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n  <modelVersion>4.0.0</modelVersion>\r\n  <groupId>de.uni.tuebingen.sfs.java2</groupId>\r\n  <artifactId>CorpusBuilder</artifactId>\r\n  <version>1.0-SNAPSHOT</version>\r\n  <name>CorpusBuilder</name>\r\n  <!--  FIXME change it to the project's website  -->\r\n  <properties>\r\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n    <maven.compiler.source>1.7</maven.compiler.source>\r\n    <maven.compiler.target>1.7</maven.compiler.target>\r\n  </properties>\r\n  <dependencies>\r\n    <dependency>\r\n      <groupId>junit</groupId>\r\n      <artifactId>junit</artifactId>\r\n      <version>4.11</version>\r\n      <scope>test</scope>\r\n    </dependency>\r\n    <dependency>\r\n      <groupId>org.apache.opennlp</groupId>\r\n      <artifactId>opennlp-tools</artifactId>\r\n      <version>1.9.3</version>\r\n    </dependency>\r\n  </dependencies>\r\n  <build>\r\n    <pluginManagement>\r\n      <!--  lock down plugins versions to avoid using Maven defaults (maybe moved to parent pom)  -->\r\n      <plugins>\r\n        <!--  clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle  -->\r\n        <plugin>\r\n          <artifactId>maven-clean-plugin</artifactId>\r\n          <version>3.1.0</version>\r\n        </plugin>\r\n\r\n        <!--  default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging  -->\r\n        <plugin>\r\n          <artifactId>maven-resources-plugin</artifactId>\r\n          <version>3.0.2</version>\r\n\r\n        </plugin>\r\n        <plugin>\r\n          <artifactId>maven-compiler-plugin</artifactId>\r\n          <version>3.8.0</version>\r\n        </plugin>\r\n        <plugin>\r\n          <artifactId>maven-surefire-plugin</artifactId>\r\n          <version>2.22.1</version>\r\n        </plugin>\r\n        <plugin>\r\n          <artifactId>maven-jar-plugin</artifactId>\r\n          <version>3.0.2</version>\r\n        </plugin>\r\n        <plugin>\r\n          <artifactId>maven-install-plugin</artifactId>\r\n          <version>2.5.2</version>\r\n        </plugin>\r\n        <plugin>\r\n          <artifactId>maven-deploy-plugin</artifactId>\r\n          <version>2.8.2</version>\r\n        </plugin>\r\n        <!--  site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle  -->\r\n        <plugin>\r\n          <artifactId>maven-site-plugin</artifactId>\r\n          <version>3.7.1</version>\r\n        </plugin>\r\n        <plugin>\r\n          <artifactId>maven-project-info-reports-plugin</artifactId>\r\n          <version>3.0.0</version>\r\n        </plugin>\r\n      </plugins>\r\n    </pluginManagement>\r\n\r\n  </build>\r\n\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	(revision 58d3ccc04d01b3aa660362e1e1adc7bc6c0a2fc3)
+++ b/pom.xml	(date 1688287444022)
@@ -70,6 +70,16 @@
         </plugin>
       </plugins>
     </pluginManagement>
+      <plugins>
+          <plugin>
+              <groupId>org.apache.maven.plugins</groupId>
+              <artifactId>maven-compiler-plugin</artifactId>
+              <configuration>
+                  <source>8</source>
+                  <target>8</target>
+              </configuration>
+          </plugin>
+      </plugins>
 
   </build>
 
