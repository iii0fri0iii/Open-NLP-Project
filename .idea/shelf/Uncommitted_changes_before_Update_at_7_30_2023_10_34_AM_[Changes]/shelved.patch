Index: .idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_33__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_33__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_33__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_33__Changes_.xml	(revision 8516ea608a7e74fae166f37c49de725b402a5430)
+++ /dev/null	(revision 8516ea608a7e74fae166f37c49de725b402a5430)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_02_07_2023_11_33_[Changes]" date="1688290440349" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_33_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 02.07.2023 11:33 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_36_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_36_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_36_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_36_[Changes]/shelved.patch	(revision 8516ea608a7e74fae166f37c49de725b402a5430)
+++ /dev/null	(revision 8516ea608a7e74fae166f37c49de725b402a5430)
@@ -1,57 +0,0 @@
-Index: src/main/java/Frame.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>import javax.swing.*;\r\nimport javax.swing.event.ChangeEvent;\r\nimport javax.swing.event.ChangeListener;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.event.WindowAdapter;\r\nimport java.awt.event.WindowEvent;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\npublic class Frame{\r\n    private JFrame frame;\r\n    private JTextField firstTextField;\r\n    private JPanel panelSpoiler;\r\n    private JPanel panelNeighbours;\r\n    private  JPanel panelDisplayedResults;\r\n\r\n    private JTextArea outputArea;\r\n\r\n    private String searchBy;\r\n\r\n\r\n    private List<List<List<String>>> src;\r\n    private int numberOfNeighbours=2;\r\n    private int numberOfDisplayedResults = 10;\r\n\r\n\r\n    Frame(){\r\n        frame=new JFrame(\"Test\");\r\n        frame.setSize(1000,600);\r\n        firstTextField=new JTextField(60);\r\n\r\n        firstTextField.setMaximumSize(new Dimension(200,50));\r\n\r\n\r\n        Dimension size = new Dimension(95, 30);\r\n\r\n        JButton loadButton = new JButton(\"load\");\r\n        loadButton.setMaximumSize(size);\r\n        loadButton.addActionListener(new LoadButtonHandler());\r\n\r\n        JButton searchButton = new JButton(\"search\");\r\n        searchButton.setMaximumSize(size);\r\n        searchButton.addActionListener(new SearchButtonHandler());\r\n\r\n        JRadioButton lemma = new JRadioButton(\"Lemma\");\r\n        JRadioButton pos = new JRadioButton(\"POS\");\r\n        JRadioButton word = new JRadioButton(\"Word\");\r\n\r\n        ButtonGroup buttonGroup = new ButtonGroup();\r\n        buttonGroup.add(lemma);\r\n        buttonGroup.add(pos);\r\n        buttonGroup.add(word);\r\n\r\n        lemma.addActionListener(new WordPosLemmaButtonHandler());\r\n        pos.addActionListener(new WordPosLemmaButtonHandler());\r\n        word.addActionListener(new WordPosLemmaButtonHandler());\r\n\r\n        Box box1 = Box.createVerticalBox();\r\n        box1.add(lemma);\r\n        box1.add(pos);\r\n        box1.add(word);\r\n\r\n        JPanel panel1=new JPanel();\r\n        BoxLayout aBoxLayout = new BoxLayout(panel1,BoxLayout.X_AXIS);\r\n        panel1.setLayout(aBoxLayout);\r\n\r\n        panel1.add(Box.createRigidArea(new Dimension(0,5)));\r\n        panel1.add(loadButton);\r\n        panel1.add(firstTextField);\r\n        panel1.add(box1);\r\n        panel1.add(Box.createHorizontalGlue());\r\n        panel1.add(searchButton);\r\n        //panel with spoiler panel\r\n        JPanel panel2=new JPanel();\r\n        BoxLayout bBoxLayout = new BoxLayout(panel2,BoxLayout.Y_AXIS);\r\n        panel2.setLayout(bBoxLayout);\r\n\r\n        panel2.add(Box.createRigidArea(new Dimension(0,5)));\r\n\r\n        JButton spoilerButton = new JButton(\"Additional filters\");\r\n        spoilerButton.setMaximumSize(new Dimension(frame.getWidth(),30));\r\n        spoilerButton.addActionListener(new SpoilerButtonHandler());\r\n        spoilerButton.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n        panel2.add(spoilerButton);\r\n\r\n        panel2.add(Box.createRigidArea(new Dimension(0,5)));\r\n        //spoiler panel\r\n        panelSpoiler=new JPanel();\r\n        BoxLayout spoilerBoxLayout = new BoxLayout(panelSpoiler,BoxLayout.X_AXIS);\r\n        panelSpoiler.setLayout(spoilerBoxLayout);\r\n\r\n        panel2.add(panelSpoiler);\r\n\r\n\r\n        panelNeighbours=new JPanel();\r\n        BoxLayout neigboursBoxLayout = new BoxLayout(panelNeighbours,BoxLayout.Y_AXIS);\r\n        panelNeighbours.setLayout(neigboursBoxLayout);\r\n        panelSpoiler.add(panelNeighbours);\r\n\r\n        JLabel neighbours= new JLabel(\"Neighbours\");\r\n        neighbours.setMaximumSize(size);\r\n\r\n        Integer[] neighboursStrings = {0, 1,2,3,4,5,6,7,8,9,10};\r\n        SpinnerListModel neighboursModel = new SpinnerListModel(neighboursStrings);\r\n        JSpinner spinner = new JSpinner(neighboursModel);\r\n        spinner.setMaximumSize(size);\r\n        spinner.setValue(numberOfNeighbours);\r\n        spinner.addChangeListener(new spinnerListener());\r\n\r\n        panelNeighbours.add(neighbours);\r\n        panelNeighbours.add(spinner);\r\n        neighbours.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        spinner.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n        panelSpoiler.add(Box.createRigidArea(new Dimension(5,0)));\r\n\r\n        panelDisplayedResults=new JPanel();\r\n        BoxLayout displayedResultsLayout = new BoxLayout(panelDisplayedResults,BoxLayout.Y_AXIS);\r\n        panelDisplayedResults.setLayout(displayedResultsLayout);\r\n        panelSpoiler.add(panelDisplayedResults);\r\n\r\n        JLabel displayedResults= new JLabel(\"Amount of displayed results\");\r\n        displayedResults.setMaximumSize(new Dimension(300,30));\r\n\r\n        JSlider slider = new JSlider(JSlider.HORIZONTAL,\r\n                1, 50, numberOfDisplayedResults);\r\n        slider.setMaximumSize(new Dimension(300,100));\r\n        slider.setMajorTickSpacing(10);\r\n        slider.setMinorTickSpacing(1);\r\n        slider.setPaintTicks(true);\r\n        slider.setPaintLabels(true);\r\n        slider.addChangeListener(new sliderListener());\r\n\r\n        panelDisplayedResults.add(displayedResults);\r\n        panelDisplayedResults.add(slider);\r\n        displayedResults.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        slider.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n\r\n        JPanel panel3=new JPanel();\r\n        BoxLayout cBoxLayout = new BoxLayout(panel3,BoxLayout.X_AXIS);\r\n        panel3.setLayout(cBoxLayout);\r\n\r\n        panel3.add(Box.createRigidArea(new Dimension(0,5)));\r\n\r\n\r\n        frame.getContentPane().setLayout(new BoxLayout(frame.getContentPane(),BoxLayout.Y_AXIS));\r\n        frame.getContentPane().add(panel1);\r\n        frame.getContentPane().add(panel2);\r\n        frame.getContentPane().add(panel3);\r\n        //This is the common size of the buttons\r\n\r\n        frame.addWindowListener(new MyWindowListener());\r\n        frame.setVisible(true);\r\n\r\n\r\n        // Create the JTextArea for displaying the output\r\n        outputArea = new JTextArea();\r\n        outputArea.setEditable(false); // Make it read-only\r\n        frame.add(outputArea);\r\n\r\n    }\r\n    public class SpoilerButtonHandler implements ActionListener {\r\n        public void actionPerformed(ActionEvent e) {\r\n            if (panelSpoiler.isVisible()){\r\n                panelSpoiler.setVisible(false);\r\n\r\n            } else {\r\n\r\n                panelSpoiler.setVisible(true);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public class LoadButtonHandler implements ActionListener {\r\n        public void actionPerformed(ActionEvent e) {\r\n            JFileChooser fileChooser = new JFileChooser();\r\n            fileChooser.setCurrentDirectory(new File(System.getProperty(\"user.home\")));\r\n            int result = fileChooser.showOpenDialog(frame);\r\n            if (result == JFileChooser.APPROVE_OPTION) {\r\n                File selectedFile = fileChooser.getSelectedFile();\r\n\r\n            String text=\"\";\r\n            Scanner inputStream;\r\n            try{\r\n                inputStream=new Scanner(selectedFile);\r\n\r\n            } catch (FileNotFoundException ex) {\r\n                JOptionPane.showMessageDialog(frame,\"File can not be found\");\r\n                throw new RuntimeException(ex);\r\n            }\r\n            while (inputStream.hasNextLine()){\r\n                text=text+inputStream.nextLine();\r\n            }\r\n\r\n            CorpusBuilder corp= new CorpusBuilder(text);\r\n            corp.getSentences();\r\n            corp.getTokens();\r\n            corp.getPosTags();\r\n            corp.getLemmas();\r\n\r\n            src = corp.getWordPosLemma();\r\n\r\n            inputStream.close();\r\n            }\r\n        }\r\n    }\r\n\r\n    private class spinnerListener implements ChangeListener {\r\n        public void stateChanged(ChangeEvent e) {\r\n            JSpinner spinner= (JSpinner) e.getSource();\r\n            SpinnerModel spinnerModel = (SpinnerModel) spinner.getModel();\r\n            if (spinnerModel instanceof SpinnerDateModel) {\r\n                numberOfNeighbours=(int)spinnerModel.getValue();\r\n            }\r\n        }\r\n    }\r\n    private class sliderListener implements ChangeListener {\r\n        public void stateChanged(ChangeEvent e) {\r\n\r\n        JSlider source = (JSlider) e.getSource();\r\n        if(!source.getValueIsAdjusting())\r\n\r\n        {\r\n             numberOfDisplayedResults= source.getValue();\r\n\r\n        }\r\n    }\r\n    }\r\n    private class QuitButtonHandler implements ActionListener {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            System.exit(0);\r\n        }\r\n    }\r\n    private class MyWindowListener extends WindowAdapter {\r\n\r\n        public void windowClosing(WindowEvent e) {\r\n            System.exit(0);\r\n        }\r\n    }\r\n\r\n    private class WordPosLemmaButtonHandler implements ActionListener {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            JRadioButton button = (JRadioButton) e.getSource();\r\n            searchBy = button.getText();\r\n        }\r\n    }\r\n\r\n\r\n    private class SearchButtonHandler implements ActionListener {\r\n        String s = firstTextField.getText();\r\n        public void actionPerformed(ActionEvent e) {\r\n            if (searchBy.equals(\"Word\")){\r\n                for (int i=0;i<src.size();i++){   //iteration by sentences\r\n                    for (int k=0;k<src.get(i).size();k++){   //iteration by words\r\n                        if (src.get(i).get(k).get(0).equals(s)){\r\n                            System.out.println(src.get(i)); //prints a list of tokens, lemmas and pos tags\r\n                            //src.get(i).get(k).get(1) -- POS tag of the word\r\n                            System.out.println(getContextWords(src.get(i), k, numberOfNeighbours)); //prints final sentences with neighbours\r\n                        }\r\n                    }\r\n                }\r\n            } else if (searchBy.equals(\"Lemma\")) {\r\n\r\n\r\n            } else if (searchBy.equals(\"POS\")) {\r\n\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Helper method that gets a list from CorpusBuilder, index of the word and the number of neighbours\r\n     * @param sentenceList\r\n     * @param index\r\n     * @param numNeighbours\r\n     * @return a string with word and his neighbours\r\n     */\r\n    private static String getContextWords (List<List<String>> sentenceList, int index, int numNeighbours){\r\n        ArrayList<String> contextWords = new ArrayList<>();\r\n        ArrayList<String> sentenceArrayList = new ArrayList<>();\r\n\r\n        for (List<String> list : sentenceList) {\r\n            if (!list.isEmpty()) {\r\n                sentenceArrayList.add(list.get(0));\r\n            }\r\n        }\r\n\r\n        if (index >= numNeighbours) {\r\n            contextWords.addAll(sentenceArrayList.subList((index - numNeighbours), index));\r\n        } else {\r\n            contextWords.addAll(sentenceArrayList.subList(0, index));\r\n        }\r\n\r\n        if (index < sentenceList.size() - numNeighbours - 1) {\r\n            contextWords.addAll(sentenceArrayList.subList(index + 1, index + numNeighbours + 1));\r\n        } else {\r\n            contextWords.addAll(sentenceArrayList.subList(index + 1, sentenceList.size()));\r\n        }\r\n\r\n        return String.join(\", \", contextWords);\r\n    }\r\n\r\n    public static void main ( String[] args )\r\n    {\r\n        new Frame();\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/src/main/java/Frame.java b/src/main/java/Frame.java
---- a/src/main/java/Frame.java	(revision e10be0a15939d0add488bb9b7c2941bcec1943ff)
-+++ b/src/main/java/Frame.java	(date 1688290518203)
-@@ -165,6 +165,7 @@
-         outputArea = new JTextArea();
-         outputArea.setEditable(false); // Make it read-only
-         frame.add(outputArea);
-+        outputArea.setVisible(true);
- 
-     }
-     public class SpoilerButtonHandler implements ActionListener {
-@@ -256,17 +257,18 @@
-         }
-     }
- 
--
-     private class SearchButtonHandler implements ActionListener {
--        String s = firstTextField.getText();
-         public void actionPerformed(ActionEvent e) {
-+            String s = firstTextField.getText();
-             if (searchBy.equals("Word")){
-                 for (int i=0;i<src.size();i++){   //iteration by sentences
-                     for (int k=0;k<src.get(i).size();k++){   //iteration by words
-                         if (src.get(i).get(k).get(0).equals(s)){
--                            System.out.println(src.get(i)); //prints a list of tokens, lemmas and pos tags
-+                            //System.out.println(src.get(i)); //prints a list of tokens, lemmas and pos tags
-                             //src.get(i).get(k).get(1) -- POS tag of the word
--                            System.out.println(getContextWords(src.get(i), k, numberOfNeighbours)); //prints final sentences with neighbours
-+                            //System.out.println(getContextWords(src.get(i), k, numberOfNeighbours)); //prints final sentences with neighbours
-+                            outputArea.append(getContextWords(src.get(i), k, numberOfNeighbours));
-+                            outputArea.append("\n");
-                         }
-                     }
-                 }
-@@ -305,12 +307,12 @@
-         }
- 
-         if (index < sentenceList.size() - numNeighbours - 1) {
--            contextWords.addAll(sentenceArrayList.subList(index + 1, index + numNeighbours + 1));
-+            contextWords.addAll(sentenceArrayList.subList(index, index + numNeighbours + 1));
-         } else {
--            contextWords.addAll(sentenceArrayList.subList(index + 1, sentenceList.size()));
-+            contextWords.addAll(sentenceArrayList.subList(index, sentenceList.size()));
-         }
- 
--        return String.join(", ", contextWords);
-+        return String.join(" ", contextWords);
-     }
- 
-     public static void main ( String[] args )
Index: .idea/shelf/Uncommitted_changes_before_Update_at_7_2_2023_11_01_AM__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_7_2_2023_11_01_AM__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_7_2_2023_11_01_AM__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_7_2_2023_11_01_AM__Changes_.xml	(revision 8516ea608a7e74fae166f37c49de725b402a5430)
+++ /dev/null	(revision 8516ea608a7e74fae166f37c49de725b402a5430)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_7_2_2023_11_01_AM_[Changes]" date="1688288515343" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_2_2023_11_01_AM_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 7/2/2023 11:01 AM [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_7_2_2023_10_39_AM_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_7_2_2023_10_39_AM_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_7_2_2023_10_39_AM_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_7_2_2023_10_39_AM_[Changes]/shelved.patch	(revision 8516ea608a7e74fae166f37c49de725b402a5430)
+++ /dev/null	(revision 8516ea608a7e74fae166f37c49de725b402a5430)
@@ -1,26 +0,0 @@
-Index: src/main/java/Frame.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>import javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.event.WindowAdapter;\r\nimport java.awt.event.WindowEvent;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\npublic class Frame{\r\n    private JFrame frame;\r\n    private JTextField firstTextField;\r\n    private JPanel panelSpoiler;\r\n\r\n    private String searchBy;\r\n    private String s; //text entry\r\n\r\n    Frame(){\r\n        frame=new JFrame(\"Test\");\r\n        frame.setSize(1000,600);\r\n        firstTextField=new JTextField(60);\r\n\r\n        firstTextField.setMaximumSize(new Dimension(200,50));\r\n\r\n        Dimension size = new Dimension(95, 30);\r\n\r\n        JButton loadButton = new JButton(\"load\");\r\n        loadButton.setMaximumSize(size);\r\n        loadButton.addActionListener(new LoadButtonHandler());\r\n\r\n        JRadioButton lemma = new JRadioButton(\"Lemma\");\r\n        JRadioButton pos = new JRadioButton(\"POS\");\r\n        JRadioButton word = new JRadioButton(\"Word\");\r\n\r\n        ButtonGroup buttonGroup = new ButtonGroup();\r\n        buttonGroup.add(lemma);\r\n        buttonGroup.add(pos);\r\n        buttonGroup.add(word);\r\n\r\n        lemma.addActionListener(new WordPosLemmaButtonHandler());\r\n        pos.addActionListener(new WordPosLemmaButtonHandler());\r\n        word.addActionListener(new WordPosLemmaButtonHandler());\r\n\r\n        Box box1 = Box.createVerticalBox();\r\n        box1.add(lemma);\r\n        box1.add(pos);\r\n        box1.add(word);\r\n\r\n        JPanel panel1=new JPanel();\r\n        BoxLayout aBoxLayout = new BoxLayout(panel1,BoxLayout.X_AXIS);\r\n        panel1.setLayout(aBoxLayout);\r\n\r\n        panel1.add(Box.createRigidArea(new Dimension(0,5)));\r\n        panel1.add(loadButton);\r\n        panel1.add(firstTextField);\r\n        panel1.add(box1);\r\n\r\n        JPanel panel2=new JPanel();\r\n        BoxLayout bBoxLayout = new BoxLayout(panel2,BoxLayout.X_AXIS);\r\n        panel2.setLayout(bBoxLayout);\r\n\r\n        panel2.add(Box.createRigidArea(new Dimension(0,5)));\r\n\r\n        JButton spoilerButton = new JButton(\"Additional filters\");\r\n        spoilerButton.setMaximumSize(size);\r\n        spoilerButton.addActionListener(new SpoilerButtonHandler());\r\n\r\n        panelSpoiler=new JPanel();\r\n        BoxLayout spoilerBoxLayout = new BoxLayout(panelSpoiler,BoxLayout.X_AXIS);\r\n        panelSpoiler.setLayout(spoilerBoxLayout);\r\n\r\n        panel2.add(spoilerButton);\r\n        panel2.add(panelSpoiler);\r\n\r\n        panelSpoiler.add(firstTextField);\r\n\r\n        JPanel panel3=new JPanel();\r\n        BoxLayout cBoxLayout = new BoxLayout(panel3,BoxLayout.X_AXIS);\r\n        panel3.setLayout(cBoxLayout);\r\n\r\n        panel3.add(Box.createRigidArea(new Dimension(0,5)));\r\n\r\n        frame.getContentPane().setLayout(new BoxLayout(frame.getContentPane(),BoxLayout.Y_AXIS));\r\n        frame.getContentPane().add(panel1);\r\n        frame.getContentPane().add(panel2);\r\n        frame.getContentPane().add(panelSpoiler);\r\n        frame.getContentPane().add(panel3);\r\n        //This is the common size of the buttons\r\n\r\n        frame.addWindowListener(new MyWindowListener());\r\n        frame.setVisible(true);\r\n\r\n    }\r\n    public class SpoilerButtonHandler implements ActionListener {\r\n        public void actionPerformed(ActionEvent e) {\r\n            if (panelSpoiler.isVisible()){\r\n                panelSpoiler.setVisible(false);\r\n            } else {\r\n\r\n                panelSpoiler.setVisible(true);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public class LoadButtonHandler implements ActionListener {\r\n        public void actionPerformed(ActionEvent e) {\r\n            String fileName=JOptionPane.showInputDialog(frame,\"Enter the file name: \");\r\n            Scanner inputStream;\r\n            String text=null;\r\n            try{\r\n                inputStream=new Scanner(new File(fileName));\r\n\r\n\r\n            } catch (FileNotFoundException ex) {\r\n                JOptionPane.showMessageDialog(frame,\"File can not be found\");\r\n                throw new RuntimeException(ex);\r\n            }\r\n            while (inputStream.hasNext()){\r\n                text=text+inputStream.next();\r\n            }\r\n            CorpusBuilder corp= new CorpusBuilder(text);\r\n            corp.getSentences();\r\n            List<List<List<String>>> src=new ArrayList<>();\r\n\r\n\r\n            for(int i=0; i<corp.getSentences().length; i++){\r\n                src=corp.getWordPosLemma();\r\n            }\r\n\r\n\r\n            inputStream.close();\r\n        }\r\n    }\r\n    private class QuitButtonHandler implements ActionListener {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            System.exit(0);\r\n        }\r\n    }\r\n    private class MyWindowListener extends WindowAdapter {\r\n\r\n        public void windowClosing(WindowEvent e) {\r\n            System.exit(0);\r\n        }\r\n    }\r\n\r\n    private class WordPosLemmaButtonHandler implements ActionListener {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            JRadioButton button = (JRadioButton) e.getSource();\r\n            searchBy = button.getText();\r\n            System.out.println(searchBy);\r\n        }\r\n    }\r\n\r\n\r\n    private class TextFieldButtonHandler implements ActionListener {\r\n        public void actionPerformed(ActionEvent e) {\r\n            String s = firstTextField.getText();\r\n        }\r\n    }\r\n\r\n\r\n    private class SearchButtonHandler implements ActionListener {\r\n        public void actionPerformed(ActionEvent e) {\r\n            if (searchBy.equals(\"Word\")){\r\n\r\n            } else if (searchBy.equals(\"Lemma\")) {\r\n\r\n\r\n            } else if (searchBy.equals(\"POS\")) {\r\n\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    public static void main ( String[] args )\r\n    {\r\n        new Frame();\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/src/main/java/Frame.java b/src/main/java/Frame.java
---- a/src/main/java/Frame.java	(revision 4099c8c0d99a01450429f384d5c3ab85d7460af8)
-+++ b/src/main/java/Frame.java	(date 1687088964545)
-@@ -25,6 +25,7 @@
- 
-         firstTextField.setMaximumSize(new Dimension(200,50));
- 
-+
-         Dimension size = new Dimension(95, 30);
- 
-         JButton loadButton = new JButton("load");
-@@ -83,6 +84,7 @@
- 
-         panel3.add(Box.createRigidArea(new Dimension(0,5)));
- 
-+
-         frame.getContentPane().setLayout(new BoxLayout(frame.getContentPane(),BoxLayout.Y_AXIS));
-         frame.getContentPane().add(panel1);
-         frame.getContentPane().add(panel2);
Index: .idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_36__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_36__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_36__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_36__Changes_.xml	(revision 8516ea608a7e74fae166f37c49de725b402a5430)
+++ /dev/null	(revision 8516ea608a7e74fae166f37c49de725b402a5430)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_02_07_2023_11_36_[Changes]" date="1688290615687" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_36_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 02/07/2023 11:36 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_33_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_33_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_33_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_33_[Changes]/shelved.patch	(revision 8516ea608a7e74fae166f37c49de725b402a5430)
+++ /dev/null	(revision 8516ea608a7e74fae166f37c49de725b402a5430)
@@ -1,39 +0,0 @@
-Index: src/main/java/Frame.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>import javax.swing.*;\r\nimport javax.swing.event.ChangeEvent;\r\nimport javax.swing.event.ChangeListener;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.event.WindowAdapter;\r\nimport java.awt.event.WindowEvent;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\npublic class Frame{\r\n    private JFrame frame;\r\n    private JTextField firstTextField;\r\n    private JPanel panelSpoiler;\r\n    private JPanel panelNeighbours;\r\n    private  JPanel panelDisplayedResults;\r\n\r\n    private JTextArea outputArea;\r\n\r\n    private String searchBy;\r\n\r\n\r\n    private List<List<List<String>>> src;\r\n    private int numberOfNeighbours=2;\r\n    private int numberOfDisplayedResults = 10;\r\n\r\n\r\n    Frame(){\r\n        frame=new JFrame(\"Test\");\r\n        frame.setSize(1000,600);\r\n        firstTextField=new JTextField(60);\r\n\r\n        firstTextField.setMaximumSize(new Dimension(200,50));\r\n\r\n\r\n        Dimension size = new Dimension(95, 30);\r\n\r\n        JButton loadButton = new JButton(\"load\");\r\n        loadButton.setMaximumSize(size);\r\n        loadButton.addActionListener(new LoadButtonHandler());\r\n\r\n        JButton searchButton = new JButton(\"search\");\r\n        searchButton.setMaximumSize(size);\r\n        searchButton.addActionListener(new SearchButtonHandler());\r\n\r\n        JRadioButton lemma = new JRadioButton(\"Lemma\");\r\n        JRadioButton pos = new JRadioButton(\"POS\");\r\n        JRadioButton word = new JRadioButton(\"Word\");\r\n\r\n        ButtonGroup buttonGroup = new ButtonGroup();\r\n        buttonGroup.add(lemma);\r\n        buttonGroup.add(pos);\r\n        buttonGroup.add(word);\r\n\r\n        lemma.addActionListener(new WordPosLemmaButtonHandler());\r\n        pos.addActionListener(new WordPosLemmaButtonHandler());\r\n        word.addActionListener(new WordPosLemmaButtonHandler());\r\n\r\n        Box box1 = Box.createVerticalBox();\r\n        box1.add(lemma);\r\n        box1.add(pos);\r\n        box1.add(word);\r\n\r\n        JPanel panel1=new JPanel();\r\n        BoxLayout aBoxLayout = new BoxLayout(panel1,BoxLayout.X_AXIS);\r\n        panel1.setLayout(aBoxLayout);\r\n\r\n        panel1.add(Box.createRigidArea(new Dimension(0,5)));\r\n        panel1.add(loadButton);\r\n        panel1.add(firstTextField);\r\n        panel1.add(box1);\r\n        panel1.add(Box.createHorizontalGlue());\r\n        panel1.add(searchButton);\r\n        //panel with spoiler panel\r\n        JPanel panel2=new JPanel();\r\n        BoxLayout bBoxLayout = new BoxLayout(panel2,BoxLayout.Y_AXIS);\r\n        panel2.setLayout(bBoxLayout);\r\n\r\n        panel2.add(Box.createRigidArea(new Dimension(0,5)));\r\n\r\n        JButton spoilerButton = new JButton(\"Additional filters\");\r\n        spoilerButton.setMaximumSize(new Dimension(frame.getWidth(),30));\r\n        spoilerButton.addActionListener(new SpoilerButtonHandler());\r\n        spoilerButton.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n        panel2.add(spoilerButton);\r\n\r\n        panel2.add(Box.createRigidArea(new Dimension(0,5)));\r\n        //spoiler panel\r\n        panelSpoiler=new JPanel();\r\n        BoxLayout spoilerBoxLayout = new BoxLayout(panelSpoiler,BoxLayout.X_AXIS);\r\n        panelSpoiler.setLayout(spoilerBoxLayout);\r\n\r\n        panel2.add(panelSpoiler);\r\n\r\n        JList<CheckboxListItem> list = new JList<CheckboxListItem>(\r\n                new CheckboxListItem[] { new CheckboxListItem(\"apple\"),\r\n                        new CheckboxListItem(\"orange\"),\r\n                        new CheckboxListItem(\"mango\"),\r\n                        new CheckboxListItem(\"paw paw\"),\r\n                        new CheckboxListItem(\"banana\") });\r\n\r\n        list.setCellRenderer(new CheckboxListRenderer());\r\n        list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\r\n\r\n        panelSpoiler.add(new JScrollPane(list));\r\n\r\n        panelNeighbours=new JPanel();\r\n        BoxLayout neigboursBoxLayout = new BoxLayout(panelNeighbours,BoxLayout.Y_AXIS);\r\n        panelNeighbours.setLayout(neigboursBoxLayout);\r\n        panelSpoiler.add(panelNeighbours);\r\n\r\n        JLabel neighbours= new JLabel(\"Neighbours\");\r\n        neighbours.setMaximumSize(size);\r\n\r\n        Integer[] neighboursStrings = {0, 1,2,3,4,5,6,7,8,9,10};\r\n        SpinnerListModel neighboursModel = new SpinnerListModel(neighboursStrings);\r\n        JSpinner spinner = new JSpinner(neighboursModel);\r\n        spinner.setMaximumSize(size);\r\n        spinner.setValue(numberOfNeighbours);\r\n        spinner.addChangeListener(new spinnerListener());\r\n\r\n        panelNeighbours.add(neighbours);\r\n        panelNeighbours.add(spinner);\r\n        neighbours.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        spinner.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n        panelSpoiler.add(Box.createRigidArea(new Dimension(5,0)));\r\n\r\n        panelDisplayedResults=new JPanel();\r\n        BoxLayout displayedResultsLayout = new BoxLayout(panelDisplayedResults,BoxLayout.Y_AXIS);\r\n        panelDisplayedResults.setLayout(displayedResultsLayout);\r\n        panelSpoiler.add(panelDisplayedResults);\r\n\r\n        JLabel displayedResults= new JLabel(\"Amount of displayed results\");\r\n        displayedResults.setMaximumSize(new Dimension(300,30));\r\n\r\n        JSlider slider = new JSlider(JSlider.HORIZONTAL,\r\n                1, 50, numberOfDisplayedResults);\r\n        slider.setMaximumSize(new Dimension(300,100));\r\n        slider.setMajorTickSpacing(10);\r\n        slider.setMinorTickSpacing(1);\r\n        slider.setPaintTicks(true);\r\n        slider.setPaintLabels(true);\r\n        slider.addChangeListener(new sliderListener());\r\n\r\n        panelDisplayedResults.add(displayedResults);\r\n        panelDisplayedResults.add(slider);\r\n        displayedResults.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        slider.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n\r\n        JPanel panel3=new JPanel();\r\n        BoxLayout cBoxLayout = new BoxLayout(panel3,BoxLayout.X_AXIS);\r\n        panel3.setLayout(cBoxLayout);\r\n\r\n        panel3.add(Box.createRigidArea(new Dimension(0,5)));\r\n\r\n\r\n        frame.getContentPane().setLayout(new BoxLayout(frame.getContentPane(),BoxLayout.Y_AXIS));\r\n        frame.getContentPane().add(panel1);\r\n        frame.getContentPane().add(panel2);\r\n        frame.getContentPane().add(panel3);\r\n        //This is the common size of the buttons\r\n\r\n        frame.addWindowListener(new MyWindowListener());\r\n        frame.setVisible(true);\r\n\r\n\r\n        // Create the JTextArea for displaying the output\r\n        outputArea = new JTextArea();\r\n        outputArea.setEditable(false); // Make it read-only\r\n        frame.add(outputArea);\r\n\r\n    }\r\n    public class SpoilerButtonHandler implements ActionListener {\r\n        public void actionPerformed(ActionEvent e) {\r\n            if (panelSpoiler.isVisible()){\r\n                panelSpoiler.setVisible(false);\r\n\r\n            } else {\r\n\r\n                panelSpoiler.setVisible(true);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public class LoadButtonHandler implements ActionListener {\r\n        public void actionPerformed(ActionEvent e) {\r\n            JFileChooser fileChooser = new JFileChooser();\r\n            fileChooser.setCurrentDirectory(new File(System.getProperty(\"user.home\")));\r\n            int result = fileChooser.showOpenDialog(frame);\r\n            if (result == JFileChooser.APPROVE_OPTION) {\r\n                File selectedFile = fileChooser.getSelectedFile();\r\n\r\n            String text=\"\";\r\n            Scanner inputStream;\r\n            try{\r\n                inputStream=new Scanner(selectedFile);\r\n\r\n            } catch (FileNotFoundException ex) {\r\n                JOptionPane.showMessageDialog(frame,\"File can not be found\");\r\n                throw new RuntimeException(ex);\r\n            }\r\n            while (inputStream.hasNextLine()){\r\n                text=text+inputStream.nextLine();\r\n            }\r\n\r\n            CorpusBuilder corp= new CorpusBuilder(text);\r\n            corp.getSentences();\r\n            corp.getTokens();\r\n            corp.getPosTags();\r\n            corp.getLemmas();\r\n\r\n            src = corp.getWordPosLemma();\r\n\r\n            inputStream.close();\r\n            }\r\n        }\r\n    }\r\n\r\n    private class spinnerListener implements ChangeListener {\r\n        public void stateChanged(ChangeEvent e) {\r\n            JSpinner spinner= (JSpinner) e.getSource();\r\n            SpinnerModel spinnerModel = (SpinnerModel) spinner.getModel();\r\n            if (spinnerModel instanceof SpinnerDateModel) {\r\n                numberOfNeighbours=(int)spinnerModel.getValue();\r\n            }\r\n        }\r\n    }\r\n    private class sliderListener implements ChangeListener {\r\n        public void stateChanged(ChangeEvent e) {\r\n\r\n        JSlider source = (JSlider) e.getSource();\r\n        if(!source.getValueIsAdjusting())\r\n\r\n        {\r\n             numberOfDisplayedResults= source.getValue();\r\n\r\n        }\r\n    }\r\n    }\r\n    private class QuitButtonHandler implements ActionListener {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            System.exit(0);\r\n        }\r\n    }\r\n    private class MyWindowListener extends WindowAdapter {\r\n\r\n        public void windowClosing(WindowEvent e) {\r\n            System.exit(0);\r\n        }\r\n    }\r\n\r\n    private class WordPosLemmaButtonHandler implements ActionListener {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            JRadioButton button = (JRadioButton) e.getSource();\r\n            searchBy = button.getText();\r\n        }\r\n    }\r\n\r\n\r\n    private class SearchButtonHandler implements ActionListener {\r\n        String s = firstTextField.getText();\r\n        public void actionPerformed(ActionEvent e) {\r\n            if (searchBy.equals(\"Word\")){\r\n                for (int i=0;i<src.size();i++){   //iteration by sentences\r\n                    for (int k=0;k<src.get(i).size();k++){   //iteration by words\r\n                        if (src.get(i).get(k).get(0).equals(s)){\r\n                            System.out.println(src.get(i)); //prints a list of tokens, lemmas and pos tags\r\n                            //src.get(i).get(k).get(1) -- POS tag of the word\r\n                            System.out.println(getContextWords(src.get(i), k, numberOfNeighbours)); //prints final sentences with neighbours\r\n                        }\r\n                    }\r\n                }\r\n            } else if (searchBy.equals(\"Lemma\")) {\r\n\r\n\r\n            } else if (searchBy.equals(\"POS\")) {\r\n\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Helper method that gets a list from CorpusBuilder, index of the word and the number of neighbours\r\n     * @param sentenceList\r\n     * @param index\r\n     * @param numNeighbours\r\n     * @return a string with word and his neighbours\r\n     */\r\n    private static String getContextWords (List<List<String>> sentenceList, int index, int numNeighbours){\r\n        ArrayList<String> contextWords = new ArrayList<>();\r\n        ArrayList<String> sentenceArrayList = new ArrayList<>();\r\n\r\n        for (List<String> list : sentenceList) {\r\n            if (!list.isEmpty()) {\r\n                sentenceArrayList.add(list.get(0));\r\n            }\r\n        }\r\n\r\n        if (index >= numNeighbours) {\r\n            contextWords.addAll(sentenceArrayList.subList((index - numNeighbours), index));\r\n        } else {\r\n            contextWords.addAll(sentenceArrayList.subList(0, index));\r\n        }\r\n\r\n        if (index < sentenceList.size() - numNeighbours - 1) {\r\n            contextWords.addAll(sentenceArrayList.subList(index + 1, index + numNeighbours + 1));\r\n        } else {\r\n            contextWords.addAll(sentenceArrayList.subList(index + 1, sentenceList.size()));\r\n        }\r\n\r\n        return String.join(\", \", contextWords);\r\n    }\r\n\r\n    class CheckboxListRenderer extends JCheckBox implements\r\n            ListCellRenderer<CheckboxListItem> {\r\n\r\n        @Override\r\n        public Component getListCellRendererComponent(\r\n                JList<? extends CheckboxListItem> list, CheckboxListItem value,\r\n                int index, boolean isSelected, boolean cellHasFocus) {\r\n            setEnabled(list.isEnabled());\r\n            setSelected(value.isSelected());\r\n            setFont(list.getFont());\r\n            setBackground(list.getBackground());\r\n            setForeground(list.getForeground());\r\n            setText(value.toString());\r\n            return this;\r\n        }\r\n    }\r\n    public class CheckboxListItem {\r\n\r\n        private String label;\r\n        private boolean isSelected = false;\r\n\r\n        public CheckboxListItem(String label) {\r\n            this.label = label;\r\n        }\r\n\r\n        public boolean isSelected() {\r\n            return isSelected;\r\n        }\r\n\r\n        public void setSelected(boolean isSelected) {\r\n            this.isSelected = isSelected;\r\n        }\r\n\r\n        public String toString() {\r\n            return label;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public static void main ( String[] args )\r\n    {\r\n        new Frame();\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/src/main/java/Frame.java b/src/main/java/Frame.java
---- a/src/main/java/Frame.java	(revision 95512d265b4363906c5670de9756f07a82891924)
-+++ b/src/main/java/Frame.java	(date 1688290432843)
-@@ -98,15 +98,16 @@
- 
-         panel2.add(panelSpoiler);
- 
--        JList<CheckboxListItem> list = new JList<CheckboxListItem>(
-+        JList<CheckboxListItem> posList = new JList<CheckboxListItem>(
-                 new CheckboxListItem[] { new CheckboxListItem("apple"),
-                         new CheckboxListItem("orange"),
-                         new CheckboxListItem("mango"),
-                         new CheckboxListItem("paw paw"),
-                         new CheckboxListItem("banana") });
- 
--        list.setCellRenderer(new CheckboxListRenderer());
--        list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
-+        posList.setCellRenderer(new CheckboxListRenderer());
-+        posList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
-+        posList.addMouseListener(new posListListener());
- 
-         panelSpoiler.add(new JScrollPane(list));
- 
-@@ -364,6 +365,8 @@
-     }
- 
- 
-+
-+
-     public static void main ( String[] args )
-     {
-         new Frame();
Index: .idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_04_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_04_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_04_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_04_[Changes]/shelved.patch	(revision 8516ea608a7e74fae166f37c49de725b402a5430)
+++ /dev/null	(revision 8516ea608a7e74fae166f37c49de725b402a5430)
@@ -1,129 +0,0 @@
-Index: src/main/java/Frame.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>import javax.swing.*;\r\nimport javax.swing.event.ChangeEvent;\r\nimport javax.swing.event.ChangeListener;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.event.WindowAdapter;\r\nimport java.awt.event.WindowEvent;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\npublic class Frame{\r\n    private JFrame frame;\r\n    private JTextField firstTextField;\r\n    private JPanel panelSpoiler;\r\n    private JPanel panelNeighbours;\r\n    private  JPanel panelDisplayedResults;\r\n\r\n    private String searchBy;\r\n\r\n\r\n    private List<List<List<String>>> src;\r\n    private int numberOfNeighbours=2;\r\n    private int numberOfDisplayedResults = 10;\r\n\r\n\r\n    Frame(){\r\n        frame=new JFrame(\"Test\");\r\n        frame.setSize(1000,600);\r\n        firstTextField=new JTextField(60);\r\n\r\n        firstTextField.setMaximumSize(new Dimension(200,50));\r\n\r\n        Dimension size = new Dimension(95, 30);\r\n\r\n        JButton loadButton = new JButton(\"load\");\r\n        loadButton.setMaximumSize(size);\r\n        loadButton.addActionListener(new LoadButtonHandler());\r\n\r\n        JRadioButton lemma = new JRadioButton(\"Lemma\");\r\n        JRadioButton pos = new JRadioButton(\"POS\");\r\n        JRadioButton word = new JRadioButton(\"Word\");\r\n\r\n        ButtonGroup buttonGroup = new ButtonGroup();\r\n        buttonGroup.add(lemma);\r\n        buttonGroup.add(pos);\r\n        buttonGroup.add(word);\r\n\r\n        lemma.addActionListener(new WordPosLemmaButtonHandler());\r\n        pos.addActionListener(new WordPosLemmaButtonHandler());\r\n        word.addActionListener(new WordPosLemmaButtonHandler());\r\n\r\n        Box box1 = Box.createVerticalBox();\r\n        box1.add(lemma);\r\n        box1.add(pos);\r\n        box1.add(word);\r\n\r\n        JPanel panel1=new JPanel();\r\n        BoxLayout aBoxLayout = new BoxLayout(panel1,BoxLayout.X_AXIS);\r\n        panel1.setLayout(aBoxLayout);\r\n\r\n        panel1.add(Box.createRigidArea(new Dimension(0,5)));\r\n        panel1.add(loadButton);\r\n        panel1.add(firstTextField);\r\n        panel1.add(box1);\r\n        //panel with spoiler panel\r\n        JPanel panel2=new JPanel();\r\n        BoxLayout bBoxLayout = new BoxLayout(panel2,BoxLayout.Y_AXIS);\r\n        panel2.setLayout(bBoxLayout);\r\n\r\n        panel2.add(Box.createRigidArea(new Dimension(0,5)));\r\n\r\n        JButton spoilerButton = new JButton(\"Additional filters\");\r\n        spoilerButton.setMaximumSize(new Dimension(frame.getWidth(),30));\r\n        spoilerButton.addActionListener(new SpoilerButtonHandler());\r\n        spoilerButton.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n        panel2.add(spoilerButton);\r\n\r\n        panel2.add(Box.createRigidArea(new Dimension(0,5)));\r\n        //spoiler panel\r\n        panelSpoiler=new JPanel();\r\n        BoxLayout spoilerBoxLayout = new BoxLayout(panelSpoiler,BoxLayout.X_AXIS);\r\n        panelSpoiler.setLayout(spoilerBoxLayout);\r\n\r\n        panel2.add(panelSpoiler);\r\n\r\n\r\n        panelNeighbours=new JPanel();\r\n        BoxLayout neigboursBoxLayout = new BoxLayout(panelNeighbours,BoxLayout.Y_AXIS);\r\n        panelNeighbours.setLayout(neigboursBoxLayout);\r\n        panelSpoiler.add(panelNeighbours);\r\n\r\n        JLabel neighbours= new JLabel(\"Neighbours\");\r\n        neighbours.setMaximumSize(size);\r\n\r\n        Integer[] neighboursStrings = {0, 1,2,3,4,5,6,7,8,9,10};\r\n        SpinnerListModel neighboursModel = new SpinnerListModel(neighboursStrings);\r\n        JSpinner spinner = new JSpinner(neighboursModel);\r\n        spinner.setMaximumSize(size);\r\n        spinner.setValue(numberOfNeighbours);\r\n        spinner.addChangeListener(new spinnerListener());\r\n\r\n        panelNeighbours.add(neighbours);\r\n        panelNeighbours.add(spinner);\r\n        neighbours.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        spinner.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n        panelSpoiler.add(Box.createRigidArea(new Dimension(5,0)));\r\n\r\n        panelDisplayedResults=new JPanel();\r\n        BoxLayout displayedResultsLayout = new BoxLayout(panelDisplayedResults,BoxLayout.Y_AXIS);\r\n        panelDisplayedResults.setLayout(displayedResultsLayout);\r\n        panelSpoiler.add(panelDisplayedResults);\r\n\r\n        JLabel displayedResults= new JLabel(\"Amount of displayed results\");\r\n        displayedResults.setMaximumSize(new Dimension(300,30));\r\n\r\n        JSlider slider = new JSlider(JSlider.HORIZONTAL,\r\n                1, 50, numberOfDisplayedResults);\r\n        slider.setMaximumSize(new Dimension(300,100));\r\n        slider.setMajorTickSpacing(10);\r\n        slider.setMinorTickSpacing(1);\r\n        slider.setPaintTicks(true);\r\n        slider.setPaintLabels(true);\r\n        slider.addChangeListener(new sliderListener());\r\n\r\n        panelDisplayedResults.add(displayedResults);\r\n        panelDisplayedResults.add(slider);\r\n        displayedResults.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        slider.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n\r\n        JPanel panel3=new JPanel();\r\n        BoxLayout cBoxLayout = new BoxLayout(panel3,BoxLayout.X_AXIS);\r\n        panel3.setLayout(cBoxLayout);\r\n\r\n        panel3.add(Box.createRigidArea(new Dimension(0,5)));\r\n\r\n        frame.getContentPane().setLayout(new BoxLayout(frame.getContentPane(),BoxLayout.Y_AXIS));\r\n        frame.getContentPane().add(panel1);\r\n        frame.getContentPane().add(panel2);\r\n        frame.getContentPane().add(panel3);\r\n        //This is the common size of the buttons\r\n\r\n        frame.addWindowListener(new MyWindowListener());\r\n        frame.setVisible(true);\r\n\r\n    }\r\n    public class SpoilerButtonHandler implements ActionListener {\r\n        public void actionPerformed(ActionEvent e) {\r\n            if (panelSpoiler.isVisible()){\r\n                panelSpoiler.setVisible(false);\r\n\r\n            } else {\r\n\r\n                panelSpoiler.setVisible(true);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public class LoadButtonHandler implements ActionListener {\r\n        public void actionPerformed(ActionEvent e) {\r\n            JFileChooser fileChooser = new JFileChooser();\r\n            fileChooser.setCurrentDirectory(new File(System.getProperty(\"user.home\")));\r\n            int result = fileChooser.showOpenDialog(frame);\r\n            if (result == JFileChooser.APPROVE_OPTION) {\r\n                File selectedFile = fileChooser.getSelectedFile();\r\n\r\n            String text=\"\";\r\n            Scanner inputStream;\r\n            try{\r\n                inputStream=new Scanner(selectedFile);\r\n\r\n            } catch (FileNotFoundException ex) {\r\n                JOptionPane.showMessageDialog(frame,\"File can not be found\");\r\n                throw new RuntimeException(ex);\r\n            }\r\n            while (inputStream.hasNextLine()){\r\n                text=text+inputStream.nextLine();\r\n            }\r\n\r\n            CorpusBuilder corp= new CorpusBuilder(text);\r\n            corp.getSentences();\r\n            corp.getTokens();\r\n            corp.getPosTags();\r\n            corp.getLemmas();\r\n\r\n            src = corp.getWordPosLemma();\r\n\r\n            inputStream.close();\r\n            }\r\n        }\r\n    }\r\n\r\n    private class spinnerListener implements ChangeListener {\r\n        public void stateChanged(ChangeEvent e) {\r\n            JSpinner spinner= (JSpinner) e.getSource();\r\n            SpinnerModel spinnerModel = (SpinnerModel) spinner.getModel();\r\n            if (spinnerModel instanceof SpinnerDateModel) {\r\n                numberOfNeighbours=(int)spinnerModel.getValue();\r\n            }\r\n        }\r\n    }\r\n    private class sliderListener implements ChangeListener {\r\n        public void stateChanged(ChangeEvent e) {\r\n\r\n        JSlider source = (JSlider) e.getSource();\r\n        if(!source.getValueIsAdjusting())\r\n\r\n        {\r\n             numberOfDisplayedResults= source.getValue();\r\n\r\n        }\r\n    }\r\n    }\r\n    private class QuitButtonHandler implements ActionListener {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            System.exit(0);\r\n        }\r\n    }\r\n    private class MyWindowListener extends WindowAdapter {\r\n\r\n        public void windowClosing(WindowEvent e) {\r\n            System.exit(0);\r\n        }\r\n    }\r\n\r\n    private class WordPosLemmaButtonHandler implements ActionListener {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            JRadioButton button = (JRadioButton) e.getSource();\r\n            searchBy = button.getText();\r\n        }\r\n    }\r\n\r\n\r\n    private class SearchButtonHandler implements ActionListener {\r\n        String s = firstTextField.getText();\r\n        public void actionPerformed(ActionEvent e) {\r\n            if (searchBy.equals(\"Word\")){\r\n                for (int i=0;i<src.size();i++){   //iteration by sentences\r\n                    for (int k=0;k<src.get(i).size();k++){   //iteration by words\r\n                        if (src.get(i).get(k).get(2).equals(s)){\r\n                            System.out.println(src.get(i)); //this should be fixed in the future\r\n                        }\r\n                    }\r\n                }\r\n                //**public static ArrayList<String> getContextWords(ArrayList<String> sentence, int index) {\r\n                //        ArrayList<String> contextWords = new ArrayList<>();\r\n                //\r\n                //        if (index >= 2) {\r\n                //            contextWords.addAll(sentence.subList(index - 2, index));\r\n                //        } else {\r\n                //            contextWords.addAll(sentence.subList(0, index));\r\n                //        }\r\n                //\r\n                //        if (index < sentence.size() - 3) {\r\n                //            contextWords.addAll(sentence.subList(index + 1, index + 4));\r\n                //        } else {\r\n                //            contextWords.addAll(sentence.subList(index + 1, sentence.size()));\r\n                //        }\r\n                //\r\n                //        return contextWords;\r\n                //    }*/\r\n            } else if (searchBy.equals(\"Lemma\")) {\r\n\r\n\r\n            } else if (searchBy.equals(\"POS\")) {\r\n\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    public static void main ( String[] args )\r\n    {\r\n        new Frame();\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/src/main/java/Frame.java b/src/main/java/Frame.java
---- a/src/main/java/Frame.java	(revision 58d3ccc04d01b3aa660362e1e1adc7bc6c0a2fc3)
-+++ b/src/main/java/Frame.java	(date 1688288670599)
-@@ -247,28 +247,13 @@
-             if (searchBy.equals("Word")){
-                 for (int i=0;i<src.size();i++){   //iteration by sentences
-                     for (int k=0;k<src.get(i).size();k++){   //iteration by words
--                        if (src.get(i).get(k).get(2).equals(s)){
--                            System.out.println(src.get(i)); //this should be fixed in the future
-+                        if (src.get(i).get(k).get(0).equals(s)){
-+                            System.out.println(src.get(i)); //prints a list of tokens, lemmas and pos tags
-+                            //src.get(i).get(k).get(1) -- POS tag of the word
-+                            System.out.println(getContextWords(src.get(i), k, numberOfNeighbours)); //prints final sentences with neighbours
-                         }
-                     }
-                 }
--                //**public static ArrayList<String> getContextWords(ArrayList<String> sentence, int index) {
--                //        ArrayList<String> contextWords = new ArrayList<>();
--                //
--                //        if (index >= 2) {
--                //            contextWords.addAll(sentence.subList(index - 2, index));
--                //        } else {
--                //            contextWords.addAll(sentence.subList(0, index));
--                //        }
--                //
--                //        if (index < sentence.size() - 3) {
--                //            contextWords.addAll(sentence.subList(index + 1, index + 4));
--                //        } else {
--                //            contextWords.addAll(sentence.subList(index + 1, sentence.size()));
--                //        }
--                //
--                //        return contextWords;
--                //    }*/
-             } else if (searchBy.equals("Lemma")) {
- 
- 
-@@ -279,6 +264,38 @@
-         }
-     }
- 
-+    /**
-+     * Helper method that gets a list from CorpusBuilder, index of the word and the number of neighbours
-+     * @param sentenceList
-+     * @param index
-+     * @param numNeighbours
-+     * @return a string with word and his neighbours
-+     */
-+    private static String getContextWords (List<List<String>> sentenceList, int index, int numNeighbours){
-+        ArrayList<String> contextWords = new ArrayList<>();
-+        ArrayList<String> sentenceArrayList = new ArrayList<>();
-+
-+        for (List<String> list : sentenceList) {
-+            if (!list.isEmpty()) {
-+                sentenceArrayList.add(list.get(0));
-+            }
-+        }
-+
-+        if (index >= numNeighbours) {
-+            contextWords.addAll(sentenceArrayList.subList((index - numNeighbours), index));
-+        } else {
-+            contextWords.addAll(sentenceArrayList.subList(0, index));
-+        }
-+
-+        if (index < sentenceList.size() - numNeighbours - 1) {
-+            contextWords.addAll(sentenceArrayList.subList(index + 1, index + numNeighbours + 1));
-+        } else {
-+            contextWords.addAll(sentenceArrayList.subList(index + 1, sentenceList.size()));
-+        }
-+
-+        return String.join(", ", contextWords);
-+    }
-+
-     public static void main ( String[] args )
-     {
-         new Frame();
-Index: .idea/misc.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"MavenProjectsManager\">\r\n    <option name=\"originalFiles\">\r\n      <list>\r\n        <option value=\"$PROJECT_DIR$/pom.xml\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_19\" default=\"true\" project-jdk-name=\"11\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/misc.xml b/.idea/misc.xml
---- a/.idea/misc.xml	(revision 58d3ccc04d01b3aa660362e1e1adc7bc6c0a2fc3)
-+++ b/.idea/misc.xml	(date 1688287371616)
-@@ -8,7 +8,7 @@
-       </list>
-     </option>
-   </component>
--  <component name="ProjectRootManager" version="2" languageLevel="JDK_19" default="true" project-jdk-name="11" project-jdk-type="JavaSDK">
-+  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="11" project-jdk-type="JavaSDK">
-     <output url="file://$PROJECT_DIR$/out" />
-   </component>
- </project>
-\ No newline at end of file
-Index: pom.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n  <modelVersion>4.0.0</modelVersion>\r\n  <groupId>de.uni.tuebingen.sfs.java2</groupId>\r\n  <artifactId>CorpusBuilder</artifactId>\r\n  <version>1.0-SNAPSHOT</version>\r\n  <name>CorpusBuilder</name>\r\n  <!--  FIXME change it to the project's website  -->\r\n  <properties>\r\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n    <maven.compiler.source>1.7</maven.compiler.source>\r\n    <maven.compiler.target>1.7</maven.compiler.target>\r\n  </properties>\r\n  <dependencies>\r\n    <dependency>\r\n      <groupId>junit</groupId>\r\n      <artifactId>junit</artifactId>\r\n      <version>4.11</version>\r\n      <scope>test</scope>\r\n    </dependency>\r\n    <dependency>\r\n      <groupId>org.apache.opennlp</groupId>\r\n      <artifactId>opennlp-tools</artifactId>\r\n      <version>1.9.3</version>\r\n    </dependency>\r\n  </dependencies>\r\n  <build>\r\n    <pluginManagement>\r\n      <!--  lock down plugins versions to avoid using Maven defaults (maybe moved to parent pom)  -->\r\n      <plugins>\r\n        <!--  clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle  -->\r\n        <plugin>\r\n          <artifactId>maven-clean-plugin</artifactId>\r\n          <version>3.1.0</version>\r\n        </plugin>\r\n\r\n        <!--  default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging  -->\r\n        <plugin>\r\n          <artifactId>maven-resources-plugin</artifactId>\r\n          <version>3.0.2</version>\r\n\r\n        </plugin>\r\n        <plugin>\r\n          <artifactId>maven-compiler-plugin</artifactId>\r\n          <version>3.8.0</version>\r\n        </plugin>\r\n        <plugin>\r\n          <artifactId>maven-surefire-plugin</artifactId>\r\n          <version>2.22.1</version>\r\n        </plugin>\r\n        <plugin>\r\n          <artifactId>maven-jar-plugin</artifactId>\r\n          <version>3.0.2</version>\r\n        </plugin>\r\n        <plugin>\r\n          <artifactId>maven-install-plugin</artifactId>\r\n          <version>2.5.2</version>\r\n        </plugin>\r\n        <plugin>\r\n          <artifactId>maven-deploy-plugin</artifactId>\r\n          <version>2.8.2</version>\r\n        </plugin>\r\n        <!--  site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle  -->\r\n        <plugin>\r\n          <artifactId>maven-site-plugin</artifactId>\r\n          <version>3.7.1</version>\r\n        </plugin>\r\n        <plugin>\r\n          <artifactId>maven-project-info-reports-plugin</artifactId>\r\n          <version>3.0.0</version>\r\n        </plugin>\r\n      </plugins>\r\n    </pluginManagement>\r\n\r\n  </build>\r\n\r\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/pom.xml b/pom.xml
---- a/pom.xml	(revision 58d3ccc04d01b3aa660362e1e1adc7bc6c0a2fc3)
-+++ b/pom.xml	(date 1688287444022)
-@@ -70,6 +70,16 @@
-         </plugin>
-       </plugins>
-     </pluginManagement>
-+      <plugins>
-+          <plugin>
-+              <groupId>org.apache.maven.plugins</groupId>
-+              <artifactId>maven-compiler-plugin</artifactId>
-+              <configuration>
-+                  <source>8</source>
-+                  <target>8</target>
-+              </configuration>
-+          </plugin>
-+      </plugins>
- 
-   </build>
- 
Index: .idea/shelf/Uncommitted_changes_before_Update_at_7_2_2023_11_32_AM_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_7_2_2023_11_32_AM_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_7_2_2023_11_32_AM_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_7_2_2023_11_32_AM_[Changes]/shelved.patch	(revision 8516ea608a7e74fae166f37c49de725b402a5430)
+++ /dev/null	(revision 8516ea608a7e74fae166f37c49de725b402a5430)
@@ -1,18 +0,0 @@
-Index: src/main/java/Frame.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>import javax.swing.*;\r\nimport javax.swing.event.ChangeEvent;\r\nimport javax.swing.event.ChangeListener;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.event.WindowAdapter;\r\nimport java.awt.event.WindowEvent;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\npublic class Frame{\r\n    private JFrame frame;\r\n    private JTextField firstTextField;\r\n    private JPanel panelSpoiler;\r\n    private JPanel panelNeighbours;\r\n    private  JPanel panelDisplayedResults;\r\n\r\n    private JTextArea outputArea;\r\n\r\n    private String searchBy;\r\n\r\n\r\n    private List<List<List<String>>> src;\r\n    private int numberOfNeighbours=2;\r\n    private int numberOfDisplayedResults = 10;\r\n\r\n\r\n    Frame(){\r\n        frame=new JFrame(\"Test\");\r\n        frame.setSize(1000,600);\r\n        firstTextField=new JTextField(60);\r\n\r\n        firstTextField.setMaximumSize(new Dimension(200,50));\r\n\r\n\r\n        Dimension size = new Dimension(95, 30);\r\n\r\n        JButton loadButton = new JButton(\"load\");\r\n        loadButton.setMaximumSize(size);\r\n        loadButton.addActionListener(new LoadButtonHandler());\r\n\r\n        JButton searchButton = new JButton(\"search\");\r\n        searchButton.setMaximumSize(size);\r\n        searchButton.addActionListener(new SearchButtonHandler());\r\n\r\n        JRadioButton lemma = new JRadioButton(\"Lemma\");\r\n        JRadioButton pos = new JRadioButton(\"POS\");\r\n        JRadioButton word = new JRadioButton(\"Word\");\r\n\r\n        ButtonGroup buttonGroup = new ButtonGroup();\r\n        buttonGroup.add(lemma);\r\n        buttonGroup.add(pos);\r\n        buttonGroup.add(word);\r\n\r\n        lemma.addActionListener(new WordPosLemmaButtonHandler());\r\n        pos.addActionListener(new WordPosLemmaButtonHandler());\r\n        word.addActionListener(new WordPosLemmaButtonHandler());\r\n\r\n        Box box1 = Box.createVerticalBox();\r\n        box1.add(lemma);\r\n        box1.add(pos);\r\n        box1.add(word);\r\n\r\n        JPanel panel1=new JPanel();\r\n        BoxLayout aBoxLayout = new BoxLayout(panel1,BoxLayout.X_AXIS);\r\n        panel1.setLayout(aBoxLayout);\r\n\r\n        panel1.add(Box.createRigidArea(new Dimension(0,5)));\r\n        panel1.add(loadButton);\r\n        panel1.add(firstTextField);\r\n        panel1.add(box1);\r\n        panel1.add(Box.createHorizontalGlue());\r\n        panel1.add(searchButton);\r\n        //panel with spoiler panel\r\n        JPanel panel2=new JPanel();\r\n        BoxLayout bBoxLayout = new BoxLayout(panel2,BoxLayout.Y_AXIS);\r\n        panel2.setLayout(bBoxLayout);\r\n\r\n        panel2.add(Box.createRigidArea(new Dimension(0,5)));\r\n\r\n        JButton spoilerButton = new JButton(\"Additional filters\");\r\n        spoilerButton.setMaximumSize(new Dimension(frame.getWidth(),30));\r\n        spoilerButton.addActionListener(new SpoilerButtonHandler());\r\n        spoilerButton.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n        panel2.add(spoilerButton);\r\n\r\n        panel2.add(Box.createRigidArea(new Dimension(0,5)));\r\n        //spoiler panel\r\n        panelSpoiler=new JPanel();\r\n        BoxLayout spoilerBoxLayout = new BoxLayout(panelSpoiler,BoxLayout.X_AXIS);\r\n        panelSpoiler.setLayout(spoilerBoxLayout);\r\n\r\n        panel2.add(panelSpoiler);\r\n\r\n\r\n        panelNeighbours=new JPanel();\r\n        BoxLayout neigboursBoxLayout = new BoxLayout(panelNeighbours,BoxLayout.Y_AXIS);\r\n        panelNeighbours.setLayout(neigboursBoxLayout);\r\n        panelSpoiler.add(panelNeighbours);\r\n\r\n        JLabel neighbours= new JLabel(\"Neighbours\");\r\n        neighbours.setMaximumSize(size);\r\n\r\n        Integer[] neighboursStrings = {0, 1,2,3,4,5,6,7,8,9,10};\r\n        SpinnerListModel neighboursModel = new SpinnerListModel(neighboursStrings);\r\n        JSpinner spinner = new JSpinner(neighboursModel);\r\n        spinner.setMaximumSize(size);\r\n        spinner.setValue(numberOfNeighbours);\r\n        spinner.addChangeListener(new spinnerListener());\r\n\r\n        panelNeighbours.add(neighbours);\r\n        panelNeighbours.add(spinner);\r\n        neighbours.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        spinner.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n        panelSpoiler.add(Box.createRigidArea(new Dimension(5,0)));\r\n\r\n        panelDisplayedResults=new JPanel();\r\n        BoxLayout displayedResultsLayout = new BoxLayout(panelDisplayedResults,BoxLayout.Y_AXIS);\r\n        panelDisplayedResults.setLayout(displayedResultsLayout);\r\n        panelSpoiler.add(panelDisplayedResults);\r\n\r\n        JLabel displayedResults= new JLabel(\"Amount of displayed results\");\r\n        displayedResults.setMaximumSize(new Dimension(300,30));\r\n\r\n        JSlider slider = new JSlider(JSlider.HORIZONTAL,\r\n                1, 50, numberOfDisplayedResults);\r\n        slider.setMaximumSize(new Dimension(300,100));\r\n        slider.setMajorTickSpacing(10);\r\n        slider.setMinorTickSpacing(1);\r\n        slider.setPaintTicks(true);\r\n        slider.setPaintLabels(true);\r\n        slider.addChangeListener(new sliderListener());\r\n\r\n        panelDisplayedResults.add(displayedResults);\r\n        panelDisplayedResults.add(slider);\r\n        displayedResults.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        slider.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n\r\n        JPanel panel3=new JPanel();\r\n        BoxLayout cBoxLayout = new BoxLayout(panel3,BoxLayout.X_AXIS);\r\n        panel3.setLayout(cBoxLayout);\r\n\r\n        panel3.add(Box.createRigidArea(new Dimension(0,5)));\r\n\r\n\r\n        frame.getContentPane().setLayout(new BoxLayout(frame.getContentPane(),BoxLayout.Y_AXIS));\r\n        frame.getContentPane().add(panel1);\r\n        frame.getContentPane().add(panel2);\r\n        frame.getContentPane().add(panel3);\r\n        //This is the common size of the buttons\r\n\r\n        frame.addWindowListener(new MyWindowListener());\r\n        frame.setVisible(true);\r\n\r\n\r\n        // Create the JTextArea for displaying the output\r\n        outputArea = new JTextArea();\r\n        outputArea.setEditable(false); // Make it read-only\r\n        frame.add(outputArea);\r\n\r\n    }\r\n    public class SpoilerButtonHandler implements ActionListener {\r\n        public void actionPerformed(ActionEvent e) {\r\n            if (panelSpoiler.isVisible()){\r\n                panelSpoiler.setVisible(false);\r\n\r\n            } else {\r\n\r\n                panelSpoiler.setVisible(true);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public class LoadButtonHandler implements ActionListener {\r\n        public void actionPerformed(ActionEvent e) {\r\n            JFileChooser fileChooser = new JFileChooser();\r\n            fileChooser.setCurrentDirectory(new File(System.getProperty(\"user.home\")));\r\n            int result = fileChooser.showOpenDialog(frame);\r\n            if (result == JFileChooser.APPROVE_OPTION) {\r\n                File selectedFile = fileChooser.getSelectedFile();\r\n\r\n            String text=\"\";\r\n            Scanner inputStream;\r\n            try{\r\n                inputStream=new Scanner(selectedFile);\r\n\r\n            } catch (FileNotFoundException ex) {\r\n                JOptionPane.showMessageDialog(frame,\"File can not be found\");\r\n                throw new RuntimeException(ex);\r\n            }\r\n            while (inputStream.hasNextLine()){\r\n                text=text+inputStream.nextLine();\r\n            }\r\n\r\n            CorpusBuilder corp= new CorpusBuilder(text);\r\n            corp.getSentences();\r\n            corp.getTokens();\r\n            corp.getPosTags();\r\n            corp.getLemmas();\r\n\r\n            src = corp.getWordPosLemma();\r\n\r\n            inputStream.close();\r\n            }\r\n        }\r\n    }\r\n\r\n    private class spinnerListener implements ChangeListener {\r\n        public void stateChanged(ChangeEvent e) {\r\n            JSpinner spinner= (JSpinner) e.getSource();\r\n            SpinnerModel spinnerModel = (SpinnerModel) spinner.getModel();\r\n            if (spinnerModel instanceof SpinnerDateModel) {\r\n                numberOfNeighbours=(int)spinnerModel.getValue();\r\n            }\r\n        }\r\n    }\r\n    private class sliderListener implements ChangeListener {\r\n        public void stateChanged(ChangeEvent e) {\r\n\r\n        JSlider source = (JSlider) e.getSource();\r\n        if(!source.getValueIsAdjusting())\r\n\r\n        {\r\n             numberOfDisplayedResults= source.getValue();\r\n\r\n        }\r\n    }\r\n    }\r\n    private class QuitButtonHandler implements ActionListener {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            System.exit(0);\r\n        }\r\n    }\r\n    private class MyWindowListener extends WindowAdapter {\r\n\r\n        public void windowClosing(WindowEvent e) {\r\n            System.exit(0);\r\n        }\r\n    }\r\n\r\n    private class WordPosLemmaButtonHandler implements ActionListener {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            JRadioButton button = (JRadioButton) e.getSource();\r\n            searchBy = button.getText();\r\n        }\r\n    }\r\n\r\n\r\n    private class SearchButtonHandler implements ActionListener {\r\n        String s = firstTextField.getText();\r\n        public void actionPerformed(ActionEvent e) {\r\n            if (searchBy.equals(\"Word\")){\r\n                for (int i=0;i<src.size();i++){   //iteration by sentences\r\n                    for (int k=0;k<src.get(i).size();k++){   //iteration by words\r\n                        if (src.get(i).get(k).get(0).equals(s)){\r\n                            System.out.println(src.get(i)); //prints a list of tokens, lemmas and pos tags\r\n                            //src.get(i).get(k).get(1) -- POS tag of the word\r\n                            System.out.println(getContextWords(src.get(i), k, numberOfNeighbours)); //prints final sentences with neighbours\r\n                        }\r\n                    }\r\n                }\r\n            } else if (searchBy.equals(\"Lemma\")) {\r\n\r\n\r\n            } else if (searchBy.equals(\"POS\")) {\r\n\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Helper method that gets a list from CorpusBuilder, index of the word and the number of neighbours\r\n     * @param sentenceList\r\n     * @param index\r\n     * @param numNeighbours\r\n     * @return a string with word and his neighbours\r\n     */\r\n    private static String getContextWords (List<List<String>> sentenceList, int index, int numNeighbours){\r\n        ArrayList<String> contextWords = new ArrayList<>();\r\n        ArrayList<String> sentenceArrayList = new ArrayList<>();\r\n\r\n        for (List<String> list : sentenceList) {\r\n            if (!list.isEmpty()) {\r\n                sentenceArrayList.add(list.get(0));\r\n            }\r\n        }\r\n\r\n        if (index >= numNeighbours) {\r\n            contextWords.addAll(sentenceArrayList.subList((index - numNeighbours), index));\r\n        } else {\r\n            contextWords.addAll(sentenceArrayList.subList(0, index));\r\n        }\r\n\r\n        if (index < sentenceList.size() - numNeighbours - 1) {\r\n            contextWords.addAll(sentenceArrayList.subList(index + 1, index + numNeighbours + 1));\r\n        } else {\r\n            contextWords.addAll(sentenceArrayList.subList(index + 1, sentenceList.size()));\r\n        }\r\n\r\n        return String.join(\", \", contextWords);\r\n    }\r\n\r\n    public static void main ( String[] args )\r\n    {\r\n        new Frame();\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/src/main/java/Frame.java b/src/main/java/Frame.java
---- a/src/main/java/Frame.java	(revision e10be0a15939d0add488bb9b7c2941bcec1943ff)
-+++ b/src/main/java/Frame.java	(date 1688290339498)
-@@ -95,6 +95,7 @@
-         panelSpoiler=new JPanel();
-         BoxLayout spoilerBoxLayout = new BoxLayout(panelSpoiler,BoxLayout.X_AXIS);
-         panelSpoiler.setLayout(spoilerBoxLayout);
-+        panelSpoiler.setVisible(false);
- 
-         panel2.add(panelSpoiler);
- 
Index: .idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_07_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_07_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_07_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_07_[Changes]/shelved.patch	(revision 8516ea608a7e74fae166f37c49de725b402a5430)
+++ /dev/null	(revision 8516ea608a7e74fae166f37c49de725b402a5430)
@@ -1,18 +0,0 @@
-Index: src/main/java/Frame.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>import javax.swing.*;\r\nimport javax.swing.event.ChangeEvent;\r\nimport javax.swing.event.ChangeListener;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.event.WindowAdapter;\r\nimport java.awt.event.WindowEvent;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\npublic class Frame{\r\n    private JFrame frame;\r\n    private JTextField firstTextField;\r\n    private JPanel panelSpoiler;\r\n    private JPanel panelNeighbours;\r\n    private  JPanel panelDisplayedResults;\r\n\r\n    private JTextArea outputArea;\r\n\r\n    private String searchBy;\r\n\r\n\r\n    private List<List<List<String>>> src;\r\n    private int numberOfNeighbours=2;\r\n    private int numberOfDisplayedResults = 10;\r\n\r\n\r\n    Frame(){\r\n        frame=new JFrame(\"Test\");\r\n        frame.setSize(1000,600);\r\n        firstTextField=new JTextField(60);\r\n\r\n        firstTextField.setMaximumSize(new Dimension(200,50));\r\n\r\n\r\n        Dimension size = new Dimension(95, 30);\r\n\r\n        JButton loadButton = new JButton(\"load\");\r\n        loadButton.setMaximumSize(size);\r\n        loadButton.addActionListener(new LoadButtonHandler());\r\n\r\n        JButton searchButton = new JButton(\"search\");\r\n        searchButton.setMaximumSize(size);\r\n        searchButton.addActionListener(new SearchButtonHandler());\r\n\r\n        JRadioButton lemma = new JRadioButton(\"Lemma\");\r\n        JRadioButton pos = new JRadioButton(\"POS\");\r\n        JRadioButton word = new JRadioButton(\"Word\");\r\n\r\n        ButtonGroup buttonGroup = new ButtonGroup();\r\n        buttonGroup.add(lemma);\r\n        buttonGroup.add(pos);\r\n        buttonGroup.add(word);\r\n\r\n        lemma.addActionListener(new WordPosLemmaButtonHandler());\r\n        pos.addActionListener(new WordPosLemmaButtonHandler());\r\n        word.addActionListener(new WordPosLemmaButtonHandler());\r\n\r\n        Box box1 = Box.createVerticalBox();\r\n        box1.add(lemma);\r\n        box1.add(pos);\r\n        box1.add(word);\r\n\r\n        JPanel panel1=new JPanel();\r\n        BoxLayout aBoxLayout = new BoxLayout(panel1,BoxLayout.X_AXIS);\r\n        panel1.setLayout(aBoxLayout);\r\n\r\n        panel1.add(Box.createRigidArea(new Dimension(0,5)));\r\n        panel1.add(loadButton);\r\n        panel1.add(firstTextField);\r\n        panel1.add(box1);\r\n        panel1.add(Box.createHorizontalGlue());\r\n        panel1.add(searchButton);\r\n        //panel with spoiler panel\r\n        JPanel panel2=new JPanel();\r\n        BoxLayout bBoxLayout = new BoxLayout(panel2,BoxLayout.Y_AXIS);\r\n        panel2.setLayout(bBoxLayout);\r\n\r\n        panel2.add(Box.createRigidArea(new Dimension(0,5)));\r\n\r\n        JButton spoilerButton = new JButton(\"Additional filters\");\r\n        spoilerButton.setMaximumSize(new Dimension(frame.getWidth(),30));\r\n        spoilerButton.addActionListener(new SpoilerButtonHandler());\r\n        spoilerButton.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n        panel2.add(spoilerButton);\r\n\r\n        panel2.add(Box.createRigidArea(new Dimension(0,5)));\r\n        //spoiler panel\r\n        panelSpoiler=new JPanel();\r\n        BoxLayout spoilerBoxLayout = new BoxLayout(panelSpoiler,BoxLayout.X_AXIS);\r\n        panelSpoiler.setLayout(spoilerBoxLayout);\r\n\r\n        panel2.add(panelSpoiler);\r\n\r\n\r\n        panelNeighbours=new JPanel();\r\n        BoxLayout neigboursBoxLayout = new BoxLayout(panelNeighbours,BoxLayout.Y_AXIS);\r\n        panelNeighbours.setLayout(neigboursBoxLayout);\r\n        panelSpoiler.add(panelNeighbours);\r\n\r\n        JLabel neighbours= new JLabel(\"Neighbours\");\r\n        neighbours.setMaximumSize(size);\r\n\r\n        Integer[] neighboursStrings = {0, 1,2,3,4,5,6,7,8,9,10};\r\n        SpinnerListModel neighboursModel = new SpinnerListModel(neighboursStrings);\r\n        JSpinner spinner = new JSpinner(neighboursModel);\r\n        spinner.setMaximumSize(size);\r\n        spinner.setValue(numberOfNeighbours);\r\n        spinner.addChangeListener(new spinnerListener());\r\n\r\n        panelNeighbours.add(neighbours);\r\n        panelNeighbours.add(spinner);\r\n        neighbours.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        spinner.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n        panelSpoiler.add(Box.createRigidArea(new Dimension(5,0)));\r\n\r\n        panelDisplayedResults=new JPanel();\r\n        BoxLayout displayedResultsLayout = new BoxLayout(panelDisplayedResults,BoxLayout.Y_AXIS);\r\n        panelDisplayedResults.setLayout(displayedResultsLayout);\r\n        panelSpoiler.add(panelDisplayedResults);\r\n\r\n        JLabel displayedResults= new JLabel(\"Amount of displayed results\");\r\n        displayedResults.setMaximumSize(new Dimension(300,30));\r\n\r\n        JSlider slider = new JSlider(JSlider.HORIZONTAL,\r\n                1, 50, numberOfDisplayedResults);\r\n        slider.setMaximumSize(new Dimension(300,100));\r\n        slider.setMajorTickSpacing(10);\r\n        slider.setMinorTickSpacing(1);\r\n        slider.setPaintTicks(true);\r\n        slider.setPaintLabels(true);\r\n        slider.addChangeListener(new sliderListener());\r\n\r\n        panelDisplayedResults.add(displayedResults);\r\n        panelDisplayedResults.add(slider);\r\n        displayedResults.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        slider.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n\r\n        JPanel panel3=new JPanel();\r\n        BoxLayout cBoxLayout = new BoxLayout(panel3,BoxLayout.X_AXIS);\r\n        panel3.setLayout(cBoxLayout);\r\n\r\n        panel3.add(Box.createRigidArea(new Dimension(0,5)));\r\n\r\n\r\n        frame.getContentPane().setLayout(new BoxLayout(frame.getContentPane(),BoxLayout.Y_AXIS));\r\n        frame.getContentPane().add(panel1);\r\n        frame.getContentPane().add(panel2);\r\n        frame.getContentPane().add(panel3);\r\n        //This is the common size of the buttons\r\n\r\n        frame.addWindowListener(new MyWindowListener());\r\n        frame.setVisible(true);\r\n\r\n\r\n        // Create the JTextArea for displaying the output\r\n        outputArea = new JTextArea();\r\n        outputArea.setEditable(false); // Make it read-only\r\n        frame.add(outputArea);\r\n\r\n    }\r\n    public class SpoilerButtonHandler implements ActionListener {\r\n        public void actionPerformed(ActionEvent e) {\r\n            if (panelSpoiler.isVisible()){\r\n                panelSpoiler.setVisible(false);\r\n\r\n            } else {\r\n\r\n                panelSpoiler.setVisible(true);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public class LoadButtonHandler implements ActionListener {\r\n        public void actionPerformed(ActionEvent e) {\r\n            JFileChooser fileChooser = new JFileChooser();\r\n            fileChooser.setCurrentDirectory(new File(System.getProperty(\"user.home\")));\r\n            int result = fileChooser.showOpenDialog(frame);\r\n            if (result == JFileChooser.APPROVE_OPTION) {\r\n                File selectedFile = fileChooser.getSelectedFile();\r\n\r\n            String text=\"\";\r\n            Scanner inputStream;\r\n            try{\r\n                inputStream=new Scanner(selectedFile);\r\n\r\n            } catch (FileNotFoundException ex) {\r\n                JOptionPane.showMessageDialog(frame,\"File can not be found\");\r\n                throw new RuntimeException(ex);\r\n            }\r\n            while (inputStream.hasNextLine()){\r\n                text=text+inputStream.nextLine();\r\n            }\r\n\r\n            CorpusBuilder corp= new CorpusBuilder(text);\r\n            corp.getSentences();\r\n            corp.getTokens();\r\n            corp.getPosTags();\r\n            corp.getLemmas();\r\n\r\n            src = corp.getWordPosLemma();\r\n\r\n            inputStream.close();\r\n            }\r\n        }\r\n    }\r\n\r\n    private class spinnerListener implements ChangeListener {\r\n        public void stateChanged(ChangeEvent e) {\r\n            JSpinner spinner= (JSpinner) e.getSource();\r\n            SpinnerModel spinnerModel = (SpinnerModel) spinner.getModel();\r\n            if (spinnerModel instanceof SpinnerDateModel) {\r\n                numberOfNeighbours=(int)spinnerModel.getValue();\r\n            }\r\n        }\r\n    }\r\n    private class sliderListener implements ChangeListener {\r\n        public void stateChanged(ChangeEvent e) {\r\n\r\n        JSlider source = (JSlider) e.getSource();\r\n        if(!source.getValueIsAdjusting())\r\n\r\n        {\r\n             numberOfDisplayedResults= source.getValue();\r\n\r\n        }\r\n    }\r\n    }\r\n    private class QuitButtonHandler implements ActionListener {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            System.exit(0);\r\n        }\r\n    }\r\n    private class MyWindowListener extends WindowAdapter {\r\n\r\n        public void windowClosing(WindowEvent e) {\r\n            System.exit(0);\r\n        }\r\n    }\r\n\r\n    private class WordPosLemmaButtonHandler implements ActionListener {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            JRadioButton button = (JRadioButton) e.getSource();\r\n            searchBy = button.getText();\r\n        }\r\n    }\r\n\r\n\r\n    private class SearchButtonHandler implements ActionListener {\r\n        String s = firstTextField.getText();\r\n        public void actionPerformed(ActionEvent e) {\r\n            if (searchBy.equals(\"Word\")){\r\n                for (int i=0;i<src.size();i++){   //iteration by sentences\r\n                    for (int k=0;k<src.get(i).size();k++){   //iteration by words\r\n                        if (src.get(i).get(k).get(2).equals(s)){\r\n                            System.out.println(src.get(i)); //this should be fixed in the future\r\n                        }\r\n                    }\r\n                }\r\n                //**public static ArrayList<String> getContextWords(ArrayList<String> sentence, int index) {\r\n                //        ArrayList<String> contextWords = new ArrayList<>();\r\n                //\r\n                //        if (index >= 2) {\r\n                //            contextWords.addAll(sentence.subList(index - 2, index));\r\n                //        } else {\r\n                //            contextWords.addAll(sentence.subList(0, index));\r\n                //        }\r\n                //\r\n                //        if (index < sentence.size() - 3) {\r\n                //            contextWords.addAll(sentence.subList(index + 1, index + 4));\r\n                //        } else {\r\n                //            contextWords.addAll(sentence.subList(index + 1, sentence.size()));\r\n                //        }\r\n                //\r\n                //        return contextWords;\r\n                //    }*/\r\n            } else if (searchBy.equals(\"Lemma\")) {\r\n\r\n\r\n            } else if (searchBy.equals(\"POS\")) {\r\n\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public static void main ( String[] args )\r\n    {\r\n        new Frame();\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/src/main/java/Frame.java b/src/main/java/Frame.java
---- a/src/main/java/Frame.java	(revision 89fece41338a635b83ee0219705d255b1d144fd9)
-+++ b/src/main/java/Frame.java	(date 1688288616574)
-@@ -99,6 +99,7 @@
-         panel2.add(panelSpoiler);
- 
- 
-+
-         panelNeighbours=new JPanel();
-         BoxLayout neigboursBoxLayout = new BoxLayout(panelNeighbours,BoxLayout.Y_AXIS);
-         panelNeighbours.setLayout(neigboursBoxLayout);
Index: .idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_03__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_03__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_03__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_03__Changes_.xml	(revision 8516ea608a7e74fae166f37c49de725b402a5430)
+++ /dev/null	(revision 8516ea608a7e74fae166f37c49de725b402a5430)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_02_07_2023_11_03_[Changes]" date="1688288616681" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_03_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 02.07.2023 11:03 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_04__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_04__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_04__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_04__Changes_.xml	(revision 8516ea608a7e74fae166f37c49de725b402a5430)
+++ /dev/null	(revision 8516ea608a7e74fae166f37c49de725b402a5430)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_02_07_2023_11_04_[Changes]" date="1688288677092" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_04_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 02/07/2023 11:04 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_10_37_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_10_37_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_10_37_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_10_37_[Changes]/shelved.patch	(revision 8516ea608a7e74fae166f37c49de725b402a5430)
+++ /dev/null	(revision 8516ea608a7e74fae166f37c49de725b402a5430)
@@ -1,19 +0,0 @@
-Index: src/main/java/Frame.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>import javax.swing.*;\r\nimport javax.swing.event.ChangeEvent;\r\nimport javax.swing.event.ChangeListener;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.event.WindowAdapter;\r\nimport java.awt.event.WindowEvent;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\npublic class Frame{\r\n    private JFrame frame;\r\n    private JTextField firstTextField;\r\n    private JPanel panelSpoiler;\r\n    private JPanel panelNeighbours;\r\n    private  JPanel panelDisplayedResults;\r\n\r\n    private String searchBy;\r\n\r\n\r\n    private List<List<List<String>>> src;\r\n    private int numberOfNeighbours=2;\r\n    private int numberOfDisplayedResults = 10;\r\n\r\n\r\n    Frame(){\r\n        frame=new JFrame(\"Test\");\r\n        frame.setSize(1000,600);\r\n        firstTextField=new JTextField(60);\r\n\r\n        firstTextField.setMaximumSize(new Dimension(200,50));\r\n\r\n        Dimension size = new Dimension(95, 30);\r\n\r\n        JButton loadButton = new JButton(\"load\");\r\n        loadButton.setMaximumSize(size);\r\n        loadButton.addActionListener(new LoadButtonHandler());\r\n\r\n        JRadioButton lemma = new JRadioButton(\"Lemma\");\r\n        JRadioButton pos = new JRadioButton(\"POS\");\r\n        JRadioButton word = new JRadioButton(\"Word\");\r\n\r\n        ButtonGroup buttonGroup = new ButtonGroup();\r\n        buttonGroup.add(lemma);\r\n        buttonGroup.add(pos);\r\n        buttonGroup.add(word);\r\n\r\n        lemma.addActionListener(new WordPosLemmaButtonHandler());\r\n        pos.addActionListener(new WordPosLemmaButtonHandler());\r\n        word.addActionListener(new WordPosLemmaButtonHandler());\r\n\r\n        Box box1 = Box.createVerticalBox();\r\n        box1.add(lemma);\r\n        box1.add(pos);\r\n        box1.add(word);\r\n\r\n        JPanel panel1=new JPanel();\r\n        BoxLayout aBoxLayout = new BoxLayout(panel1,BoxLayout.X_AXIS);\r\n        panel1.setLayout(aBoxLayout);\r\n\r\n        panel1.add(Box.createRigidArea(new Dimension(0,5)));\r\n        panel1.add(loadButton);\r\n        panel1.add(firstTextField);\r\n        panel1.add(box1);\r\n        //panel with spoiler panel\r\n        JPanel panel2=new JPanel();\r\n        BoxLayout bBoxLayout = new BoxLayout(panel2,BoxLayout.Y_AXIS);\r\n        panel2.setLayout(bBoxLayout);\r\n\r\n        panel2.add(Box.createRigidArea(new Dimension(0,5)));\r\n\r\n        JButton spoilerButton = new JButton(\"Additional filters\");\r\n        spoilerButton.setMaximumSize(new Dimension(frame.getWidth(),30));\r\n        spoilerButton.addActionListener(new SpoilerButtonHandler());\r\n        spoilerButton.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n        panel2.add(spoilerButton);\r\n\r\n        panel2.add(Box.createRigidArea(new Dimension(0,5)));\r\n        //spoiler panel\r\n        panelSpoiler=new JPanel();\r\n        BoxLayout spoilerBoxLayout = new BoxLayout(panelSpoiler,BoxLayout.X_AXIS);\r\n        panelSpoiler.setLayout(spoilerBoxLayout);\r\n\r\n        panel2.add(panelSpoiler);\r\n\r\n\r\n        panelNeighbours=new JPanel();\r\n        BoxLayout neigboursBoxLayout = new BoxLayout(panelNeighbours,BoxLayout.Y_AXIS);\r\n        panelNeighbours.setLayout(neigboursBoxLayout);\r\n        panelSpoiler.add(panelNeighbours);\r\n\r\n        JLabel neighbours= new JLabel(\"Neighbours\");\r\n        neighbours.setMaximumSize(size);\r\n\r\n        Integer[] neighboursStrings = {0, 1,2,3,4,5,6,7,8,9,10};\r\n        SpinnerListModel neighboursModel = new SpinnerListModel(neighboursStrings);\r\n        JSpinner spinner = new JSpinner(neighboursModel);\r\n        spinner.setMaximumSize(size);\r\n        spinner.setValue(numberOfNeighbours);\r\n        spinner.addChangeListener(new spinnerListener());\r\n\r\n        panelNeighbours.add(neighbours);\r\n        panelNeighbours.add(spinner);\r\n        neighbours.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        spinner.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n        panelSpoiler.add(Box.createRigidArea(new Dimension(5,0)));\r\n\r\n        panelDisplayedResults=new JPanel();\r\n        BoxLayout displayedResultsLayout = new BoxLayout(panelDisplayedResults,BoxLayout.Y_AXIS);\r\n        panelDisplayedResults.setLayout(displayedResultsLayout);\r\n        panelSpoiler.add(panelDisplayedResults);\r\n\r\n        JLabel displayedResults= new JLabel(\"Amount of displayed results\");\r\n        displayedResults.setMaximumSize(new Dimension(300,30));\r\n\r\n        JSlider slider = new JSlider(JSlider.HORIZONTAL,\r\n                1, 50, numberOfDisplayedResults);\r\n        slider.setMaximumSize(new Dimension(300,100));\r\n        slider.setMajorTickSpacing(10);\r\n        slider.setMinorTickSpacing(1);\r\n        slider.setPaintTicks(true);\r\n        slider.setPaintLabels(true);\r\n        slider.addChangeListener(new sliderListener());\r\n\r\n        panelDisplayedResults.add(displayedResults);\r\n        panelDisplayedResults.add(slider);\r\n        displayedResults.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        slider.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n\r\n        JPanel panel3=new JPanel();\r\n        BoxLayout cBoxLayout = new BoxLayout(panel3,BoxLayout.X_AXIS);\r\n        panel3.setLayout(cBoxLayout);\r\n\r\n        panel3.add(Box.createRigidArea(new Dimension(0,5)));\r\n\r\n        frame.getContentPane().setLayout(new BoxLayout(frame.getContentPane(),BoxLayout.Y_AXIS));\r\n        frame.getContentPane().add(panel1);\r\n        frame.getContentPane().add(panel2);\r\n        frame.getContentPane().add(panel3);\r\n        //This is the common size of the buttons\r\n\r\n        frame.addWindowListener(new MyWindowListener());\r\n        frame.setVisible(true);\r\n\r\n    }\r\n    public class SpoilerButtonHandler implements ActionListener {\r\n        public void actionPerformed(ActionEvent e) {\r\n            if (panelSpoiler.isVisible()){\r\n                panelSpoiler.setVisible(false);\r\n                panelNeighbours.setVisible(false);\r\n\r\n            } else {\r\n\r\n                panelSpoiler.setVisible(true);\r\n                panelNeighbours.setVisible(true);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public class LoadButtonHandler implements ActionListener {\r\n        public void actionPerformed(ActionEvent e) {\r\n            JFileChooser fileChooser = new JFileChooser();\r\n            fileChooser.setCurrentDirectory(new File(System.getProperty(\"user.home\")));\r\n            int result = fileChooser.showOpenDialog(frame);\r\n            if (result == JFileChooser.APPROVE_OPTION) {\r\n                File selectedFile = fileChooser.getSelectedFile();\r\n\r\n            String text=\"\";\r\n            Scanner inputStream;\r\n            try{\r\n                inputStream=new Scanner(selectedFile);\r\n\r\n            } catch (FileNotFoundException ex) {\r\n                JOptionPane.showMessageDialog(frame,\"File can not be found\");\r\n                throw new RuntimeException(ex);\r\n            }\r\n            while (inputStream.hasNextLine()){\r\n                text=text+inputStream.nextLine();\r\n            }\r\n\r\n            CorpusBuilder corp= new CorpusBuilder(text);\r\n            corp.getSentences();\r\n            corp.getTokens();\r\n            corp.getPosTags();\r\n            corp.getLemmas();\r\n\r\n            src = corp.getWordPosLemma();\r\n\r\n            inputStream.close();\r\n            }\r\n        }\r\n    }\r\n\r\n    private class spinnerListener implements ChangeListener {\r\n        public void stateChanged(ChangeEvent e) {\r\n            JSpinner spinner= (JSpinner) e.getSource();\r\n            SpinnerModel spinnerModel = (SpinnerModel) spinner.getModel();\r\n            if (spinnerModel instanceof SpinnerDateModel) {\r\n                numberOfNeighbours=(int)spinnerModel.getValue();\r\n            }\r\n        }\r\n    }\r\n    private class sliderListener implements ChangeListener {\r\n        public void stateChanged(ChangeEvent e) {\r\n\r\n        JSlider source = (JSlider) e.getSource();\r\n        if(!source.getValueIsAdjusting())\r\n\r\n        {\r\n             numberOfDisplayedResults= source.getValue();\r\n\r\n        }\r\n    }\r\n    }\r\n    private class QuitButtonHandler implements ActionListener {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            System.exit(0);\r\n        }\r\n    }\r\n    private class MyWindowListener extends WindowAdapter {\r\n\r\n        public void windowClosing(WindowEvent e) {\r\n            System.exit(0);\r\n        }\r\n    }\r\n\r\n    private class WordPosLemmaButtonHandler implements ActionListener {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            JRadioButton button = (JRadioButton) e.getSource();\r\n            searchBy = button.getText();\r\n        }\r\n    }\r\n\r\n\r\n    private class SearchButtonHandler implements ActionListener {\r\n        String s = firstTextField.getText();\r\n        public void actionPerformed(ActionEvent e) {\r\n            if (searchBy.equals(\"Word\")){\r\n                for (int i=0;i<src.size();i++){   //iteration by sentences\r\n                    for (int k=0;k<src.get(i).size();k++){   //iteration by words\r\n                        if (src.get(i).get(k).get(2).equals(s)){\r\n                            System.out.println(src.get(i)); //this should be fixed in the future\r\n                        }\r\n                    }\r\n                }\r\n            } else if (searchBy.equals(\"Lemma\")) {\r\n\r\n\r\n            } else if (searchBy.equals(\"POS\")) {\r\n\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    public static void main ( String[] args )\r\n    {\r\n        new Frame();\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/src/main/java/Frame.java b/src/main/java/Frame.java
---- a/src/main/java/Frame.java	(revision 14dc4ef66caf8d0262819e4f460e8271adf1594d)
-+++ b/src/main/java/Frame.java	(date 1688287050739)
-@@ -264,6 +264,8 @@
-         }
-     }
- 
-+    private static String wordInContext (ArrayList<>)
-+
-     public static void main ( String[] args )
-     {
-         new Frame();
Index: .idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_03_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_03_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_03_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_03_[Changes]/shelved.patch	(revision 8516ea608a7e74fae166f37c49de725b402a5430)
+++ /dev/null	(revision 8516ea608a7e74fae166f37c49de725b402a5430)
@@ -1,38 +0,0 @@
-Index: src/main/java/Frame.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>import javax.swing.*;\r\nimport javax.swing.event.ChangeEvent;\r\nimport javax.swing.event.ChangeListener;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.event.WindowAdapter;\r\nimport java.awt.event.WindowEvent;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\npublic class Frame{\r\n    private JFrame frame;\r\n    private JTextField firstTextField;\r\n    private JPanel panelSpoiler;\r\n    private JPanel panelNeighbours;\r\n    private  JPanel panelDisplayedResults;\r\n\r\n    private String searchBy;\r\n\r\n\r\n    private List<List<List<String>>> src;\r\n    private int numberOfNeighbours=2;\r\n    private int numberOfDisplayedResults = 10;\r\n\r\n\r\n    Frame(){\r\n        frame=new JFrame(\"Test\");\r\n        frame.setSize(1000,600);\r\n        firstTextField=new JTextField(60);\r\n\r\n        firstTextField.setMaximumSize(new Dimension(200,50));\r\n\r\n        Dimension size = new Dimension(95, 30);\r\n\r\n        JButton loadButton = new JButton(\"load\");\r\n        loadButton.setMaximumSize(size);\r\n        loadButton.addActionListener(new LoadButtonHandler());\r\n\r\n        JRadioButton lemma = new JRadioButton(\"Lemma\");\r\n        JRadioButton pos = new JRadioButton(\"POS\");\r\n        JRadioButton word = new JRadioButton(\"Word\");\r\n\r\n        ButtonGroup buttonGroup = new ButtonGroup();\r\n        buttonGroup.add(lemma);\r\n        buttonGroup.add(pos);\r\n        buttonGroup.add(word);\r\n\r\n        lemma.addActionListener(new WordPosLemmaButtonHandler());\r\n        pos.addActionListener(new WordPosLemmaButtonHandler());\r\n        word.addActionListener(new WordPosLemmaButtonHandler());\r\n\r\n        Box box1 = Box.createVerticalBox();\r\n        box1.add(lemma);\r\n        box1.add(pos);\r\n        box1.add(word);\r\n\r\n        JPanel panel1=new JPanel();\r\n        BoxLayout aBoxLayout = new BoxLayout(panel1,BoxLayout.X_AXIS);\r\n        panel1.setLayout(aBoxLayout);\r\n\r\n        panel1.add(Box.createRigidArea(new Dimension(0,5)));\r\n        panel1.add(loadButton);\r\n        panel1.add(firstTextField);\r\n        panel1.add(box1);\r\n        //panel with spoiler panel\r\n        JPanel panel2=new JPanel();\r\n        BoxLayout bBoxLayout = new BoxLayout(panel2,BoxLayout.Y_AXIS);\r\n        panel2.setLayout(bBoxLayout);\r\n\r\n        panel2.add(Box.createRigidArea(new Dimension(0,5)));\r\n\r\n        JButton spoilerButton = new JButton(\"Additional filters\");\r\n        spoilerButton.setMaximumSize(new Dimension(frame.getWidth(),30));\r\n        spoilerButton.addActionListener(new SpoilerButtonHandler());\r\n        spoilerButton.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n        panel2.add(spoilerButton);\r\n\r\n        panel2.add(Box.createRigidArea(new Dimension(0,5)));\r\n        //spoiler panel\r\n        panelSpoiler=new JPanel();\r\n        BoxLayout spoilerBoxLayout = new BoxLayout(panelSpoiler,BoxLayout.X_AXIS);\r\n        panelSpoiler.setLayout(spoilerBoxLayout);\r\n\r\n        panel2.add(panelSpoiler);\r\n\r\n\r\n        panelNeighbours=new JPanel();\r\n        BoxLayout neigboursBoxLayout = new BoxLayout(panelNeighbours,BoxLayout.Y_AXIS);\r\n        panelNeighbours.setLayout(neigboursBoxLayout);\r\n        panelSpoiler.add(panelNeighbours);\r\n\r\n        JLabel neighbours= new JLabel(\"Neighbours\");\r\n        neighbours.setMaximumSize(size);\r\n\r\n        Integer[] neighboursStrings = {0, 1,2,3,4,5,6,7,8,9,10};\r\n        SpinnerListModel neighboursModel = new SpinnerListModel(neighboursStrings);\r\n        JSpinner spinner = new JSpinner(neighboursModel);\r\n        spinner.setMaximumSize(size);\r\n        spinner.setValue(numberOfNeighbours);\r\n        spinner.addChangeListener(new spinnerListener());\r\n\r\n        panelNeighbours.add(neighbours);\r\n        panelNeighbours.add(spinner);\r\n        neighbours.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        spinner.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n        panelSpoiler.add(Box.createRigidArea(new Dimension(5,0)));\r\n\r\n        panelDisplayedResults=new JPanel();\r\n        BoxLayout displayedResultsLayout = new BoxLayout(panelDisplayedResults,BoxLayout.Y_AXIS);\r\n        panelDisplayedResults.setLayout(displayedResultsLayout);\r\n        panelSpoiler.add(panelDisplayedResults);\r\n\r\n        JLabel displayedResults= new JLabel(\"Amount of displayed results\");\r\n        displayedResults.setMaximumSize(new Dimension(300,30));\r\n\r\n        JSlider slider = new JSlider(JSlider.HORIZONTAL,\r\n                1, 50, numberOfDisplayedResults);\r\n        slider.setMaximumSize(new Dimension(300,100));\r\n        slider.setMajorTickSpacing(10);\r\n        slider.setMinorTickSpacing(1);\r\n        slider.setPaintTicks(true);\r\n        slider.setPaintLabels(true);\r\n        slider.addChangeListener(new sliderListener());\r\n\r\n        panelDisplayedResults.add(displayedResults);\r\n        panelDisplayedResults.add(slider);\r\n        displayedResults.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        slider.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n\r\n        JPanel panel3=new JPanel();\r\n        BoxLayout cBoxLayout = new BoxLayout(panel3,BoxLayout.X_AXIS);\r\n        panel3.setLayout(cBoxLayout);\r\n\r\n        panel3.add(Box.createRigidArea(new Dimension(0,5)));\r\n\r\n        frame.getContentPane().setLayout(new BoxLayout(frame.getContentPane(),BoxLayout.Y_AXIS));\r\n        frame.getContentPane().add(panel1);\r\n        frame.getContentPane().add(panel2);\r\n        frame.getContentPane().add(panel3);\r\n        //This is the common size of the buttons\r\n\r\n        frame.addWindowListener(new MyWindowListener());\r\n        frame.setVisible(true);\r\n\r\n    }\r\n    public class SpoilerButtonHandler implements ActionListener {\r\n        public void actionPerformed(ActionEvent e) {\r\n            if (panelSpoiler.isVisible()){\r\n                panelSpoiler.setVisible(false);\r\n\r\n            } else {\r\n\r\n                panelSpoiler.setVisible(true);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public class LoadButtonHandler implements ActionListener {\r\n        public void actionPerformed(ActionEvent e) {\r\n            JFileChooser fileChooser = new JFileChooser();\r\n            fileChooser.setCurrentDirectory(new File(System.getProperty(\"user.home\")));\r\n            int result = fileChooser.showOpenDialog(frame);\r\n            if (result == JFileChooser.APPROVE_OPTION) {\r\n                File selectedFile = fileChooser.getSelectedFile();\r\n\r\n            String text=\"\";\r\n            Scanner inputStream;\r\n            try{\r\n                inputStream=new Scanner(selectedFile);\r\n\r\n            } catch (FileNotFoundException ex) {\r\n                JOptionPane.showMessageDialog(frame,\"File can not be found\");\r\n                throw new RuntimeException(ex);\r\n            }\r\n            while (inputStream.hasNextLine()){\r\n                text=text+inputStream.nextLine();\r\n            }\r\n\r\n            CorpusBuilder corp= new CorpusBuilder(text);\r\n            corp.getSentences();\r\n            corp.getTokens();\r\n            corp.getPosTags();\r\n            corp.getLemmas();\r\n\r\n            src = corp.getWordPosLemma();\r\n\r\n            inputStream.close();\r\n            }\r\n        }\r\n    }\r\n\r\n    private class spinnerListener implements ChangeListener {\r\n        public void stateChanged(ChangeEvent e) {\r\n            JSpinner spinner= (JSpinner) e.getSource();\r\n            SpinnerModel spinnerModel = (SpinnerModel) spinner.getModel();\r\n            if (spinnerModel instanceof SpinnerDateModel) {\r\n                numberOfNeighbours=(int)spinnerModel.getValue();\r\n            }\r\n        }\r\n    }\r\n    private class sliderListener implements ChangeListener {\r\n        public void stateChanged(ChangeEvent e) {\r\n\r\n        JSlider source = (JSlider) e.getSource();\r\n        if(!source.getValueIsAdjusting())\r\n\r\n        {\r\n             numberOfDisplayedResults= source.getValue();\r\n\r\n        }\r\n    }\r\n    }\r\n    private class QuitButtonHandler implements ActionListener {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            System.exit(0);\r\n        }\r\n    }\r\n    private class MyWindowListener extends WindowAdapter {\r\n\r\n        public void windowClosing(WindowEvent e) {\r\n            System.exit(0);\r\n        }\r\n    }\r\n\r\n    private class WordPosLemmaButtonHandler implements ActionListener {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            JRadioButton button = (JRadioButton) e.getSource();\r\n            searchBy = button.getText();\r\n        }\r\n    }\r\n\r\n\r\n    private class SearchButtonHandler implements ActionListener {\r\n        String s = firstTextField.getText();\r\n        public void actionPerformed(ActionEvent e) {\r\n            if (searchBy.equals(\"Word\")){\r\n                for (int i=0;i<src.size();i++){   //iteration by sentences\r\n                    for (int k=0;k<src.get(i).size();k++){   //iteration by words\r\n                        if (src.get(i).get(k).get(2).equals(s)){\r\n                            System.out.println(src.get(i)); //this should be fixed in the future\r\n                        }\r\n                    }\r\n                }\r\n                //**public static ArrayList<String> getContextWords(ArrayList<String> sentence, int index) {\r\n                //        ArrayList<String> contextWords = new ArrayList<>();\r\n                //\r\n                //        if (index >= 2) {\r\n                //            contextWords.addAll(sentence.subList(index - 2, index));\r\n                //        } else {\r\n                //            contextWords.addAll(sentence.subList(0, index));\r\n                //        }\r\n                //\r\n                //        if (index < sentence.size() - 3) {\r\n                //            contextWords.addAll(sentence.subList(index + 1, index + 4));\r\n                //        } else {\r\n                //            contextWords.addAll(sentence.subList(index + 1, sentence.size()));\r\n                //        }\r\n                //\r\n                //        return contextWords;\r\n                //    }*/\r\n            } else if (searchBy.equals(\"Lemma\")) {\r\n\r\n\r\n            } else if (searchBy.equals(\"POS\")) {\r\n\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    public static void main ( String[] args )\r\n    {\r\n        new Frame();\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/src/main/java/Frame.java b/src/main/java/Frame.java
---- a/src/main/java/Frame.java	(revision 58d3ccc04d01b3aa660362e1e1adc7bc6c0a2fc3)
-+++ b/src/main/java/Frame.java	(date 1688288405943)
-@@ -90,6 +90,7 @@
-         panel2.add(panelSpoiler);
- 
- 
-+
-         panelNeighbours=new JPanel();
-         BoxLayout neigboursBoxLayout = new BoxLayout(panelNeighbours,BoxLayout.Y_AXIS);
-         panelNeighbours.setLayout(neigboursBoxLayout);
-Index: .idea/misc.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"MavenProjectsManager\">\r\n    <option name=\"originalFiles\">\r\n      <list>\r\n        <option value=\"$PROJECT_DIR$/pom.xml\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_19\" default=\"true\" project-jdk-name=\"11\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/misc.xml b/.idea/misc.xml
---- a/.idea/misc.xml	(revision 58d3ccc04d01b3aa660362e1e1adc7bc6c0a2fc3)
-+++ b/.idea/misc.xml	(date 1688288120015)
-@@ -8,7 +8,7 @@
-       </list>
-     </option>
-   </component>
--  <component name="ProjectRootManager" version="2" languageLevel="JDK_19" default="true" project-jdk-name="11" project-jdk-type="JavaSDK">
-+  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="11" project-jdk-type="JavaSDK">
-     <output url="file://$PROJECT_DIR$/out" />
-   </component>
- </project>
-\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_7_2_2023_11_01_AM_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_7_2_2023_11_01_AM_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_7_2_2023_11_01_AM_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_7_2_2023_11_01_AM_[Changes]/shelved.patch	(revision 8516ea608a7e74fae166f37c49de725b402a5430)
+++ /dev/null	(revision 8516ea608a7e74fae166f37c49de725b402a5430)
@@ -1,65 +0,0 @@
-Index: .idea/misc.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"MavenProjectsManager\">\r\n    <option name=\"originalFiles\">\r\n      <list>\r\n        <option value=\"$PROJECT_DIR$/pom.xml\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_19\" default=\"true\" project-jdk-name=\"11\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/misc.xml b/.idea/misc.xml
---- a/.idea/misc.xml	(revision 58d3ccc04d01b3aa660362e1e1adc7bc6c0a2fc3)
-+++ b/.idea/misc.xml	(date 1688287174114)
-@@ -8,7 +8,7 @@
-       </list>
-     </option>
-   </component>
--  <component name="ProjectRootManager" version="2" languageLevel="JDK_19" default="true" project-jdk-name="11" project-jdk-type="JavaSDK">
-+  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="11" project-jdk-type="JavaSDK">
-     <output url="file://$PROJECT_DIR$/out" />
-   </component>
- </project>
-\ No newline at end of file
-Index: src/main/java/Frame.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>import javax.swing.*;\r\nimport javax.swing.event.ChangeEvent;\r\nimport javax.swing.event.ChangeListener;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.event.WindowAdapter;\r\nimport java.awt.event.WindowEvent;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\npublic class Frame{\r\n    private JFrame frame;\r\n    private JTextField firstTextField;\r\n    private JPanel panelSpoiler;\r\n    private JPanel panelNeighbours;\r\n    private  JPanel panelDisplayedResults;\r\n\r\n    private String searchBy;\r\n\r\n\r\n    private List<List<List<String>>> src;\r\n    private int numberOfNeighbours=2;\r\n    private int numberOfDisplayedResults = 10;\r\n\r\n\r\n    Frame(){\r\n        frame=new JFrame(\"Test\");\r\n        frame.setSize(1000,600);\r\n        firstTextField=new JTextField(60);\r\n\r\n        firstTextField.setMaximumSize(new Dimension(200,50));\r\n\r\n        Dimension size = new Dimension(95, 30);\r\n\r\n        JButton loadButton = new JButton(\"load\");\r\n        loadButton.setMaximumSize(size);\r\n        loadButton.addActionListener(new LoadButtonHandler());\r\n\r\n        JRadioButton lemma = new JRadioButton(\"Lemma\");\r\n        JRadioButton pos = new JRadioButton(\"POS\");\r\n        JRadioButton word = new JRadioButton(\"Word\");\r\n\r\n        ButtonGroup buttonGroup = new ButtonGroup();\r\n        buttonGroup.add(lemma);\r\n        buttonGroup.add(pos);\r\n        buttonGroup.add(word);\r\n\r\n        lemma.addActionListener(new WordPosLemmaButtonHandler());\r\n        pos.addActionListener(new WordPosLemmaButtonHandler());\r\n        word.addActionListener(new WordPosLemmaButtonHandler());\r\n\r\n        Box box1 = Box.createVerticalBox();\r\n        box1.add(lemma);\r\n        box1.add(pos);\r\n        box1.add(word);\r\n\r\n        JPanel panel1=new JPanel();\r\n        BoxLayout aBoxLayout = new BoxLayout(panel1,BoxLayout.X_AXIS);\r\n        panel1.setLayout(aBoxLayout);\r\n\r\n        panel1.add(Box.createRigidArea(new Dimension(0,5)));\r\n        panel1.add(loadButton);\r\n        panel1.add(firstTextField);\r\n        panel1.add(box1);\r\n        //panel with spoiler panel\r\n        JPanel panel2=new JPanel();\r\n        BoxLayout bBoxLayout = new BoxLayout(panel2,BoxLayout.Y_AXIS);\r\n        panel2.setLayout(bBoxLayout);\r\n\r\n        panel2.add(Box.createRigidArea(new Dimension(0,5)));\r\n\r\n        JButton spoilerButton = new JButton(\"Additional filters\");\r\n        spoilerButton.setMaximumSize(new Dimension(frame.getWidth(),30));\r\n        spoilerButton.addActionListener(new SpoilerButtonHandler());\r\n        spoilerButton.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n        panel2.add(spoilerButton);\r\n\r\n        panel2.add(Box.createRigidArea(new Dimension(0,5)));\r\n        //spoiler panel\r\n        panelSpoiler=new JPanel();\r\n        BoxLayout spoilerBoxLayout = new BoxLayout(panelSpoiler,BoxLayout.X_AXIS);\r\n        panelSpoiler.setLayout(spoilerBoxLayout);\r\n\r\n        panel2.add(panelSpoiler);\r\n\r\n\r\n        panelNeighbours=new JPanel();\r\n        BoxLayout neigboursBoxLayout = new BoxLayout(panelNeighbours,BoxLayout.Y_AXIS);\r\n        panelNeighbours.setLayout(neigboursBoxLayout);\r\n        panelSpoiler.add(panelNeighbours);\r\n\r\n        JLabel neighbours= new JLabel(\"Neighbours\");\r\n        neighbours.setMaximumSize(size);\r\n\r\n        Integer[] neighboursStrings = {0, 1,2,3,4,5,6,7,8,9,10};\r\n        SpinnerListModel neighboursModel = new SpinnerListModel(neighboursStrings);\r\n        JSpinner spinner = new JSpinner(neighboursModel);\r\n        spinner.setMaximumSize(size);\r\n        spinner.setValue(numberOfNeighbours);\r\n        spinner.addChangeListener(new spinnerListener());\r\n\r\n        panelNeighbours.add(neighbours);\r\n        panelNeighbours.add(spinner);\r\n        neighbours.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        spinner.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n        panelSpoiler.add(Box.createRigidArea(new Dimension(5,0)));\r\n\r\n        panelDisplayedResults=new JPanel();\r\n        BoxLayout displayedResultsLayout = new BoxLayout(panelDisplayedResults,BoxLayout.Y_AXIS);\r\n        panelDisplayedResults.setLayout(displayedResultsLayout);\r\n        panelSpoiler.add(panelDisplayedResults);\r\n\r\n        JLabel displayedResults= new JLabel(\"Amount of displayed results\");\r\n        displayedResults.setMaximumSize(new Dimension(300,30));\r\n\r\n        JSlider slider = new JSlider(JSlider.HORIZONTAL,\r\n                1, 50, numberOfDisplayedResults);\r\n        slider.setMaximumSize(new Dimension(300,100));\r\n        slider.setMajorTickSpacing(10);\r\n        slider.setMinorTickSpacing(1);\r\n        slider.setPaintTicks(true);\r\n        slider.setPaintLabels(true);\r\n        slider.addChangeListener(new sliderListener());\r\n\r\n        panelDisplayedResults.add(displayedResults);\r\n        panelDisplayedResults.add(slider);\r\n        displayedResults.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        slider.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n\r\n        JPanel panel3=new JPanel();\r\n        BoxLayout cBoxLayout = new BoxLayout(panel3,BoxLayout.X_AXIS);\r\n        panel3.setLayout(cBoxLayout);\r\n\r\n        panel3.add(Box.createRigidArea(new Dimension(0,5)));\r\n\r\n        frame.getContentPane().setLayout(new BoxLayout(frame.getContentPane(),BoxLayout.Y_AXIS));\r\n        frame.getContentPane().add(panel1);\r\n        frame.getContentPane().add(panel2);\r\n        frame.getContentPane().add(panel3);\r\n        //This is the common size of the buttons\r\n\r\n        frame.addWindowListener(new MyWindowListener());\r\n        frame.setVisible(true);\r\n\r\n    }\r\n    public class SpoilerButtonHandler implements ActionListener {\r\n        public void actionPerformed(ActionEvent e) {\r\n            if (panelSpoiler.isVisible()){\r\n                panelSpoiler.setVisible(false);\r\n\r\n            } else {\r\n\r\n                panelSpoiler.setVisible(true);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public class LoadButtonHandler implements ActionListener {\r\n        public void actionPerformed(ActionEvent e) {\r\n            JFileChooser fileChooser = new JFileChooser();\r\n            fileChooser.setCurrentDirectory(new File(System.getProperty(\"user.home\")));\r\n            int result = fileChooser.showOpenDialog(frame);\r\n            if (result == JFileChooser.APPROVE_OPTION) {\r\n                File selectedFile = fileChooser.getSelectedFile();\r\n\r\n            String text=\"\";\r\n            Scanner inputStream;\r\n            try{\r\n                inputStream=new Scanner(selectedFile);\r\n\r\n            } catch (FileNotFoundException ex) {\r\n                JOptionPane.showMessageDialog(frame,\"File can not be found\");\r\n                throw new RuntimeException(ex);\r\n            }\r\n            while (inputStream.hasNextLine()){\r\n                text=text+inputStream.nextLine();\r\n            }\r\n\r\n            CorpusBuilder corp= new CorpusBuilder(text);\r\n            corp.getSentences();\r\n            corp.getTokens();\r\n            corp.getPosTags();\r\n            corp.getLemmas();\r\n\r\n            src = corp.getWordPosLemma();\r\n\r\n            inputStream.close();\r\n            }\r\n        }\r\n    }\r\n\r\n    private class spinnerListener implements ChangeListener {\r\n        public void stateChanged(ChangeEvent e) {\r\n            JSpinner spinner= (JSpinner) e.getSource();\r\n            SpinnerModel spinnerModel = (SpinnerModel) spinner.getModel();\r\n            if (spinnerModel instanceof SpinnerDateModel) {\r\n                numberOfNeighbours=(int)spinnerModel.getValue();\r\n            }\r\n        }\r\n    }\r\n    private class sliderListener implements ChangeListener {\r\n        public void stateChanged(ChangeEvent e) {\r\n\r\n        JSlider source = (JSlider) e.getSource();\r\n        if(!source.getValueIsAdjusting())\r\n\r\n        {\r\n             numberOfDisplayedResults= source.getValue();\r\n\r\n        }\r\n    }\r\n    }\r\n    private class QuitButtonHandler implements ActionListener {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            System.exit(0);\r\n        }\r\n    }\r\n    private class MyWindowListener extends WindowAdapter {\r\n\r\n        public void windowClosing(WindowEvent e) {\r\n            System.exit(0);\r\n        }\r\n    }\r\n\r\n    private class WordPosLemmaButtonHandler implements ActionListener {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            JRadioButton button = (JRadioButton) e.getSource();\r\n            searchBy = button.getText();\r\n        }\r\n    }\r\n\r\n\r\n    private class SearchButtonHandler implements ActionListener {\r\n        String s = firstTextField.getText();\r\n        public void actionPerformed(ActionEvent e) {\r\n            if (searchBy.equals(\"Word\")){\r\n                for (int i=0;i<src.size();i++){   //iteration by sentences\r\n                    for (int k=0;k<src.get(i).size();k++){   //iteration by words\r\n                        if (src.get(i).get(k).get(2).equals(s)){\r\n                            System.out.println(src.get(i)); //this should be fixed in the future\r\n                        }\r\n                    }\r\n                }\r\n                //**public static ArrayList<String> getContextWords(ArrayList<String> sentence, int index) {\r\n                //        ArrayList<String> contextWords = new ArrayList<>();\r\n                //\r\n                //        if (index >= 2) {\r\n                //            contextWords.addAll(sentence.subList(index - 2, index));\r\n                //        } else {\r\n                //            contextWords.addAll(sentence.subList(0, index));\r\n                //        }\r\n                //\r\n                //        if (index < sentence.size() - 3) {\r\n                //            contextWords.addAll(sentence.subList(index + 1, index + 4));\r\n                //        } else {\r\n                //            contextWords.addAll(sentence.subList(index + 1, sentence.size()));\r\n                //        }\r\n                //\r\n                //        return contextWords;\r\n                //    }*/\r\n            } else if (searchBy.equals(\"Lemma\")) {\r\n\r\n\r\n            } else if (searchBy.equals(\"POS\")) {\r\n\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    public static void main ( String[] args )\r\n    {\r\n        new Frame();\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/src/main/java/Frame.java b/src/main/java/Frame.java
---- a/src/main/java/Frame.java	(revision 58d3ccc04d01b3aa660362e1e1adc7bc6c0a2fc3)
-+++ b/src/main/java/Frame.java	(date 1688288423352)
-@@ -35,12 +35,17 @@
- 
-         firstTextField.setMaximumSize(new Dimension(200,50));
- 
-+
-         Dimension size = new Dimension(95, 30);
- 
-         JButton loadButton = new JButton("load");
-         loadButton.setMaximumSize(size);
-         loadButton.addActionListener(new LoadButtonHandler());
- 
-+        JButton searchButton = new JButton("search");
-+        searchButton.setMaximumSize(size);
-+        searchButton.addActionListener(new SearchButtonHandler());
-+
-         JRadioButton lemma = new JRadioButton("Lemma");
-         JRadioButton pos = new JRadioButton("POS");
-         JRadioButton word = new JRadioButton("Word");
-@@ -67,6 +72,8 @@
-         panel1.add(loadButton);
-         panel1.add(firstTextField);
-         panel1.add(box1);
-+        panel1.add(Box.createHorizontalGlue());
-+        panel1.add(searchButton);
-         //panel with spoiler panel
-         JPanel panel2=new JPanel();
-         BoxLayout bBoxLayout = new BoxLayout(panel2,BoxLayout.Y_AXIS);
-@@ -141,6 +148,7 @@
- 
-         panel3.add(Box.createRigidArea(new Dimension(0,5)));
- 
-+
-         frame.getContentPane().setLayout(new BoxLayout(frame.getContentPane(),BoxLayout.Y_AXIS));
-         frame.getContentPane().add(panel1);
-         frame.getContentPane().add(panel2);
Index: .idea/shelf/Uncommitted_changes_before_Update_at_7_2_2023_12_33_PM_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_7_2_2023_12_33_PM_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_7_2_2023_12_33_PM_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_7_2_2023_12_33_PM_[Changes]/shelved.patch	(revision 8516ea608a7e74fae166f37c49de725b402a5430)
+++ /dev/null	(revision 8516ea608a7e74fae166f37c49de725b402a5430)
@@ -1,821 +0,0 @@
-Index: src/main/java/Frame.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>import javax.swing.*;\r\nimport javax.swing.event.ChangeEvent;\r\nimport javax.swing.event.ChangeListener;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.event.WindowAdapter;\r\nimport java.awt.event.WindowEvent;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\npublic class Frame{\r\n    private JFrame frame;\r\n    private JTextField firstTextField;\r\n    private JPanel panelSpoiler;\r\n    private JPanel panelNeighbours;\r\n    private  JPanel panelDisplayedResults;\r\n\r\n    private JTextArea outputArea;\r\n\r\n    private String searchBy;\r\n\r\n\r\n    private List<List<List<String>>> src;\r\n    private int numberOfNeighbours=2;\r\n    private int numberOfDisplayedResults = 10;\r\n\r\n\r\n    Frame(){\r\n        frame=new JFrame(\"Test\");\r\n        frame.setSize(1000,600);\r\n        firstTextField=new JTextField(60);\r\n\r\n        firstTextField.setMaximumSize(new Dimension(200,50));\r\n\r\n\r\n        Dimension size = new Dimension(95, 30);\r\n\r\n        JButton loadButton = new JButton(\"load\");\r\n        loadButton.setMaximumSize(size);\r\n        loadButton.addActionListener(new LoadButtonHandler());\r\n\r\n        JButton searchButton = new JButton(\"search\");\r\n        searchButton.setMaximumSize(size);\r\n        searchButton.addActionListener(new SearchButtonHandler());\r\n\r\n        JRadioButton lemma = new JRadioButton(\"Lemma\");\r\n        JRadioButton pos = new JRadioButton(\"POS\");\r\n        JRadioButton word = new JRadioButton(\"Word\");\r\n\r\n        ButtonGroup buttonGroup = new ButtonGroup();\r\n        buttonGroup.add(lemma);\r\n        buttonGroup.add(pos);\r\n        buttonGroup.add(word);\r\n\r\n        lemma.addActionListener(new WordPosLemmaButtonHandler());\r\n        pos.addActionListener(new WordPosLemmaButtonHandler());\r\n        word.addActionListener(new WordPosLemmaButtonHandler());\r\n\r\n        Box box1 = Box.createVerticalBox();\r\n        box1.add(lemma);\r\n        box1.add(pos);\r\n        box1.add(word);\r\n\r\n        JPanel panel1=new JPanel();\r\n        BoxLayout aBoxLayout = new BoxLayout(panel1,BoxLayout.X_AXIS);\r\n        panel1.setLayout(aBoxLayout);\r\n\r\n        panel1.add(Box.createRigidArea(new Dimension(0,5)));\r\n        panel1.add(loadButton);\r\n        panel1.add(firstTextField);\r\n        panel1.add(box1);\r\n        panel1.add(Box.createHorizontalGlue());\r\n        panel1.add(searchButton);\r\n        //panel with spoiler panel\r\n        JPanel panel2=new JPanel();\r\n        BoxLayout bBoxLayout = new BoxLayout(panel2,BoxLayout.Y_AXIS);\r\n        panel2.setLayout(bBoxLayout);\r\n\r\n        panel2.add(Box.createRigidArea(new Dimension(0,5)));\r\n\r\n        JButton spoilerButton = new JButton(\"Additional filters\");\r\n        spoilerButton.setMaximumSize(new Dimension(frame.getWidth(),30));\r\n        spoilerButton.addActionListener(new SpoilerButtonHandler());\r\n        spoilerButton.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n        panel2.add(spoilerButton);\r\n\r\n        panel2.add(Box.createRigidArea(new Dimension(0,5)));\r\n        //spoiler panel\r\n        panelSpoiler=new JPanel();\r\n        BoxLayout spoilerBoxLayout = new BoxLayout(panelSpoiler,BoxLayout.X_AXIS);\r\n        panelSpoiler.setLayout(spoilerBoxLayout);\r\n\r\n        panel2.add(panelSpoiler);\r\n\r\n        JList<CheckboxListItem> list = new JList<CheckboxListItem>(\r\n                new CheckboxListItem[] { new CheckboxListItem(\"apple\"),\r\n                        new CheckboxListItem(\"orange\"),\r\n                        new CheckboxListItem(\"mango\"),\r\n                        new CheckboxListItem(\"paw paw\"),\r\n                        new CheckboxListItem(\"banana\") });\r\n\r\n        list.setCellRenderer(new CheckboxListRenderer());\r\n        list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\r\n\r\n        panelSpoiler.add(new JScrollPane(list));\r\n\r\n        panelNeighbours=new JPanel();\r\n        BoxLayout neigboursBoxLayout = new BoxLayout(panelNeighbours,BoxLayout.Y_AXIS);\r\n        panelNeighbours.setLayout(neigboursBoxLayout);\r\n        panelSpoiler.add(panelNeighbours);\r\n\r\n        JLabel neighbours= new JLabel(\"Neighbours\");\r\n        neighbours.setMaximumSize(size);\r\n\r\n        Integer[] neighboursStrings = {0, 1,2,3,4,5,6,7,8,9,10};\r\n        SpinnerListModel neighboursModel = new SpinnerListModel(neighboursStrings);\r\n        JSpinner spinner = new JSpinner(neighboursModel);\r\n        spinner.setMaximumSize(size);\r\n        spinner.setValue(numberOfNeighbours);\r\n        spinner.addChangeListener(new spinnerListener());\r\n\r\n        panelNeighbours.add(neighbours);\r\n        panelNeighbours.add(spinner);\r\n        neighbours.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        spinner.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n        panelSpoiler.add(Box.createRigidArea(new Dimension(5,0)));\r\n\r\n        panelDisplayedResults=new JPanel();\r\n        BoxLayout displayedResultsLayout = new BoxLayout(panelDisplayedResults,BoxLayout.Y_AXIS);\r\n        panelDisplayedResults.setLayout(displayedResultsLayout);\r\n        panelSpoiler.add(panelDisplayedResults);\r\n\r\n        JLabel displayedResults= new JLabel(\"Amount of displayed results\");\r\n        displayedResults.setMaximumSize(new Dimension(300,30));\r\n\r\n        JSlider slider = new JSlider(JSlider.HORIZONTAL,\r\n                1, 50, numberOfDisplayedResults);\r\n        slider.setMaximumSize(new Dimension(300,100));\r\n        slider.setMajorTickSpacing(10);\r\n        slider.setMinorTickSpacing(1);\r\n        slider.setPaintTicks(true);\r\n        slider.setPaintLabels(true);\r\n        slider.addChangeListener(new sliderListener());\r\n\r\n        panelDisplayedResults.add(displayedResults);\r\n        panelDisplayedResults.add(slider);\r\n        displayedResults.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        slider.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n\r\n        JPanel panel3=new JPanel();\r\n        BoxLayout cBoxLayout = new BoxLayout(panel3,BoxLayout.X_AXIS);\r\n        panel3.setLayout(cBoxLayout);\r\n\r\n        panel3.add(Box.createRigidArea(new Dimension(0,5)));\r\n\r\n\r\n        frame.getContentPane().setLayout(new BoxLayout(frame.getContentPane(),BoxLayout.Y_AXIS));\r\n        frame.getContentPane().add(panel1);\r\n        frame.getContentPane().add(panel2);\r\n        frame.getContentPane().add(panel3);\r\n        //This is the common size of the buttons\r\n\r\n        frame.addWindowListener(new MyWindowListener());\r\n        frame.setVisible(true);\r\n\r\n\r\n        // Create the JTextArea for displaying the output\r\n        outputArea = new JTextArea();\r\n        outputArea.setEditable(false); // Make it read-only\r\n        frame.add(outputArea);\r\n\r\n    }\r\n    public class SpoilerButtonHandler implements ActionListener {\r\n        public void actionPerformed(ActionEvent e) {\r\n            if (panelSpoiler.isVisible()){\r\n                panelSpoiler.setVisible(false);\r\n\r\n            } else {\r\n\r\n                panelSpoiler.setVisible(true);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public class LoadButtonHandler implements ActionListener {\r\n        public void actionPerformed(ActionEvent e) {\r\n            JFileChooser fileChooser = new JFileChooser();\r\n            fileChooser.setCurrentDirectory(new File(System.getProperty(\"user.home\")));\r\n            int result = fileChooser.showOpenDialog(frame);\r\n            if (result == JFileChooser.APPROVE_OPTION) {\r\n                File selectedFile = fileChooser.getSelectedFile();\r\n\r\n            String text=\"\";\r\n            Scanner inputStream;\r\n            try{\r\n                inputStream=new Scanner(selectedFile);\r\n\r\n            } catch (FileNotFoundException ex) {\r\n                JOptionPane.showMessageDialog(frame,\"File can not be found\");\r\n                throw new RuntimeException(ex);\r\n            }\r\n            while (inputStream.hasNextLine()){\r\n                text=text+inputStream.nextLine();\r\n            }\r\n\r\n            CorpusBuilder corp= new CorpusBuilder(text);\r\n            corp.getSentences();\r\n            corp.getTokens();\r\n            corp.getPosTags();\r\n            corp.getLemmas();\r\n\r\n            src = corp.getWordPosLemma();\r\n\r\n            inputStream.close();\r\n            }\r\n        }\r\n    }\r\n\r\n    private class spinnerListener implements ChangeListener {\r\n        public void stateChanged(ChangeEvent e) {\r\n            JSpinner spinner= (JSpinner) e.getSource();\r\n            SpinnerModel spinnerModel = (SpinnerModel) spinner.getModel();\r\n            if (spinnerModel instanceof SpinnerDateModel) {\r\n                numberOfNeighbours=(int)spinnerModel.getValue();\r\n            }\r\n        }\r\n    }\r\n    private class sliderListener implements ChangeListener {\r\n        public void stateChanged(ChangeEvent e) {\r\n\r\n        JSlider source = (JSlider) e.getSource();\r\n        if(!source.getValueIsAdjusting())\r\n\r\n        {\r\n             numberOfDisplayedResults= source.getValue();\r\n\r\n        }\r\n    }\r\n    }\r\n    private class QuitButtonHandler implements ActionListener {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            System.exit(0);\r\n        }\r\n    }\r\n    private class MyWindowListener extends WindowAdapter {\r\n\r\n        public void windowClosing(WindowEvent e) {\r\n            System.exit(0);\r\n        }\r\n    }\r\n\r\n    private class WordPosLemmaButtonHandler implements ActionListener {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            JRadioButton button = (JRadioButton) e.getSource();\r\n            searchBy = button.getText();\r\n        }\r\n    }\r\n\r\n\r\n    private class SearchButtonHandler implements ActionListener {\r\n        String s = firstTextField.getText();\r\n        public void actionPerformed(ActionEvent e) {\r\n            if (searchBy.equals(\"Word\")){\r\n                for (int i=0;i<src.size();i++){   //iteration by sentences\r\n                    for (int k=0;k<src.get(i).size();k++){   //iteration by words\r\n                        if (src.get(i).get(k).get(0).equals(s)){\r\n                            System.out.println(src.get(i)); //prints a list of tokens, lemmas and pos tags\r\n                            //src.get(i).get(k).get(1) -- POS tag of the word\r\n                            System.out.println(getContextWords(src.get(i), k, numberOfNeighbours)); //prints final sentences with neighbours\r\n                        }\r\n                    }\r\n                }\r\n            } else if (searchBy.equals(\"Lemma\")) {\r\n\r\n\r\n            } else if (searchBy.equals(\"POS\")) {\r\n\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Helper method that gets a list from CorpusBuilder, index of the word and the number of neighbours\r\n     * @param sentenceList\r\n     * @param index\r\n     * @param numNeighbours\r\n     * @return a string with word and his neighbours\r\n     */\r\n    private static String getContextWords (List<List<String>> sentenceList, int index, int numNeighbours){\r\n        ArrayList<String> contextWords = new ArrayList<>();\r\n        ArrayList<String> sentenceArrayList = new ArrayList<>();\r\n\r\n        for (List<String> list : sentenceList) {\r\n            if (!list.isEmpty()) {\r\n                sentenceArrayList.add(list.get(0));\r\n            }\r\n        }\r\n\r\n        if (index >= numNeighbours) {\r\n            contextWords.addAll(sentenceArrayList.subList((index - numNeighbours), index));\r\n        } else {\r\n            contextWords.addAll(sentenceArrayList.subList(0, index));\r\n        }\r\n\r\n        if (index < sentenceList.size() - numNeighbours - 1) {\r\n            contextWords.addAll(sentenceArrayList.subList(index + 1, index + numNeighbours + 1));\r\n        } else {\r\n            contextWords.addAll(sentenceArrayList.subList(index + 1, sentenceList.size()));\r\n        }\r\n\r\n        return String.join(\", \", contextWords);\r\n    }\r\n\r\n    class CheckboxListRenderer extends JCheckBox implements\r\n            ListCellRenderer<CheckboxListItem> {\r\n\r\n        @Override\r\n        public Component getListCellRendererComponent(\r\n                JList<? extends CheckboxListItem> list, CheckboxListItem value,\r\n                int index, boolean isSelected, boolean cellHasFocus) {\r\n            setEnabled(list.isEnabled());\r\n            setSelected(value.isSelected());\r\n            setFont(list.getFont());\r\n            setBackground(list.getBackground());\r\n            setForeground(list.getForeground());\r\n            setText(value.toString());\r\n            return this;\r\n        }\r\n    }\r\n    public class CheckboxListItem {\r\n\r\n        private String label;\r\n        private boolean isSelected = false;\r\n\r\n        public CheckboxListItem(String label) {\r\n            this.label = label;\r\n        }\r\n\r\n        public boolean isSelected() {\r\n            return isSelected;\r\n        }\r\n\r\n        public void setSelected(boolean isSelected) {\r\n            this.isSelected = isSelected;\r\n        }\r\n\r\n        public String toString() {\r\n            return label;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public static void main ( String[] args )\r\n    {\r\n        new Frame();\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/src/main/java/Frame.java b/src/main/java/Frame.java
---- a/src/main/java/Frame.java	(revision 4ebf17b2cd6636b3fe5d06f558c44edd39272bec)
-+++ b/src/main/java/Frame.java	(date 1688293687421)
-@@ -2,10 +2,7 @@
- import javax.swing.event.ChangeEvent;
- import javax.swing.event.ChangeListener;
- import java.awt.*;
--import java.awt.event.ActionEvent;
--import java.awt.event.ActionListener;
--import java.awt.event.WindowAdapter;
--import java.awt.event.WindowEvent;
-+import java.awt.event.*;
- import java.io.File;
- import java.io.FileNotFoundException;
- import java.util.ArrayList;
-@@ -24,7 +21,44 @@
- 
-     private String searchBy;
- 
--
-+    private JList<CheckboxListItem> posList = new JList<CheckboxListItem>(
-+            new CheckboxListItem[] { new CheckboxListItem("CC Coordinating conjunction"),
-+                    new CheckboxListItem("CD Cardinal number"),
-+                    new CheckboxListItem("DT Determiner"),
-+                    new CheckboxListItem("EX Existential there"),
-+                    new CheckboxListItem("FW Foreign word"),
-+                    new CheckboxListItem("IN Preposition or subordinating conjunction"),
-+                    new CheckboxListItem("JJ Adjective"),
-+                    new CheckboxListItem("JJR Adjective, comparative"),
-+                    new CheckboxListItem("JJS Adjective, superlative"),
-+                    new CheckboxListItem("LS List item marker"),
-+                    new CheckboxListItem("MD Modal"),
-+                    new CheckboxListItem("NN Noun, singular or mass"),
-+                    new CheckboxListItem("NNS Noun, plural"),
-+                    new CheckboxListItem("NNP Proper noun, singular"),
-+                    new CheckboxListItem("NNPS Proper noun, plural"),
-+                    new CheckboxListItem("PDT Predeterminer"),
-+                    new CheckboxListItem("POS Possessive ending"),
-+                    new CheckboxListItem("PRP Personal pronoun"),
-+                    new CheckboxListItem("PRP$ Possessive pronoun"),
-+                    new CheckboxListItem("RB Adverb"),
-+                    new CheckboxListItem("RBR Adverb, comparative"),
-+                    new CheckboxListItem("RBS Adverb, superlative"),
-+                    new CheckboxListItem("RP Particle"),
-+                    new CheckboxListItem("SYM Symbol"),
-+                    new CheckboxListItem("TO to"),
-+                    new CheckboxListItem("UH Interjection"),
-+                    new CheckboxListItem("VB Verb, base form"),
-+                    new CheckboxListItem("VBD Verb, past tense"),
-+                    new CheckboxListItem("VBG Verb, gerund or present participle"),
-+                    new CheckboxListItem("VBN Verb, past participle"),
-+                    new CheckboxListItem("VBP Verb, non3rd person singular present"),
-+                    new CheckboxListItem("VBZ Verb, 3rd person singular present"),
-+                    new CheckboxListItem("WDT Whdeterminer"),
-+                    new CheckboxListItem("WP Whpronoun"),
-+                    new CheckboxListItem("WP$ Possessive whpronoun"),
-+                    new CheckboxListItem("WRB Whadverb"),
-+            });
-     private List<List<List<String>>> src;
-     private int numberOfNeighbours=2;
-     private int numberOfDisplayedResults = 10;
-@@ -98,17 +132,13 @@
- 
-         panel2.add(panelSpoiler);
- 
--        JList<CheckboxListItem> list = new JList<CheckboxListItem>(
--                new CheckboxListItem[] { new CheckboxListItem("apple"),
--                        new CheckboxListItem("orange"),
--                        new CheckboxListItem("mango"),
--                        new CheckboxListItem("paw paw"),
--                        new CheckboxListItem("banana") });
- 
--        list.setCellRenderer(new CheckboxListRenderer());
--        list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
- 
--        panelSpoiler.add(new JScrollPane(list));
-+        posList.setCellRenderer(new CheckboxListRenderer());
-+        posList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
-+        posList.addMouseListener(new PosListListener());
-+
-+        panelSpoiler.add(new JScrollPane(posList));
- 
-         panelNeighbours=new JPanel();
-         BoxLayout neigboursBoxLayout = new BoxLayout(panelNeighbours,BoxLayout.Y_AXIS);
-@@ -174,8 +204,22 @@
- 
-         // Create the JTextArea for displaying the output
-         outputArea = new JTextArea();
--        outputArea.setEditable(false); // Make it read-only
-+        outputArea.setEditable(false);
-+
-         frame.add(outputArea);
-+        outputArea.setVisible(true);
-+
-+
-+        Design.applyDesign(frame);
-+
-+
-+        Design.applyTextFieldStyle(firstTextField);
-+        Design.applyButtonStyle(loadButton);
-+        Design.applyButtonStyle(searchButton);
-+        Design.applyRadioButtonStyle(lemma);
-+        Design.applyRadioButtonStyle(pos);
-+        Design.applyRadioButtonStyle(word);
-+
- 
-     }
-     public class SpoilerButtonHandler implements ActionListener {
-@@ -229,9 +273,7 @@
-         public void stateChanged(ChangeEvent e) {
-             JSpinner spinner= (JSpinner) e.getSource();
-             SpinnerModel spinnerModel = (SpinnerModel) spinner.getModel();
--            if (spinnerModel instanceof SpinnerDateModel) {
-                 numberOfNeighbours=(int)spinnerModel.getValue();
--            }
-         }
-     }
-     private class sliderListener implements ChangeListener {
-@@ -259,6 +301,28 @@
-         }
-     }
- 
-+    private class PosListListener extends MouseAdapter {
-+
-+        public void mouseClicked(MouseEvent e) {
-+            JList<CheckboxListItem> list =
-+                    (JList<CheckboxListItem>) e.getSource();
-+
-+            // Get index of item clicked
-+
-+            int index = list.locationToIndex(e.getPoint());
-+            CheckboxListItem item = (CheckboxListItem) list.getModel()
-+                    .getElementAt(index);
-+
-+            // Toggle selected state
-+
-+            item.setSelected(!item.isSelected());
-+
-+            // Repaint cell
-+
-+            list.repaint(list.getCellBounds(index, index));
-+        }
-+    }
-+
-     private class WordPosLemmaButtonHandler implements ActionListener {
- 
-         public void actionPerformed(ActionEvent e) {
-@@ -267,27 +331,43 @@
-         }
-     }
- 
--
-     private class SearchButtonHandler implements ActionListener {
--        String s = firstTextField.getText();
-         public void actionPerformed(ActionEvent e) {
-+            ListModel<CheckboxListItem> recreatedPosList = posList.getModel();
-+            String s = firstTextField.getText();
-             if (searchBy.equals("Word")){
-                 for (int i=0;i<src.size();i++){   //iteration by sentences
-                     for (int k=0;k<src.get(i).size();k++){   //iteration by words
-                         if (src.get(i).get(k).get(0).equals(s)){
--                            System.out.println(src.get(i)); //prints a list of tokens, lemmas and pos tags
--                            //src.get(i).get(k).get(1) -- POS tag of the word
--                            System.out.println(getContextWords(src.get(i), k, numberOfNeighbours)); //prints final sentences with neighbours
-+                            //System.out.println(src.get(i)); //prints a list of tokens, lemmas and pos tags
-+                            src.get(i).get(k).get(1);
-+
-+                            //System.out.println(getContextWords(src.get(i), k, numberOfNeighbours)); //prints final sentences with neighbours
-+                            outputArea.append(getContextWords(src.get(i), k, numberOfNeighbours));
-+                            outputArea.append("\n");
-                         }
-                     }
-                 }
-             } else if (searchBy.equals("Lemma")) {
--
--
-+                for (int i=0;i<src.size();i++){   //iteration by sentences
-+                    for (int k=0;k<src.get(i).size();k++){   //iteration by words
-+                        if (src.get(i).get(k).get(2).equals(s)){
-+                            outputArea.append(getContextWords(src.get(i), k, numberOfNeighbours));
-+                            outputArea.append("\n");
-+                        }
-+                    }
-+                }
-             } else if (searchBy.equals("POS")) {
--
--
-+                for (int i=0;i<src.size();i++){   //iteration by sentences
-+                    for (int k=0;k<src.get(i).size();k++){   //iteration by words
-+                        if (src.get(i).get(k).get(1).equals(s)){
-+                            outputArea.append(getContextWords(src.get(i), k, numberOfNeighbours));
-+                            outputArea.append("\n");
-+                        }
-+                    }
-+                }
-             }
-+            outputArea.setText("");
-         }
-     }
- 
-@@ -316,12 +396,12 @@
-         }
- 
-         if (index < sentenceList.size() - numNeighbours - 1) {
--            contextWords.addAll(sentenceArrayList.subList(index + 1, index + numNeighbours + 1));
-+            contextWords.addAll(sentenceArrayList.subList(index, index + numNeighbours + 1));
-         } else {
--            contextWords.addAll(sentenceArrayList.subList(index + 1, sentenceList.size()));
-+            contextWords.addAll(sentenceArrayList.subList(index, sentenceList.size()));
-         }
- 
--        return String.join(", ", contextWords);
-+        return String.join(" ", contextWords);
-     }
- 
-     class CheckboxListRenderer extends JCheckBox implements
-@@ -364,6 +444,8 @@
-     }
- 
- 
-+
-+
-     public static void main ( String[] args )
-     {
-         new Frame();
-Index: src/main/java/Design.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/src/main/java/Design.java b/src/main/java/Design.java
-new file mode 100644
---- /dev/null	(date 1688293687416)
-+++ b/src/main/java/Design.java	(date 1688293687416)
-@@ -0,0 +1,30 @@
-+import javax.swing.*;
-+import java.awt.*;
-+
-+public class Design {
-+    public static void applyDesign(JFrame frame) {
-+        frame.setSize(1000, 600);
-+    }
-+
-+    public static void applyTextFieldStyle(JTextField textField) {
-+        textField.setPreferredSize(new Dimension(200, 50));
-+    }
-+
-+    public static void applyButtonStyle(JButton button) {
-+        Dimension size = new Dimension(95, 30);
-+        button.setMaximumSize(size);
-+        button.setBackground(Color.PINK);
-+    }
-+
-+    public static void applyRadioButtonStyle(JRadioButton radioButton) {
-+        // Apply styling to the radio button
-+    }
-+
-+
-+
-+    public static void applyPanelStyle(JPanel panel) {
-+
-+
-+    }
-+
-+}
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_04__Changes_.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_04__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_04__Changes_.xml
-new file mode 100644
---- /dev/null	(date 1688293791231)
-+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_04__Changes_.xml	(date 1688293791231)
-@@ -0,0 +1,4 @@
-+<changelist name="Uncommitted_changes_before_Update_at_02_07_2023_11_04_[Changes]" date="1688288677092" recycled="true" deleted="true">
-+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_04_[Changes]/shelved.patch" />
-+  <option name="DESCRIPTION" value="Uncommitted changes before Update at 02/07/2023 11:04 [Changes]" />
-+</changelist>
-\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_03__Changes_.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_03__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_03__Changes_.xml
-new file mode 100644
---- /dev/null	(date 1688293791242)
-+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_03__Changes_.xml	(date 1688293791242)
-@@ -0,0 +1,4 @@
-+<changelist name="Uncommitted_changes_before_Update_at_02_07_2023_11_03_[Changes]" date="1688288616681" recycled="true" deleted="true">
-+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_03_[Changes]/shelved.patch" />
-+  <option name="DESCRIPTION" value="Uncommitted changes before Update at 02.07.2023 11:03 [Changes]" />
-+</changelist>
-\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_36__Changes_.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_36__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_36__Changes_.xml
-new file mode 100644
---- /dev/null	(date 1688293791252)
-+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_36__Changes_.xml	(date 1688293791252)
-@@ -0,0 +1,4 @@
-+<changelist name="Uncommitted_changes_before_Update_at_02_07_2023_11_36_[Changes]" date="1688290615687" recycled="true" deleted="true">
-+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_36_[Changes]/shelved.patch" />
-+  <option name="DESCRIPTION" value="Uncommitted changes before Update at 02/07/2023 11:36 [Changes]" />
-+</changelist>
-\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_12_14__Changes_.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_12_14__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_12_14__Changes_.xml
-new file mode 100644
---- /dev/null	(date 1688293791261)
-+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_12_14__Changes_.xml	(date 1688293791261)
-@@ -0,0 +1,4 @@
-+<changelist name="Uncommitted_changes_before_Update_at_02_07_2023_12_14_[Changes]" date="1688292897690" recycled="false" toDelete="true">
-+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_12_14_[Changes]/shelved.patch" />
-+  <option name="DESCRIPTION" value="Uncommitted changes before Update at 02/07/2023 12:14 [Changes]" />
-+</changelist>
-\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_33__Changes_.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_33__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_33__Changes_.xml
-new file mode 100644
---- /dev/null	(date 1688293791273)
-+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_33__Changes_.xml	(date 1688293791273)
-@@ -0,0 +1,4 @@
-+<changelist name="Uncommitted_changes_before_Update_at_02_07_2023_11_33_[Changes]" date="1688290440349" recycled="true" deleted="true">
-+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_33_[Changes]/shelved.patch" />
-+  <option name="DESCRIPTION" value="Uncommitted changes before Update at 02.07.2023 11:33 [Changes]" />
-+</changelist>
-\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_07__Changes_.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_07__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_07__Changes_.xml
-new file mode 100644
---- /dev/null	(date 1688293791282)
-+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_07__Changes_.xml	(date 1688293791282)
-@@ -0,0 +1,4 @@
-+<changelist name="Uncommitted_changes_before_Update_at_02_07_2023_11_07_[Changes]" date="1688288838997" recycled="true" deleted="true">
-+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_07_[Changes]/shelved.patch" />
-+  <option name="DESCRIPTION" value="Uncommitted changes before Update at 02.07.2023 11:07 [Changes]" />
-+</changelist>
-\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_10_37__Changes_.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_10_37__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_10_37__Changes_.xml
-new file mode 100644
---- /dev/null	(date 1688293791294)
-+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_10_37__Changes_.xml	(date 1688293791294)
-@@ -0,0 +1,4 @@
-+<changelist name="Uncommitted_changes_before_Update_at_02_07_2023_10_37_[Changes]" date="1688287057861" recycled="true" deleted="true">
-+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_10_37_[Changes]/shelved.patch" />
-+  <option name="DESCRIPTION" value="Uncommitted changes before Update at 02/07/2023 10:37 [Changes]" />
-+</changelist>
-\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_03_[Changes]/shelved.patch
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_03_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_03_[Changes]/shelved.patch
-new file mode 100644
---- /dev/null	(date 1688293687377)
-+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_03_[Changes]/shelved.patch	(date 1688293687377)
-@@ -0,0 +1,38 @@
-+Index: src/main/java/Frame.java
-+IDEA additional info:
-+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-+<+>import javax.swing.*;\r\nimport javax.swing.event.ChangeEvent;\r\nimport javax.swing.event.ChangeListener;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.event.WindowAdapter;\r\nimport java.awt.event.WindowEvent;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\npublic class Frame{\r\n    private JFrame frame;\r\n    private JTextField firstTextField;\r\n    private JPanel panelSpoiler;\r\n    private JPanel panelNeighbours;\r\n    private  JPanel panelDisplayedResults;\r\n\r\n    private String searchBy;\r\n\r\n\r\n    private List<List<List<String>>> src;\r\n    private int numberOfNeighbours=2;\r\n    private int numberOfDisplayedResults = 10;\r\n\r\n\r\n    Frame(){\r\n        frame=new JFrame(\"Test\");\r\n        frame.setSize(1000,600);\r\n        firstTextField=new JTextField(60);\r\n\r\n        firstTextField.setMaximumSize(new Dimension(200,50));\r\n\r\n        Dimension size = new Dimension(95, 30);\r\n\r\n        JButton loadButton = new JButton(\"load\");\r\n        loadButton.setMaximumSize(size);\r\n        loadButton.addActionListener(new LoadButtonHandler());\r\n\r\n        JRadioButton lemma = new JRadioButton(\"Lemma\");\r\n        JRadioButton pos = new JRadioButton(\"POS\");\r\n        JRadioButton word = new JRadioButton(\"Word\");\r\n\r\n        ButtonGroup buttonGroup = new ButtonGroup();\r\n        buttonGroup.add(lemma);\r\n        buttonGroup.add(pos);\r\n        buttonGroup.add(word);\r\n\r\n        lemma.addActionListener(new WordPosLemmaButtonHandler());\r\n        pos.addActionListener(new WordPosLemmaButtonHandler());\r\n        word.addActionListener(new WordPosLemmaButtonHandler());\r\n\r\n        Box box1 = Box.createVerticalBox();\r\n        box1.add(lemma);\r\n        box1.add(pos);\r\n        box1.add(word);\r\n\r\n        JPanel panel1=new JPanel();\r\n        BoxLayout aBoxLayout = new BoxLayout(panel1,BoxLayout.X_AXIS);\r\n        panel1.setLayout(aBoxLayout);\r\n\r\n        panel1.add(Box.createRigidArea(new Dimension(0,5)));\r\n        panel1.add(loadButton);\r\n        panel1.add(firstTextField);\r\n        panel1.add(box1);\r\n        //panel with spoiler panel\r\n        JPanel panel2=new JPanel();\r\n        BoxLayout bBoxLayout = new BoxLayout(panel2,BoxLayout.Y_AXIS);\r\n        panel2.setLayout(bBoxLayout);\r\n\r\n        panel2.add(Box.createRigidArea(new Dimension(0,5)));\r\n\r\n        JButton spoilerButton = new JButton(\"Additional filters\");\r\n        spoilerButton.setMaximumSize(new Dimension(frame.getWidth(),30));\r\n        spoilerButton.addActionListener(new SpoilerButtonHandler());\r\n        spoilerButton.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n        panel2.add(spoilerButton);\r\n\r\n        panel2.add(Box.createRigidArea(new Dimension(0,5)));\r\n        //spoiler panel\r\n        panelSpoiler=new JPanel();\r\n        BoxLayout spoilerBoxLayout = new BoxLayout(panelSpoiler,BoxLayout.X_AXIS);\r\n        panelSpoiler.setLayout(spoilerBoxLayout);\r\n\r\n        panel2.add(panelSpoiler);\r\n\r\n\r\n        panelNeighbours=new JPanel();\r\n        BoxLayout neigboursBoxLayout = new BoxLayout(panelNeighbours,BoxLayout.Y_AXIS);\r\n        panelNeighbours.setLayout(neigboursBoxLayout);\r\n        panelSpoiler.add(panelNeighbours);\r\n\r\n        JLabel neighbours= new JLabel(\"Neighbours\");\r\n        neighbours.setMaximumSize(size);\r\n\r\n        Integer[] neighboursStrings = {0, 1,2,3,4,5,6,7,8,9,10};\r\n        SpinnerListModel neighboursModel = new SpinnerListModel(neighboursStrings);\r\n        JSpinner spinner = new JSpinner(neighboursModel);\r\n        spinner.setMaximumSize(size);\r\n        spinner.setValue(numberOfNeighbours);\r\n        spinner.addChangeListener(new spinnerListener());\r\n\r\n        panelNeighbours.add(neighbours);\r\n        panelNeighbours.add(spinner);\r\n        neighbours.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        spinner.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n        panelSpoiler.add(Box.createRigidArea(new Dimension(5,0)));\r\n\r\n        panelDisplayedResults=new JPanel();\r\n        BoxLayout displayedResultsLayout = new BoxLayout(panelDisplayedResults,BoxLayout.Y_AXIS);\r\n        panelDisplayedResults.setLayout(displayedResultsLayout);\r\n        panelSpoiler.add(panelDisplayedResults);\r\n\r\n        JLabel displayedResults= new JLabel(\"Amount of displayed results\");\r\n        displayedResults.setMaximumSize(new Dimension(300,30));\r\n\r\n        JSlider slider = new JSlider(JSlider.HORIZONTAL,\r\n                1, 50, numberOfDisplayedResults);\r\n        slider.setMaximumSize(new Dimension(300,100));\r\n        slider.setMajorTickSpacing(10);\r\n        slider.setMinorTickSpacing(1);\r\n        slider.setPaintTicks(true);\r\n        slider.setPaintLabels(true);\r\n        slider.addChangeListener(new sliderListener());\r\n\r\n        panelDisplayedResults.add(displayedResults);\r\n        panelDisplayedResults.add(slider);\r\n        displayedResults.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        slider.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n\r\n        JPanel panel3=new JPanel();\r\n        BoxLayout cBoxLayout = new BoxLayout(panel3,BoxLayout.X_AXIS);\r\n        panel3.setLayout(cBoxLayout);\r\n\r\n        panel3.add(Box.createRigidArea(new Dimension(0,5)));\r\n\r\n        frame.getContentPane().setLayout(new BoxLayout(frame.getContentPane(),BoxLayout.Y_AXIS));\r\n        frame.getContentPane().add(panel1);\r\n        frame.getContentPane().add(panel2);\r\n        frame.getContentPane().add(panel3);\r\n        //This is the common size of the buttons\r\n\r\n        frame.addWindowListener(new MyWindowListener());\r\n        frame.setVisible(true);\r\n\r\n    }\r\n    public class SpoilerButtonHandler implements ActionListener {\r\n        public void actionPerformed(ActionEvent e) {\r\n            if (panelSpoiler.isVisible()){\r\n                panelSpoiler.setVisible(false);\r\n\r\n            } else {\r\n\r\n                panelSpoiler.setVisible(true);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public class LoadButtonHandler implements ActionListener {\r\n        public void actionPerformed(ActionEvent e) {\r\n            JFileChooser fileChooser = new JFileChooser();\r\n            fileChooser.setCurrentDirectory(new File(System.getProperty(\"user.home\")));\r\n            int result = fileChooser.showOpenDialog(frame);\r\n            if (result == JFileChooser.APPROVE_OPTION) {\r\n                File selectedFile = fileChooser.getSelectedFile();\r\n\r\n            String text=\"\";\r\n            Scanner inputStream;\r\n            try{\r\n                inputStream=new Scanner(selectedFile);\r\n\r\n            } catch (FileNotFoundException ex) {\r\n                JOptionPane.showMessageDialog(frame,\"File can not be found\");\r\n                throw new RuntimeException(ex);\r\n            }\r\n            while (inputStream.hasNextLine()){\r\n                text=text+inputStream.nextLine();\r\n            }\r\n\r\n            CorpusBuilder corp= new CorpusBuilder(text);\r\n            corp.getSentences();\r\n            corp.getTokens();\r\n            corp.getPosTags();\r\n            corp.getLemmas();\r\n\r\n            src = corp.getWordPosLemma();\r\n\r\n            inputStream.close();\r\n            }\r\n        }\r\n    }\r\n\r\n    private class spinnerListener implements ChangeListener {\r\n        public void stateChanged(ChangeEvent e) {\r\n            JSpinner spinner= (JSpinner) e.getSource();\r\n            SpinnerModel spinnerModel = (SpinnerModel) spinner.getModel();\r\n            if (spinnerModel instanceof SpinnerDateModel) {\r\n                numberOfNeighbours=(int)spinnerModel.getValue();\r\n            }\r\n        }\r\n    }\r\n    private class sliderListener implements ChangeListener {\r\n        public void stateChanged(ChangeEvent e) {\r\n\r\n        JSlider source = (JSlider) e.getSource();\r\n        if(!source.getValueIsAdjusting())\r\n\r\n        {\r\n             numberOfDisplayedResults= source.getValue();\r\n\r\n        }\r\n    }\r\n    }\r\n    private class QuitButtonHandler implements ActionListener {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            System.exit(0);\r\n        }\r\n    }\r\n    private class MyWindowListener extends WindowAdapter {\r\n\r\n        public void windowClosing(WindowEvent e) {\r\n            System.exit(0);\r\n        }\r\n    }\r\n\r\n    private class WordPosLemmaButtonHandler implements ActionListener {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            JRadioButton button = (JRadioButton) e.getSource();\r\n            searchBy = button.getText();\r\n        }\r\n    }\r\n\r\n\r\n    private class SearchButtonHandler implements ActionListener {\r\n        String s = firstTextField.getText();\r\n        public void actionPerformed(ActionEvent e) {\r\n            if (searchBy.equals(\"Word\")){\r\n                for (int i=0;i<src.size();i++){   //iteration by sentences\r\n                    for (int k=0;k<src.get(i).size();k++){   //iteration by words\r\n                        if (src.get(i).get(k).get(2).equals(s)){\r\n                            System.out.println(src.get(i)); //this should be fixed in the future\r\n                        }\r\n                    }\r\n                }\r\n                //**public static ArrayList<String> getContextWords(ArrayList<String> sentence, int index) {\r\n                //        ArrayList<String> contextWords = new ArrayList<>();\r\n                //\r\n                //        if (index >= 2) {\r\n                //            contextWords.addAll(sentence.subList(index - 2, index));\r\n                //        } else {\r\n                //            contextWords.addAll(sentence.subList(0, index));\r\n                //        }\r\n                //\r\n                //        if (index < sentence.size() - 3) {\r\n                //            contextWords.addAll(sentence.subList(index + 1, index + 4));\r\n                //        } else {\r\n                //            contextWords.addAll(sentence.subList(index + 1, sentence.size()));\r\n                //        }\r\n                //\r\n                //        return contextWords;\r\n                //    }*/\r\n            } else if (searchBy.equals(\"Lemma\")) {\r\n\r\n\r\n            } else if (searchBy.equals(\"POS\")) {\r\n\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    public static void main ( String[] args )\r\n    {\r\n        new Frame();\r\n    }\r\n}
-+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-+<+>UTF-8
-+===================================================================
-+diff --git a/src/main/java/Frame.java b/src/main/java/Frame.java
-+--- a/src/main/java/Frame.java	(revision 58d3ccc04d01b3aa660362e1e1adc7bc6c0a2fc3)
-++++ b/src/main/java/Frame.java	(date 1688288405943)
-+@@ -90,6 +90,7 @@
-+         panel2.add(panelSpoiler);
-+ 
-+ 
-++
-+         panelNeighbours=new JPanel();
-+         BoxLayout neigboursBoxLayout = new BoxLayout(panelNeighbours,BoxLayout.Y_AXIS);
-+         panelNeighbours.setLayout(neigboursBoxLayout);
-+Index: .idea/misc.xml
-+IDEA additional info:
-+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-+<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"MavenProjectsManager\">\r\n    <option name=\"originalFiles\">\r\n      <list>\r\n        <option value=\"$PROJECT_DIR$/pom.xml\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_19\" default=\"true\" project-jdk-name=\"11\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
-+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-+<+>UTF-8
-+===================================================================
-+diff --git a/.idea/misc.xml b/.idea/misc.xml
-+--- a/.idea/misc.xml	(revision 58d3ccc04d01b3aa660362e1e1adc7bc6c0a2fc3)
-++++ b/.idea/misc.xml	(date 1688288120015)
-+@@ -8,7 +8,7 @@
-+       </list>
-+     </option>
-+   </component>
-+-  <component name="ProjectRootManager" version="2" languageLevel="JDK_19" default="true" project-jdk-name="11" project-jdk-type="JavaSDK">
-++  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="11" project-jdk-type="JavaSDK">
-+     <output url="file://$PROJECT_DIR$/out" />
-+   </component>
-+ </project>
-+\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_33_[Changes]/shelved.patch
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_33_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_33_[Changes]/shelved.patch
-new file mode 100644
---- /dev/null	(date 1688293687395)
-+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_33_[Changes]/shelved.patch	(date 1688293687395)
-@@ -0,0 +1,39 @@
-+Index: src/main/java/Frame.java
-+IDEA additional info:
-+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-+<+>import javax.swing.*;\r\nimport javax.swing.event.ChangeEvent;\r\nimport javax.swing.event.ChangeListener;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.event.WindowAdapter;\r\nimport java.awt.event.WindowEvent;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\npublic class Frame{\r\n    private JFrame frame;\r\n    private JTextField firstTextField;\r\n    private JPanel panelSpoiler;\r\n    private JPanel panelNeighbours;\r\n    private  JPanel panelDisplayedResults;\r\n\r\n    private JTextArea outputArea;\r\n\r\n    private String searchBy;\r\n\r\n\r\n    private List<List<List<String>>> src;\r\n    private int numberOfNeighbours=2;\r\n    private int numberOfDisplayedResults = 10;\r\n\r\n\r\n    Frame(){\r\n        frame=new JFrame(\"Test\");\r\n        frame.setSize(1000,600);\r\n        firstTextField=new JTextField(60);\r\n\r\n        firstTextField.setMaximumSize(new Dimension(200,50));\r\n\r\n\r\n        Dimension size = new Dimension(95, 30);\r\n\r\n        JButton loadButton = new JButton(\"load\");\r\n        loadButton.setMaximumSize(size);\r\n        loadButton.addActionListener(new LoadButtonHandler());\r\n\r\n        JButton searchButton = new JButton(\"search\");\r\n        searchButton.setMaximumSize(size);\r\n        searchButton.addActionListener(new SearchButtonHandler());\r\n\r\n        JRadioButton lemma = new JRadioButton(\"Lemma\");\r\n        JRadioButton pos = new JRadioButton(\"POS\");\r\n        JRadioButton word = new JRadioButton(\"Word\");\r\n\r\n        ButtonGroup buttonGroup = new ButtonGroup();\r\n        buttonGroup.add(lemma);\r\n        buttonGroup.add(pos);\r\n        buttonGroup.add(word);\r\n\r\n        lemma.addActionListener(new WordPosLemmaButtonHandler());\r\n        pos.addActionListener(new WordPosLemmaButtonHandler());\r\n        word.addActionListener(new WordPosLemmaButtonHandler());\r\n\r\n        Box box1 = Box.createVerticalBox();\r\n        box1.add(lemma);\r\n        box1.add(pos);\r\n        box1.add(word);\r\n\r\n        JPanel panel1=new JPanel();\r\n        BoxLayout aBoxLayout = new BoxLayout(panel1,BoxLayout.X_AXIS);\r\n        panel1.setLayout(aBoxLayout);\r\n\r\n        panel1.add(Box.createRigidArea(new Dimension(0,5)));\r\n        panel1.add(loadButton);\r\n        panel1.add(firstTextField);\r\n        panel1.add(box1);\r\n        panel1.add(Box.createHorizontalGlue());\r\n        panel1.add(searchButton);\r\n        //panel with spoiler panel\r\n        JPanel panel2=new JPanel();\r\n        BoxLayout bBoxLayout = new BoxLayout(panel2,BoxLayout.Y_AXIS);\r\n        panel2.setLayout(bBoxLayout);\r\n\r\n        panel2.add(Box.createRigidArea(new Dimension(0,5)));\r\n\r\n        JButton spoilerButton = new JButton(\"Additional filters\");\r\n        spoilerButton.setMaximumSize(new Dimension(frame.getWidth(),30));\r\n        spoilerButton.addActionListener(new SpoilerButtonHandler());\r\n        spoilerButton.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n        panel2.add(spoilerButton);\r\n\r\n        panel2.add(Box.createRigidArea(new Dimension(0,5)));\r\n        //spoiler panel\r\n        panelSpoiler=new JPanel();\r\n        BoxLayout spoilerBoxLayout = new BoxLayout(panelSpoiler,BoxLayout.X_AXIS);\r\n        panelSpoiler.setLayout(spoilerBoxLayout);\r\n\r\n        panel2.add(panelSpoiler);\r\n\r\n        JList<CheckboxListItem> list = new JList<CheckboxListItem>(\r\n                new CheckboxListItem[] { new CheckboxListItem(\"apple\"),\r\n                        new CheckboxListItem(\"orange\"),\r\n                        new CheckboxListItem(\"mango\"),\r\n                        new CheckboxListItem(\"paw paw\"),\r\n                        new CheckboxListItem(\"banana\") });\r\n\r\n        list.setCellRenderer(new CheckboxListRenderer());\r\n        list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\r\n\r\n        panelSpoiler.add(new JScrollPane(list));\r\n\r\n        panelNeighbours=new JPanel();\r\n        BoxLayout neigboursBoxLayout = new BoxLayout(panelNeighbours,BoxLayout.Y_AXIS);\r\n        panelNeighbours.setLayout(neigboursBoxLayout);\r\n        panelSpoiler.add(panelNeighbours);\r\n\r\n        JLabel neighbours= new JLabel(\"Neighbours\");\r\n        neighbours.setMaximumSize(size);\r\n\r\n        Integer[] neighboursStrings = {0, 1,2,3,4,5,6,7,8,9,10};\r\n        SpinnerListModel neighboursModel = new SpinnerListModel(neighboursStrings);\r\n        JSpinner spinner = new JSpinner(neighboursModel);\r\n        spinner.setMaximumSize(size);\r\n        spinner.setValue(numberOfNeighbours);\r\n        spinner.addChangeListener(new spinnerListener());\r\n\r\n        panelNeighbours.add(neighbours);\r\n        panelNeighbours.add(spinner);\r\n        neighbours.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        spinner.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n        panelSpoiler.add(Box.createRigidArea(new Dimension(5,0)));\r\n\r\n        panelDisplayedResults=new JPanel();\r\n        BoxLayout displayedResultsLayout = new BoxLayout(panelDisplayedResults,BoxLayout.Y_AXIS);\r\n        panelDisplayedResults.setLayout(displayedResultsLayout);\r\n        panelSpoiler.add(panelDisplayedResults);\r\n\r\n        JLabel displayedResults= new JLabel(\"Amount of displayed results\");\r\n        displayedResults.setMaximumSize(new Dimension(300,30));\r\n\r\n        JSlider slider = new JSlider(JSlider.HORIZONTAL,\r\n                1, 50, numberOfDisplayedResults);\r\n        slider.setMaximumSize(new Dimension(300,100));\r\n        slider.setMajorTickSpacing(10);\r\n        slider.setMinorTickSpacing(1);\r\n        slider.setPaintTicks(true);\r\n        slider.setPaintLabels(true);\r\n        slider.addChangeListener(new sliderListener());\r\n\r\n        panelDisplayedResults.add(displayedResults);\r\n        panelDisplayedResults.add(slider);\r\n        displayedResults.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        slider.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n\r\n        JPanel panel3=new JPanel();\r\n        BoxLayout cBoxLayout = new BoxLayout(panel3,BoxLayout.X_AXIS);\r\n        panel3.setLayout(cBoxLayout);\r\n\r\n        panel3.add(Box.createRigidArea(new Dimension(0,5)));\r\n\r\n\r\n        frame.getContentPane().setLayout(new BoxLayout(frame.getContentPane(),BoxLayout.Y_AXIS));\r\n        frame.getContentPane().add(panel1);\r\n        frame.getContentPane().add(panel2);\r\n        frame.getContentPane().add(panel3);\r\n        //This is the common size of the buttons\r\n\r\n        frame.addWindowListener(new MyWindowListener());\r\n        frame.setVisible(true);\r\n\r\n\r\n        // Create the JTextArea for displaying the output\r\n        outputArea = new JTextArea();\r\n        outputArea.setEditable(false); // Make it read-only\r\n        frame.add(outputArea);\r\n\r\n    }\r\n    public class SpoilerButtonHandler implements ActionListener {\r\n        public void actionPerformed(ActionEvent e) {\r\n            if (panelSpoiler.isVisible()){\r\n                panelSpoiler.setVisible(false);\r\n\r\n            } else {\r\n\r\n                panelSpoiler.setVisible(true);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public class LoadButtonHandler implements ActionListener {\r\n        public void actionPerformed(ActionEvent e) {\r\n            JFileChooser fileChooser = new JFileChooser();\r\n            fileChooser.setCurrentDirectory(new File(System.getProperty(\"user.home\")));\r\n            int result = fileChooser.showOpenDialog(frame);\r\n            if (result == JFileChooser.APPROVE_OPTION) {\r\n                File selectedFile = fileChooser.getSelectedFile();\r\n\r\n            String text=\"\";\r\n            Scanner inputStream;\r\n            try{\r\n                inputStream=new Scanner(selectedFile);\r\n\r\n            } catch (FileNotFoundException ex) {\r\n                JOptionPane.showMessageDialog(frame,\"File can not be found\");\r\n                throw new RuntimeException(ex);\r\n            }\r\n            while (inputStream.hasNextLine()){\r\n                text=text+inputStream.nextLine();\r\n            }\r\n\r\n            CorpusBuilder corp= new CorpusBuilder(text);\r\n            corp.getSentences();\r\n            corp.getTokens();\r\n            corp.getPosTags();\r\n            corp.getLemmas();\r\n\r\n            src = corp.getWordPosLemma();\r\n\r\n            inputStream.close();\r\n            }\r\n        }\r\n    }\r\n\r\n    private class spinnerListener implements ChangeListener {\r\n        public void stateChanged(ChangeEvent e) {\r\n            JSpinner spinner= (JSpinner) e.getSource();\r\n            SpinnerModel spinnerModel = (SpinnerModel) spinner.getModel();\r\n            if (spinnerModel instanceof SpinnerDateModel) {\r\n                numberOfNeighbours=(int)spinnerModel.getValue();\r\n            }\r\n        }\r\n    }\r\n    private class sliderListener implements ChangeListener {\r\n        public void stateChanged(ChangeEvent e) {\r\n\r\n        JSlider source = (JSlider) e.getSource();\r\n        if(!source.getValueIsAdjusting())\r\n\r\n        {\r\n             numberOfDisplayedResults= source.getValue();\r\n\r\n        }\r\n    }\r\n    }\r\n    private class QuitButtonHandler implements ActionListener {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            System.exit(0);\r\n        }\r\n    }\r\n    private class MyWindowListener extends WindowAdapter {\r\n\r\n        public void windowClosing(WindowEvent e) {\r\n            System.exit(0);\r\n        }\r\n    }\r\n\r\n    private class WordPosLemmaButtonHandler implements ActionListener {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            JRadioButton button = (JRadioButton) e.getSource();\r\n            searchBy = button.getText();\r\n        }\r\n    }\r\n\r\n\r\n    private class SearchButtonHandler implements ActionListener {\r\n        String s = firstTextField.getText();\r\n        public void actionPerformed(ActionEvent e) {\r\n            if (searchBy.equals(\"Word\")){\r\n                for (int i=0;i<src.size();i++){   //iteration by sentences\r\n                    for (int k=0;k<src.get(i).size();k++){   //iteration by words\r\n                        if (src.get(i).get(k).get(0).equals(s)){\r\n                            System.out.println(src.get(i)); //prints a list of tokens, lemmas and pos tags\r\n                            //src.get(i).get(k).get(1) -- POS tag of the word\r\n                            System.out.println(getContextWords(src.get(i), k, numberOfNeighbours)); //prints final sentences with neighbours\r\n                        }\r\n                    }\r\n                }\r\n            } else if (searchBy.equals(\"Lemma\")) {\r\n\r\n\r\n            } else if (searchBy.equals(\"POS\")) {\r\n\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Helper method that gets a list from CorpusBuilder, index of the word and the number of neighbours\r\n     * @param sentenceList\r\n     * @param index\r\n     * @param numNeighbours\r\n     * @return a string with word and his neighbours\r\n     */\r\n    private static String getContextWords (List<List<String>> sentenceList, int index, int numNeighbours){\r\n        ArrayList<String> contextWords = new ArrayList<>();\r\n        ArrayList<String> sentenceArrayList = new ArrayList<>();\r\n\r\n        for (List<String> list : sentenceList) {\r\n            if (!list.isEmpty()) {\r\n                sentenceArrayList.add(list.get(0));\r\n            }\r\n        }\r\n\r\n        if (index >= numNeighbours) {\r\n            contextWords.addAll(sentenceArrayList.subList((index - numNeighbours), index));\r\n        } else {\r\n            contextWords.addAll(sentenceArrayList.subList(0, index));\r\n        }\r\n\r\n        if (index < sentenceList.size() - numNeighbours - 1) {\r\n            contextWords.addAll(sentenceArrayList.subList(index + 1, index + numNeighbours + 1));\r\n        } else {\r\n            contextWords.addAll(sentenceArrayList.subList(index + 1, sentenceList.size()));\r\n        }\r\n\r\n        return String.join(\", \", contextWords);\r\n    }\r\n\r\n    class CheckboxListRenderer extends JCheckBox implements\r\n            ListCellRenderer<CheckboxListItem> {\r\n\r\n        @Override\r\n        public Component getListCellRendererComponent(\r\n                JList<? extends CheckboxListItem> list, CheckboxListItem value,\r\n                int index, boolean isSelected, boolean cellHasFocus) {\r\n            setEnabled(list.isEnabled());\r\n            setSelected(value.isSelected());\r\n            setFont(list.getFont());\r\n            setBackground(list.getBackground());\r\n            setForeground(list.getForeground());\r\n            setText(value.toString());\r\n            return this;\r\n        }\r\n    }\r\n    public class CheckboxListItem {\r\n\r\n        private String label;\r\n        private boolean isSelected = false;\r\n\r\n        public CheckboxListItem(String label) {\r\n            this.label = label;\r\n        }\r\n\r\n        public boolean isSelected() {\r\n            return isSelected;\r\n        }\r\n\r\n        public void setSelected(boolean isSelected) {\r\n            this.isSelected = isSelected;\r\n        }\r\n\r\n        public String toString() {\r\n            return label;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public static void main ( String[] args )\r\n    {\r\n        new Frame();\r\n    }\r\n}
-+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-+<+>UTF-8
-+===================================================================
-+diff --git a/src/main/java/Frame.java b/src/main/java/Frame.java
-+--- a/src/main/java/Frame.java	(revision 95512d265b4363906c5670de9756f07a82891924)
-++++ b/src/main/java/Frame.java	(date 1688290432843)
-+@@ -98,15 +98,16 @@
-+ 
-+         panel2.add(panelSpoiler);
-+ 
-+-        JList<CheckboxListItem> list = new JList<CheckboxListItem>(
-++        JList<CheckboxListItem> posList = new JList<CheckboxListItem>(
-+                 new CheckboxListItem[] { new CheckboxListItem("apple"),
-+                         new CheckboxListItem("orange"),
-+                         new CheckboxListItem("mango"),
-+                         new CheckboxListItem("paw paw"),
-+                         new CheckboxListItem("banana") });
-+ 
-+-        list.setCellRenderer(new CheckboxListRenderer());
-+-        list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
-++        posList.setCellRenderer(new CheckboxListRenderer());
-++        posList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
-++        posList.addMouseListener(new posListListener());
-+ 
-+         panelSpoiler.add(new JScrollPane(list));
-+ 
-+@@ -364,6 +365,8 @@
-+     }
-+ 
-+ 
-++
-++
-+     public static void main ( String[] args )
-+     {
-+         new Frame();
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_36_[Changes]/shelved.patch
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_36_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_36_[Changes]/shelved.patch
-new file mode 100644
---- /dev/null	(date 1688293687401)
-+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_36_[Changes]/shelved.patch	(date 1688293687401)
-@@ -0,0 +1,57 @@
-+Index: src/main/java/Frame.java
-+IDEA additional info:
-+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-+<+>import javax.swing.*;\r\nimport javax.swing.event.ChangeEvent;\r\nimport javax.swing.event.ChangeListener;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.event.WindowAdapter;\r\nimport java.awt.event.WindowEvent;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\npublic class Frame{\r\n    private JFrame frame;\r\n    private JTextField firstTextField;\r\n    private JPanel panelSpoiler;\r\n    private JPanel panelNeighbours;\r\n    private  JPanel panelDisplayedResults;\r\n\r\n    private JTextArea outputArea;\r\n\r\n    private String searchBy;\r\n\r\n\r\n    private List<List<List<String>>> src;\r\n    private int numberOfNeighbours=2;\r\n    private int numberOfDisplayedResults = 10;\r\n\r\n\r\n    Frame(){\r\n        frame=new JFrame(\"Test\");\r\n        frame.setSize(1000,600);\r\n        firstTextField=new JTextField(60);\r\n\r\n        firstTextField.setMaximumSize(new Dimension(200,50));\r\n\r\n\r\n        Dimension size = new Dimension(95, 30);\r\n\r\n        JButton loadButton = new JButton(\"load\");\r\n        loadButton.setMaximumSize(size);\r\n        loadButton.addActionListener(new LoadButtonHandler());\r\n\r\n        JButton searchButton = new JButton(\"search\");\r\n        searchButton.setMaximumSize(size);\r\n        searchButton.addActionListener(new SearchButtonHandler());\r\n\r\n        JRadioButton lemma = new JRadioButton(\"Lemma\");\r\n        JRadioButton pos = new JRadioButton(\"POS\");\r\n        JRadioButton word = new JRadioButton(\"Word\");\r\n\r\n        ButtonGroup buttonGroup = new ButtonGroup();\r\n        buttonGroup.add(lemma);\r\n        buttonGroup.add(pos);\r\n        buttonGroup.add(word);\r\n\r\n        lemma.addActionListener(new WordPosLemmaButtonHandler());\r\n        pos.addActionListener(new WordPosLemmaButtonHandler());\r\n        word.addActionListener(new WordPosLemmaButtonHandler());\r\n\r\n        Box box1 = Box.createVerticalBox();\r\n        box1.add(lemma);\r\n        box1.add(pos);\r\n        box1.add(word);\r\n\r\n        JPanel panel1=new JPanel();\r\n        BoxLayout aBoxLayout = new BoxLayout(panel1,BoxLayout.X_AXIS);\r\n        panel1.setLayout(aBoxLayout);\r\n\r\n        panel1.add(Box.createRigidArea(new Dimension(0,5)));\r\n        panel1.add(loadButton);\r\n        panel1.add(firstTextField);\r\n        panel1.add(box1);\r\n        panel1.add(Box.createHorizontalGlue());\r\n        panel1.add(searchButton);\r\n        //panel with spoiler panel\r\n        JPanel panel2=new JPanel();\r\n        BoxLayout bBoxLayout = new BoxLayout(panel2,BoxLayout.Y_AXIS);\r\n        panel2.setLayout(bBoxLayout);\r\n\r\n        panel2.add(Box.createRigidArea(new Dimension(0,5)));\r\n\r\n        JButton spoilerButton = new JButton(\"Additional filters\");\r\n        spoilerButton.setMaximumSize(new Dimension(frame.getWidth(),30));\r\n        spoilerButton.addActionListener(new SpoilerButtonHandler());\r\n        spoilerButton.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n        panel2.add(spoilerButton);\r\n\r\n        panel2.add(Box.createRigidArea(new Dimension(0,5)));\r\n        //spoiler panel\r\n        panelSpoiler=new JPanel();\r\n        BoxLayout spoilerBoxLayout = new BoxLayout(panelSpoiler,BoxLayout.X_AXIS);\r\n        panelSpoiler.setLayout(spoilerBoxLayout);\r\n\r\n        panel2.add(panelSpoiler);\r\n\r\n\r\n        panelNeighbours=new JPanel();\r\n        BoxLayout neigboursBoxLayout = new BoxLayout(panelNeighbours,BoxLayout.Y_AXIS);\r\n        panelNeighbours.setLayout(neigboursBoxLayout);\r\n        panelSpoiler.add(panelNeighbours);\r\n\r\n        JLabel neighbours= new JLabel(\"Neighbours\");\r\n        neighbours.setMaximumSize(size);\r\n\r\n        Integer[] neighboursStrings = {0, 1,2,3,4,5,6,7,8,9,10};\r\n        SpinnerListModel neighboursModel = new SpinnerListModel(neighboursStrings);\r\n        JSpinner spinner = new JSpinner(neighboursModel);\r\n        spinner.setMaximumSize(size);\r\n        spinner.setValue(numberOfNeighbours);\r\n        spinner.addChangeListener(new spinnerListener());\r\n\r\n        panelNeighbours.add(neighbours);\r\n        panelNeighbours.add(spinner);\r\n        neighbours.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        spinner.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n        panelSpoiler.add(Box.createRigidArea(new Dimension(5,0)));\r\n\r\n        panelDisplayedResults=new JPanel();\r\n        BoxLayout displayedResultsLayout = new BoxLayout(panelDisplayedResults,BoxLayout.Y_AXIS);\r\n        panelDisplayedResults.setLayout(displayedResultsLayout);\r\n        panelSpoiler.add(panelDisplayedResults);\r\n\r\n        JLabel displayedResults= new JLabel(\"Amount of displayed results\");\r\n        displayedResults.setMaximumSize(new Dimension(300,30));\r\n\r\n        JSlider slider = new JSlider(JSlider.HORIZONTAL,\r\n                1, 50, numberOfDisplayedResults);\r\n        slider.setMaximumSize(new Dimension(300,100));\r\n        slider.setMajorTickSpacing(10);\r\n        slider.setMinorTickSpacing(1);\r\n        slider.setPaintTicks(true);\r\n        slider.setPaintLabels(true);\r\n        slider.addChangeListener(new sliderListener());\r\n\r\n        panelDisplayedResults.add(displayedResults);\r\n        panelDisplayedResults.add(slider);\r\n        displayedResults.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        slider.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n\r\n        JPanel panel3=new JPanel();\r\n        BoxLayout cBoxLayout = new BoxLayout(panel3,BoxLayout.X_AXIS);\r\n        panel3.setLayout(cBoxLayout);\r\n\r\n        panel3.add(Box.createRigidArea(new Dimension(0,5)));\r\n\r\n\r\n        frame.getContentPane().setLayout(new BoxLayout(frame.getContentPane(),BoxLayout.Y_AXIS));\r\n        frame.getContentPane().add(panel1);\r\n        frame.getContentPane().add(panel2);\r\n        frame.getContentPane().add(panel3);\r\n        //This is the common size of the buttons\r\n\r\n        frame.addWindowListener(new MyWindowListener());\r\n        frame.setVisible(true);\r\n\r\n\r\n        // Create the JTextArea for displaying the output\r\n        outputArea = new JTextArea();\r\n        outputArea.setEditable(false); // Make it read-only\r\n        frame.add(outputArea);\r\n\r\n    }\r\n    public class SpoilerButtonHandler implements ActionListener {\r\n        public void actionPerformed(ActionEvent e) {\r\n            if (panelSpoiler.isVisible()){\r\n                panelSpoiler.setVisible(false);\r\n\r\n            } else {\r\n\r\n                panelSpoiler.setVisible(true);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public class LoadButtonHandler implements ActionListener {\r\n        public void actionPerformed(ActionEvent e) {\r\n            JFileChooser fileChooser = new JFileChooser();\r\n            fileChooser.setCurrentDirectory(new File(System.getProperty(\"user.home\")));\r\n            int result = fileChooser.showOpenDialog(frame);\r\n            if (result == JFileChooser.APPROVE_OPTION) {\r\n                File selectedFile = fileChooser.getSelectedFile();\r\n\r\n            String text=\"\";\r\n            Scanner inputStream;\r\n            try{\r\n                inputStream=new Scanner(selectedFile);\r\n\r\n            } catch (FileNotFoundException ex) {\r\n                JOptionPane.showMessageDialog(frame,\"File can not be found\");\r\n                throw new RuntimeException(ex);\r\n            }\r\n            while (inputStream.hasNextLine()){\r\n                text=text+inputStream.nextLine();\r\n            }\r\n\r\n            CorpusBuilder corp= new CorpusBuilder(text);\r\n            corp.getSentences();\r\n            corp.getTokens();\r\n            corp.getPosTags();\r\n            corp.getLemmas();\r\n\r\n            src = corp.getWordPosLemma();\r\n\r\n            inputStream.close();\r\n            }\r\n        }\r\n    }\r\n\r\n    private class spinnerListener implements ChangeListener {\r\n        public void stateChanged(ChangeEvent e) {\r\n            JSpinner spinner= (JSpinner) e.getSource();\r\n            SpinnerModel spinnerModel = (SpinnerModel) spinner.getModel();\r\n            if (spinnerModel instanceof SpinnerDateModel) {\r\n                numberOfNeighbours=(int)spinnerModel.getValue();\r\n            }\r\n        }\r\n    }\r\n    private class sliderListener implements ChangeListener {\r\n        public void stateChanged(ChangeEvent e) {\r\n\r\n        JSlider source = (JSlider) e.getSource();\r\n        if(!source.getValueIsAdjusting())\r\n\r\n        {\r\n             numberOfDisplayedResults= source.getValue();\r\n\r\n        }\r\n    }\r\n    }\r\n    private class QuitButtonHandler implements ActionListener {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            System.exit(0);\r\n        }\r\n    }\r\n    private class MyWindowListener extends WindowAdapter {\r\n\r\n        public void windowClosing(WindowEvent e) {\r\n            System.exit(0);\r\n        }\r\n    }\r\n\r\n    private class WordPosLemmaButtonHandler implements ActionListener {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            JRadioButton button = (JRadioButton) e.getSource();\r\n            searchBy = button.getText();\r\n        }\r\n    }\r\n\r\n\r\n    private class SearchButtonHandler implements ActionListener {\r\n        String s = firstTextField.getText();\r\n        public void actionPerformed(ActionEvent e) {\r\n            if (searchBy.equals(\"Word\")){\r\n                for (int i=0;i<src.size();i++){   //iteration by sentences\r\n                    for (int k=0;k<src.get(i).size();k++){   //iteration by words\r\n                        if (src.get(i).get(k).get(0).equals(s)){\r\n                            System.out.println(src.get(i)); //prints a list of tokens, lemmas and pos tags\r\n                            //src.get(i).get(k).get(1) -- POS tag of the word\r\n                            System.out.println(getContextWords(src.get(i), k, numberOfNeighbours)); //prints final sentences with neighbours\r\n                        }\r\n                    }\r\n                }\r\n            } else if (searchBy.equals(\"Lemma\")) {\r\n\r\n\r\n            } else if (searchBy.equals(\"POS\")) {\r\n\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Helper method that gets a list from CorpusBuilder, index of the word and the number of neighbours\r\n     * @param sentenceList\r\n     * @param index\r\n     * @param numNeighbours\r\n     * @return a string with word and his neighbours\r\n     */\r\n    private static String getContextWords (List<List<String>> sentenceList, int index, int numNeighbours){\r\n        ArrayList<String> contextWords = new ArrayList<>();\r\n        ArrayList<String> sentenceArrayList = new ArrayList<>();\r\n\r\n        for (List<String> list : sentenceList) {\r\n            if (!list.isEmpty()) {\r\n                sentenceArrayList.add(list.get(0));\r\n            }\r\n        }\r\n\r\n        if (index >= numNeighbours) {\r\n            contextWords.addAll(sentenceArrayList.subList((index - numNeighbours), index));\r\n        } else {\r\n            contextWords.addAll(sentenceArrayList.subList(0, index));\r\n        }\r\n\r\n        if (index < sentenceList.size() - numNeighbours - 1) {\r\n            contextWords.addAll(sentenceArrayList.subList(index + 1, index + numNeighbours + 1));\r\n        } else {\r\n            contextWords.addAll(sentenceArrayList.subList(index + 1, sentenceList.size()));\r\n        }\r\n\r\n        return String.join(\", \", contextWords);\r\n    }\r\n\r\n    public static void main ( String[] args )\r\n    {\r\n        new Frame();\r\n    }\r\n}
-+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-+<+>UTF-8
-+===================================================================
-+diff --git a/src/main/java/Frame.java b/src/main/java/Frame.java
-+--- a/src/main/java/Frame.java	(revision e10be0a15939d0add488bb9b7c2941bcec1943ff)
-++++ b/src/main/java/Frame.java	(date 1688290518203)
-+@@ -165,6 +165,7 @@
-+         outputArea = new JTextArea();
-+         outputArea.setEditable(false); // Make it read-only
-+         frame.add(outputArea);
-++        outputArea.setVisible(true);
-+ 
-+     }
-+     public class SpoilerButtonHandler implements ActionListener {
-+@@ -256,17 +257,18 @@
-+         }
-+     }
-+ 
-+-
-+     private class SearchButtonHandler implements ActionListener {
-+-        String s = firstTextField.getText();
-+         public void actionPerformed(ActionEvent e) {
-++            String s = firstTextField.getText();
-+             if (searchBy.equals("Word")){
-+                 for (int i=0;i<src.size();i++){   //iteration by sentences
-+                     for (int k=0;k<src.get(i).size();k++){   //iteration by words
-+                         if (src.get(i).get(k).get(0).equals(s)){
-+-                            System.out.println(src.get(i)); //prints a list of tokens, lemmas and pos tags
-++                            //System.out.println(src.get(i)); //prints a list of tokens, lemmas and pos tags
-+                             //src.get(i).get(k).get(1) -- POS tag of the word
-+-                            System.out.println(getContextWords(src.get(i), k, numberOfNeighbours)); //prints final sentences with neighbours
-++                            //System.out.println(getContextWords(src.get(i), k, numberOfNeighbours)); //prints final sentences with neighbours
-++                            outputArea.append(getContextWords(src.get(i), k, numberOfNeighbours));
-++                            outputArea.append("\n");
-+                         }
-+                     }
-+                 }
-+@@ -305,12 +307,12 @@
-+         }
-+ 
-+         if (index < sentenceList.size() - numNeighbours - 1) {
-+-            contextWords.addAll(sentenceArrayList.subList(index + 1, index + numNeighbours + 1));
-++            contextWords.addAll(sentenceArrayList.subList(index, index + numNeighbours + 1));
-+         } else {
-+-            contextWords.addAll(sentenceArrayList.subList(index + 1, sentenceList.size()));
-++            contextWords.addAll(sentenceArrayList.subList(index, sentenceList.size()));
-+         }
-+ 
-+-        return String.join(", ", contextWords);
-++        return String.join(" ", contextWords);
-+     }
-+ 
-+     public static void main ( String[] args )
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_04_[Changes]/shelved.patch
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_04_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_04_[Changes]/shelved.patch
-new file mode 100644
---- /dev/null	(date 1688293687383)
-+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_04_[Changes]/shelved.patch	(date 1688293687383)
-@@ -0,0 +1,129 @@
-+Index: src/main/java/Frame.java
-+IDEA additional info:
-+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-+<+>import javax.swing.*;\r\nimport javax.swing.event.ChangeEvent;\r\nimport javax.swing.event.ChangeListener;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.event.WindowAdapter;\r\nimport java.awt.event.WindowEvent;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\npublic class Frame{\r\n    private JFrame frame;\r\n    private JTextField firstTextField;\r\n    private JPanel panelSpoiler;\r\n    private JPanel panelNeighbours;\r\n    private  JPanel panelDisplayedResults;\r\n\r\n    private String searchBy;\r\n\r\n\r\n    private List<List<List<String>>> src;\r\n    private int numberOfNeighbours=2;\r\n    private int numberOfDisplayedResults = 10;\r\n\r\n\r\n    Frame(){\r\n        frame=new JFrame(\"Test\");\r\n        frame.setSize(1000,600);\r\n        firstTextField=new JTextField(60);\r\n\r\n        firstTextField.setMaximumSize(new Dimension(200,50));\r\n\r\n        Dimension size = new Dimension(95, 30);\r\n\r\n        JButton loadButton = new JButton(\"load\");\r\n        loadButton.setMaximumSize(size);\r\n        loadButton.addActionListener(new LoadButtonHandler());\r\n\r\n        JRadioButton lemma = new JRadioButton(\"Lemma\");\r\n        JRadioButton pos = new JRadioButton(\"POS\");\r\n        JRadioButton word = new JRadioButton(\"Word\");\r\n\r\n        ButtonGroup buttonGroup = new ButtonGroup();\r\n        buttonGroup.add(lemma);\r\n        buttonGroup.add(pos);\r\n        buttonGroup.add(word);\r\n\r\n        lemma.addActionListener(new WordPosLemmaButtonHandler());\r\n        pos.addActionListener(new WordPosLemmaButtonHandler());\r\n        word.addActionListener(new WordPosLemmaButtonHandler());\r\n\r\n        Box box1 = Box.createVerticalBox();\r\n        box1.add(lemma);\r\n        box1.add(pos);\r\n        box1.add(word);\r\n\r\n        JPanel panel1=new JPanel();\r\n        BoxLayout aBoxLayout = new BoxLayout(panel1,BoxLayout.X_AXIS);\r\n        panel1.setLayout(aBoxLayout);\r\n\r\n        panel1.add(Box.createRigidArea(new Dimension(0,5)));\r\n        panel1.add(loadButton);\r\n        panel1.add(firstTextField);\r\n        panel1.add(box1);\r\n        //panel with spoiler panel\r\n        JPanel panel2=new JPanel();\r\n        BoxLayout bBoxLayout = new BoxLayout(panel2,BoxLayout.Y_AXIS);\r\n        panel2.setLayout(bBoxLayout);\r\n\r\n        panel2.add(Box.createRigidArea(new Dimension(0,5)));\r\n\r\n        JButton spoilerButton = new JButton(\"Additional filters\");\r\n        spoilerButton.setMaximumSize(new Dimension(frame.getWidth(),30));\r\n        spoilerButton.addActionListener(new SpoilerButtonHandler());\r\n        spoilerButton.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n        panel2.add(spoilerButton);\r\n\r\n        panel2.add(Box.createRigidArea(new Dimension(0,5)));\r\n        //spoiler panel\r\n        panelSpoiler=new JPanel();\r\n        BoxLayout spoilerBoxLayout = new BoxLayout(panelSpoiler,BoxLayout.X_AXIS);\r\n        panelSpoiler.setLayout(spoilerBoxLayout);\r\n\r\n        panel2.add(panelSpoiler);\r\n\r\n\r\n        panelNeighbours=new JPanel();\r\n        BoxLayout neigboursBoxLayout = new BoxLayout(panelNeighbours,BoxLayout.Y_AXIS);\r\n        panelNeighbours.setLayout(neigboursBoxLayout);\r\n        panelSpoiler.add(panelNeighbours);\r\n\r\n        JLabel neighbours= new JLabel(\"Neighbours\");\r\n        neighbours.setMaximumSize(size);\r\n\r\n        Integer[] neighboursStrings = {0, 1,2,3,4,5,6,7,8,9,10};\r\n        SpinnerListModel neighboursModel = new SpinnerListModel(neighboursStrings);\r\n        JSpinner spinner = new JSpinner(neighboursModel);\r\n        spinner.setMaximumSize(size);\r\n        spinner.setValue(numberOfNeighbours);\r\n        spinner.addChangeListener(new spinnerListener());\r\n\r\n        panelNeighbours.add(neighbours);\r\n        panelNeighbours.add(spinner);\r\n        neighbours.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        spinner.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n        panelSpoiler.add(Box.createRigidArea(new Dimension(5,0)));\r\n\r\n        panelDisplayedResults=new JPanel();\r\n        BoxLayout displayedResultsLayout = new BoxLayout(panelDisplayedResults,BoxLayout.Y_AXIS);\r\n        panelDisplayedResults.setLayout(displayedResultsLayout);\r\n        panelSpoiler.add(panelDisplayedResults);\r\n\r\n        JLabel displayedResults= new JLabel(\"Amount of displayed results\");\r\n        displayedResults.setMaximumSize(new Dimension(300,30));\r\n\r\n        JSlider slider = new JSlider(JSlider.HORIZONTAL,\r\n                1, 50, numberOfDisplayedResults);\r\n        slider.setMaximumSize(new Dimension(300,100));\r\n        slider.setMajorTickSpacing(10);\r\n        slider.setMinorTickSpacing(1);\r\n        slider.setPaintTicks(true);\r\n        slider.setPaintLabels(true);\r\n        slider.addChangeListener(new sliderListener());\r\n\r\n        panelDisplayedResults.add(displayedResults);\r\n        panelDisplayedResults.add(slider);\r\n        displayedResults.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        slider.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n\r\n        JPanel panel3=new JPanel();\r\n        BoxLayout cBoxLayout = new BoxLayout(panel3,BoxLayout.X_AXIS);\r\n        panel3.setLayout(cBoxLayout);\r\n\r\n        panel3.add(Box.createRigidArea(new Dimension(0,5)));\r\n\r\n        frame.getContentPane().setLayout(new BoxLayout(frame.getContentPane(),BoxLayout.Y_AXIS));\r\n        frame.getContentPane().add(panel1);\r\n        frame.getContentPane().add(panel2);\r\n        frame.getContentPane().add(panel3);\r\n        //This is the common size of the buttons\r\n\r\n        frame.addWindowListener(new MyWindowListener());\r\n        frame.setVisible(true);\r\n\r\n    }\r\n    public class SpoilerButtonHandler implements ActionListener {\r\n        public void actionPerformed(ActionEvent e) {\r\n            if (panelSpoiler.isVisible()){\r\n                panelSpoiler.setVisible(false);\r\n\r\n            } else {\r\n\r\n                panelSpoiler.setVisible(true);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public class LoadButtonHandler implements ActionListener {\r\n        public void actionPerformed(ActionEvent e) {\r\n            JFileChooser fileChooser = new JFileChooser();\r\n            fileChooser.setCurrentDirectory(new File(System.getProperty(\"user.home\")));\r\n            int result = fileChooser.showOpenDialog(frame);\r\n            if (result == JFileChooser.APPROVE_OPTION) {\r\n                File selectedFile = fileChooser.getSelectedFile();\r\n\r\n            String text=\"\";\r\n            Scanner inputStream;\r\n            try{\r\n                inputStream=new Scanner(selectedFile);\r\n\r\n            } catch (FileNotFoundException ex) {\r\n                JOptionPane.showMessageDialog(frame,\"File can not be found\");\r\n                throw new RuntimeException(ex);\r\n            }\r\n            while (inputStream.hasNextLine()){\r\n                text=text+inputStream.nextLine();\r\n            }\r\n\r\n            CorpusBuilder corp= new CorpusBuilder(text);\r\n            corp.getSentences();\r\n            corp.getTokens();\r\n            corp.getPosTags();\r\n            corp.getLemmas();\r\n\r\n            src = corp.getWordPosLemma();\r\n\r\n            inputStream.close();\r\n            }\r\n        }\r\n    }\r\n\r\n    private class spinnerListener implements ChangeListener {\r\n        public void stateChanged(ChangeEvent e) {\r\n            JSpinner spinner= (JSpinner) e.getSource();\r\n            SpinnerModel spinnerModel = (SpinnerModel) spinner.getModel();\r\n            if (spinnerModel instanceof SpinnerDateModel) {\r\n                numberOfNeighbours=(int)spinnerModel.getValue();\r\n            }\r\n        }\r\n    }\r\n    private class sliderListener implements ChangeListener {\r\n        public void stateChanged(ChangeEvent e) {\r\n\r\n        JSlider source = (JSlider) e.getSource();\r\n        if(!source.getValueIsAdjusting())\r\n\r\n        {\r\n             numberOfDisplayedResults= source.getValue();\r\n\r\n        }\r\n    }\r\n    }\r\n    private class QuitButtonHandler implements ActionListener {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            System.exit(0);\r\n        }\r\n    }\r\n    private class MyWindowListener extends WindowAdapter {\r\n\r\n        public void windowClosing(WindowEvent e) {\r\n            System.exit(0);\r\n        }\r\n    }\r\n\r\n    private class WordPosLemmaButtonHandler implements ActionListener {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            JRadioButton button = (JRadioButton) e.getSource();\r\n            searchBy = button.getText();\r\n        }\r\n    }\r\n\r\n\r\n    private class SearchButtonHandler implements ActionListener {\r\n        String s = firstTextField.getText();\r\n        public void actionPerformed(ActionEvent e) {\r\n            if (searchBy.equals(\"Word\")){\r\n                for (int i=0;i<src.size();i++){   //iteration by sentences\r\n                    for (int k=0;k<src.get(i).size();k++){   //iteration by words\r\n                        if (src.get(i).get(k).get(2).equals(s)){\r\n                            System.out.println(src.get(i)); //this should be fixed in the future\r\n                        }\r\n                    }\r\n                }\r\n                //**public static ArrayList<String> getContextWords(ArrayList<String> sentence, int index) {\r\n                //        ArrayList<String> contextWords = new ArrayList<>();\r\n                //\r\n                //        if (index >= 2) {\r\n                //            contextWords.addAll(sentence.subList(index - 2, index));\r\n                //        } else {\r\n                //            contextWords.addAll(sentence.subList(0, index));\r\n                //        }\r\n                //\r\n                //        if (index < sentence.size() - 3) {\r\n                //            contextWords.addAll(sentence.subList(index + 1, index + 4));\r\n                //        } else {\r\n                //            contextWords.addAll(sentence.subList(index + 1, sentence.size()));\r\n                //        }\r\n                //\r\n                //        return contextWords;\r\n                //    }*/\r\n            } else if (searchBy.equals(\"Lemma\")) {\r\n\r\n\r\n            } else if (searchBy.equals(\"POS\")) {\r\n\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    public static void main ( String[] args )\r\n    {\r\n        new Frame();\r\n    }\r\n}
-+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-+<+>UTF-8
-+===================================================================
-+diff --git a/src/main/java/Frame.java b/src/main/java/Frame.java
-+--- a/src/main/java/Frame.java	(revision 58d3ccc04d01b3aa660362e1e1adc7bc6c0a2fc3)
-++++ b/src/main/java/Frame.java	(date 1688288670599)
-+@@ -247,28 +247,13 @@
-+             if (searchBy.equals("Word")){
-+                 for (int i=0;i<src.size();i++){   //iteration by sentences
-+                     for (int k=0;k<src.get(i).size();k++){   //iteration by words
-+-                        if (src.get(i).get(k).get(2).equals(s)){
-+-                            System.out.println(src.get(i)); //this should be fixed in the future
-++                        if (src.get(i).get(k).get(0).equals(s)){
-++                            System.out.println(src.get(i)); //prints a list of tokens, lemmas and pos tags
-++                            //src.get(i).get(k).get(1) -- POS tag of the word
-++                            System.out.println(getContextWords(src.get(i), k, numberOfNeighbours)); //prints final sentences with neighbours
-+                         }
-+                     }
-+                 }
-+-                //**public static ArrayList<String> getContextWords(ArrayList<String> sentence, int index) {
-+-                //        ArrayList<String> contextWords = new ArrayList<>();
-+-                //
-+-                //        if (index >= 2) {
-+-                //            contextWords.addAll(sentence.subList(index - 2, index));
-+-                //        } else {
-+-                //            contextWords.addAll(sentence.subList(0, index));
-+-                //        }
-+-                //
-+-                //        if (index < sentence.size() - 3) {
-+-                //            contextWords.addAll(sentence.subList(index + 1, index + 4));
-+-                //        } else {
-+-                //            contextWords.addAll(sentence.subList(index + 1, sentence.size()));
-+-                //        }
-+-                //
-+-                //        return contextWords;
-+-                //    }*/
-+             } else if (searchBy.equals("Lemma")) {
-+ 
-+ 
-+@@ -279,6 +264,38 @@
-+         }
-+     }
-+ 
-++    /**
-++     * Helper method that gets a list from CorpusBuilder, index of the word and the number of neighbours
-++     * @param sentenceList
-++     * @param index
-++     * @param numNeighbours
-++     * @return a string with word and his neighbours
-++     */
-++    private static String getContextWords (List<List<String>> sentenceList, int index, int numNeighbours){
-++        ArrayList<String> contextWords = new ArrayList<>();
-++        ArrayList<String> sentenceArrayList = new ArrayList<>();
-++
-++        for (List<String> list : sentenceList) {
-++            if (!list.isEmpty()) {
-++                sentenceArrayList.add(list.get(0));
-++            }
-++        }
-++
-++        if (index >= numNeighbours) {
-++            contextWords.addAll(sentenceArrayList.subList((index - numNeighbours), index));
-++        } else {
-++            contextWords.addAll(sentenceArrayList.subList(0, index));
-++        }
-++
-++        if (index < sentenceList.size() - numNeighbours - 1) {
-++            contextWords.addAll(sentenceArrayList.subList(index + 1, index + numNeighbours + 1));
-++        } else {
-++            contextWords.addAll(sentenceArrayList.subList(index + 1, sentenceList.size()));
-++        }
-++
-++        return String.join(", ", contextWords);
-++    }
-++
-+     public static void main ( String[] args )
-+     {
-+         new Frame();
-+Index: .idea/misc.xml
-+IDEA additional info:
-+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-+<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"MavenProjectsManager\">\r\n    <option name=\"originalFiles\">\r\n      <list>\r\n        <option value=\"$PROJECT_DIR$/pom.xml\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_19\" default=\"true\" project-jdk-name=\"11\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
-+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-+<+>UTF-8
-+===================================================================
-+diff --git a/.idea/misc.xml b/.idea/misc.xml
-+--- a/.idea/misc.xml	(revision 58d3ccc04d01b3aa660362e1e1adc7bc6c0a2fc3)
-++++ b/.idea/misc.xml	(date 1688287371616)
-+@@ -8,7 +8,7 @@
-+       </list>
-+     </option>
-+   </component>
-+-  <component name="ProjectRootManager" version="2" languageLevel="JDK_19" default="true" project-jdk-name="11" project-jdk-type="JavaSDK">
-++  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="11" project-jdk-type="JavaSDK">
-+     <output url="file://$PROJECT_DIR$/out" />
-+   </component>
-+ </project>
-+\ No newline at end of file
-+Index: pom.xml
-+IDEA additional info:
-+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-+<+><project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n  <modelVersion>4.0.0</modelVersion>\r\n  <groupId>de.uni.tuebingen.sfs.java2</groupId>\r\n  <artifactId>CorpusBuilder</artifactId>\r\n  <version>1.0-SNAPSHOT</version>\r\n  <name>CorpusBuilder</name>\r\n  <!--  FIXME change it to the project's website  -->\r\n  <properties>\r\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n    <maven.compiler.source>1.7</maven.compiler.source>\r\n    <maven.compiler.target>1.7</maven.compiler.target>\r\n  </properties>\r\n  <dependencies>\r\n    <dependency>\r\n      <groupId>junit</groupId>\r\n      <artifactId>junit</artifactId>\r\n      <version>4.11</version>\r\n      <scope>test</scope>\r\n    </dependency>\r\n    <dependency>\r\n      <groupId>org.apache.opennlp</groupId>\r\n      <artifactId>opennlp-tools</artifactId>\r\n      <version>1.9.3</version>\r\n    </dependency>\r\n  </dependencies>\r\n  <build>\r\n    <pluginManagement>\r\n      <!--  lock down plugins versions to avoid using Maven defaults (maybe moved to parent pom)  -->\r\n      <plugins>\r\n        <!--  clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle  -->\r\n        <plugin>\r\n          <artifactId>maven-clean-plugin</artifactId>\r\n          <version>3.1.0</version>\r\n        </plugin>\r\n\r\n        <!--  default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging  -->\r\n        <plugin>\r\n          <artifactId>maven-resources-plugin</artifactId>\r\n          <version>3.0.2</version>\r\n\r\n        </plugin>\r\n        <plugin>\r\n          <artifactId>maven-compiler-plugin</artifactId>\r\n          <version>3.8.0</version>\r\n        </plugin>\r\n        <plugin>\r\n          <artifactId>maven-surefire-plugin</artifactId>\r\n          <version>2.22.1</version>\r\n        </plugin>\r\n        <plugin>\r\n          <artifactId>maven-jar-plugin</artifactId>\r\n          <version>3.0.2</version>\r\n        </plugin>\r\n        <plugin>\r\n          <artifactId>maven-install-plugin</artifactId>\r\n          <version>2.5.2</version>\r\n        </plugin>\r\n        <plugin>\r\n          <artifactId>maven-deploy-plugin</artifactId>\r\n          <version>2.8.2</version>\r\n        </plugin>\r\n        <!--  site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle  -->\r\n        <plugin>\r\n          <artifactId>maven-site-plugin</artifactId>\r\n          <version>3.7.1</version>\r\n        </plugin>\r\n        <plugin>\r\n          <artifactId>maven-project-info-reports-plugin</artifactId>\r\n          <version>3.0.0</version>\r\n        </plugin>\r\n      </plugins>\r\n    </pluginManagement>\r\n\r\n  </build>\r\n\r\n</project>
-+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-+<+>UTF-8
-+===================================================================
-+diff --git a/pom.xml b/pom.xml
-+--- a/pom.xml	(revision 58d3ccc04d01b3aa660362e1e1adc7bc6c0a2fc3)
-++++ b/pom.xml	(date 1688287444022)
-+@@ -70,6 +70,16 @@
-+         </plugin>
-+       </plugins>
-+     </pluginManagement>
-++      <plugins>
-++          <plugin>
-++              <groupId>org.apache.maven.plugins</groupId>
-++              <artifactId>maven-compiler-plugin</artifactId>
-++              <configuration>
-++                  <source>8</source>
-++                  <target>8</target>
-++              </configuration>
-++          </plugin>
-++      </plugins>
-+ 
-+   </build>
-+ 
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_10_37_[Changes]/shelved.patch
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_10_37_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_10_37_[Changes]/shelved.patch
-new file mode 100644
---- /dev/null	(date 1688293687371)
-+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_10_37_[Changes]/shelved.patch	(date 1688293687371)
-@@ -0,0 +1,19 @@
-+Index: src/main/java/Frame.java
-+IDEA additional info:
-+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-+<+>import javax.swing.*;\r\nimport javax.swing.event.ChangeEvent;\r\nimport javax.swing.event.ChangeListener;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.event.WindowAdapter;\r\nimport java.awt.event.WindowEvent;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\npublic class Frame{\r\n    private JFrame frame;\r\n    private JTextField firstTextField;\r\n    private JPanel panelSpoiler;\r\n    private JPanel panelNeighbours;\r\n    private  JPanel panelDisplayedResults;\r\n\r\n    private String searchBy;\r\n\r\n\r\n    private List<List<List<String>>> src;\r\n    private int numberOfNeighbours=2;\r\n    private int numberOfDisplayedResults = 10;\r\n\r\n\r\n    Frame(){\r\n        frame=new JFrame(\"Test\");\r\n        frame.setSize(1000,600);\r\n        firstTextField=new JTextField(60);\r\n\r\n        firstTextField.setMaximumSize(new Dimension(200,50));\r\n\r\n        Dimension size = new Dimension(95, 30);\r\n\r\n        JButton loadButton = new JButton(\"load\");\r\n        loadButton.setMaximumSize(size);\r\n        loadButton.addActionListener(new LoadButtonHandler());\r\n\r\n        JRadioButton lemma = new JRadioButton(\"Lemma\");\r\n        JRadioButton pos = new JRadioButton(\"POS\");\r\n        JRadioButton word = new JRadioButton(\"Word\");\r\n\r\n        ButtonGroup buttonGroup = new ButtonGroup();\r\n        buttonGroup.add(lemma);\r\n        buttonGroup.add(pos);\r\n        buttonGroup.add(word);\r\n\r\n        lemma.addActionListener(new WordPosLemmaButtonHandler());\r\n        pos.addActionListener(new WordPosLemmaButtonHandler());\r\n        word.addActionListener(new WordPosLemmaButtonHandler());\r\n\r\n        Box box1 = Box.createVerticalBox();\r\n        box1.add(lemma);\r\n        box1.add(pos);\r\n        box1.add(word);\r\n\r\n        JPanel panel1=new JPanel();\r\n        BoxLayout aBoxLayout = new BoxLayout(panel1,BoxLayout.X_AXIS);\r\n        panel1.setLayout(aBoxLayout);\r\n\r\n        panel1.add(Box.createRigidArea(new Dimension(0,5)));\r\n        panel1.add(loadButton);\r\n        panel1.add(firstTextField);\r\n        panel1.add(box1);\r\n        //panel with spoiler panel\r\n        JPanel panel2=new JPanel();\r\n        BoxLayout bBoxLayout = new BoxLayout(panel2,BoxLayout.Y_AXIS);\r\n        panel2.setLayout(bBoxLayout);\r\n\r\n        panel2.add(Box.createRigidArea(new Dimension(0,5)));\r\n\r\n        JButton spoilerButton = new JButton(\"Additional filters\");\r\n        spoilerButton.setMaximumSize(new Dimension(frame.getWidth(),30));\r\n        spoilerButton.addActionListener(new SpoilerButtonHandler());\r\n        spoilerButton.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n        panel2.add(spoilerButton);\r\n\r\n        panel2.add(Box.createRigidArea(new Dimension(0,5)));\r\n        //spoiler panel\r\n        panelSpoiler=new JPanel();\r\n        BoxLayout spoilerBoxLayout = new BoxLayout(panelSpoiler,BoxLayout.X_AXIS);\r\n        panelSpoiler.setLayout(spoilerBoxLayout);\r\n\r\n        panel2.add(panelSpoiler);\r\n\r\n\r\n        panelNeighbours=new JPanel();\r\n        BoxLayout neigboursBoxLayout = new BoxLayout(panelNeighbours,BoxLayout.Y_AXIS);\r\n        panelNeighbours.setLayout(neigboursBoxLayout);\r\n        panelSpoiler.add(panelNeighbours);\r\n\r\n        JLabel neighbours= new JLabel(\"Neighbours\");\r\n        neighbours.setMaximumSize(size);\r\n\r\n        Integer[] neighboursStrings = {0, 1,2,3,4,5,6,7,8,9,10};\r\n        SpinnerListModel neighboursModel = new SpinnerListModel(neighboursStrings);\r\n        JSpinner spinner = new JSpinner(neighboursModel);\r\n        spinner.setMaximumSize(size);\r\n        spinner.setValue(numberOfNeighbours);\r\n        spinner.addChangeListener(new spinnerListener());\r\n\r\n        panelNeighbours.add(neighbours);\r\n        panelNeighbours.add(spinner);\r\n        neighbours.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        spinner.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n        panelSpoiler.add(Box.createRigidArea(new Dimension(5,0)));\r\n\r\n        panelDisplayedResults=new JPanel();\r\n        BoxLayout displayedResultsLayout = new BoxLayout(panelDisplayedResults,BoxLayout.Y_AXIS);\r\n        panelDisplayedResults.setLayout(displayedResultsLayout);\r\n        panelSpoiler.add(panelDisplayedResults);\r\n\r\n        JLabel displayedResults= new JLabel(\"Amount of displayed results\");\r\n        displayedResults.setMaximumSize(new Dimension(300,30));\r\n\r\n        JSlider slider = new JSlider(JSlider.HORIZONTAL,\r\n                1, 50, numberOfDisplayedResults);\r\n        slider.setMaximumSize(new Dimension(300,100));\r\n        slider.setMajorTickSpacing(10);\r\n        slider.setMinorTickSpacing(1);\r\n        slider.setPaintTicks(true);\r\n        slider.setPaintLabels(true);\r\n        slider.addChangeListener(new sliderListener());\r\n\r\n        panelDisplayedResults.add(displayedResults);\r\n        panelDisplayedResults.add(slider);\r\n        displayedResults.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        slider.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n\r\n        JPanel panel3=new JPanel();\r\n        BoxLayout cBoxLayout = new BoxLayout(panel3,BoxLayout.X_AXIS);\r\n        panel3.setLayout(cBoxLayout);\r\n\r\n        panel3.add(Box.createRigidArea(new Dimension(0,5)));\r\n\r\n        frame.getContentPane().setLayout(new BoxLayout(frame.getContentPane(),BoxLayout.Y_AXIS));\r\n        frame.getContentPane().add(panel1);\r\n        frame.getContentPane().add(panel2);\r\n        frame.getContentPane().add(panel3);\r\n        //This is the common size of the buttons\r\n\r\n        frame.addWindowListener(new MyWindowListener());\r\n        frame.setVisible(true);\r\n\r\n    }\r\n    public class SpoilerButtonHandler implements ActionListener {\r\n        public void actionPerformed(ActionEvent e) {\r\n            if (panelSpoiler.isVisible()){\r\n                panelSpoiler.setVisible(false);\r\n                panelNeighbours.setVisible(false);\r\n\r\n            } else {\r\n\r\n                panelSpoiler.setVisible(true);\r\n                panelNeighbours.setVisible(true);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public class LoadButtonHandler implements ActionListener {\r\n        public void actionPerformed(ActionEvent e) {\r\n            JFileChooser fileChooser = new JFileChooser();\r\n            fileChooser.setCurrentDirectory(new File(System.getProperty(\"user.home\")));\r\n            int result = fileChooser.showOpenDialog(frame);\r\n            if (result == JFileChooser.APPROVE_OPTION) {\r\n                File selectedFile = fileChooser.getSelectedFile();\r\n\r\n            String text=\"\";\r\n            Scanner inputStream;\r\n            try{\r\n                inputStream=new Scanner(selectedFile);\r\n\r\n            } catch (FileNotFoundException ex) {\r\n                JOptionPane.showMessageDialog(frame,\"File can not be found\");\r\n                throw new RuntimeException(ex);\r\n            }\r\n            while (inputStream.hasNextLine()){\r\n                text=text+inputStream.nextLine();\r\n            }\r\n\r\n            CorpusBuilder corp= new CorpusBuilder(text);\r\n            corp.getSentences();\r\n            corp.getTokens();\r\n            corp.getPosTags();\r\n            corp.getLemmas();\r\n\r\n            src = corp.getWordPosLemma();\r\n\r\n            inputStream.close();\r\n            }\r\n        }\r\n    }\r\n\r\n    private class spinnerListener implements ChangeListener {\r\n        public void stateChanged(ChangeEvent e) {\r\n            JSpinner spinner= (JSpinner) e.getSource();\r\n            SpinnerModel spinnerModel = (SpinnerModel) spinner.getModel();\r\n            if (spinnerModel instanceof SpinnerDateModel) {\r\n                numberOfNeighbours=(int)spinnerModel.getValue();\r\n            }\r\n        }\r\n    }\r\n    private class sliderListener implements ChangeListener {\r\n        public void stateChanged(ChangeEvent e) {\r\n\r\n        JSlider source = (JSlider) e.getSource();\r\n        if(!source.getValueIsAdjusting())\r\n\r\n        {\r\n             numberOfDisplayedResults= source.getValue();\r\n\r\n        }\r\n    }\r\n    }\r\n    private class QuitButtonHandler implements ActionListener {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            System.exit(0);\r\n        }\r\n    }\r\n    private class MyWindowListener extends WindowAdapter {\r\n\r\n        public void windowClosing(WindowEvent e) {\r\n            System.exit(0);\r\n        }\r\n    }\r\n\r\n    private class WordPosLemmaButtonHandler implements ActionListener {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            JRadioButton button = (JRadioButton) e.getSource();\r\n            searchBy = button.getText();\r\n        }\r\n    }\r\n\r\n\r\n    private class SearchButtonHandler implements ActionListener {\r\n        String s = firstTextField.getText();\r\n        public void actionPerformed(ActionEvent e) {\r\n            if (searchBy.equals(\"Word\")){\r\n                for (int i=0;i<src.size();i++){   //iteration by sentences\r\n                    for (int k=0;k<src.get(i).size();k++){   //iteration by words\r\n                        if (src.get(i).get(k).get(2).equals(s)){\r\n                            System.out.println(src.get(i)); //this should be fixed in the future\r\n                        }\r\n                    }\r\n                }\r\n            } else if (searchBy.equals(\"Lemma\")) {\r\n\r\n\r\n            } else if (searchBy.equals(\"POS\")) {\r\n\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    public static void main ( String[] args )\r\n    {\r\n        new Frame();\r\n    }\r\n}
-+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-+<+>UTF-8
-+===================================================================
-+diff --git a/src/main/java/Frame.java b/src/main/java/Frame.java
-+--- a/src/main/java/Frame.java	(revision 14dc4ef66caf8d0262819e4f460e8271adf1594d)
-++++ b/src/main/java/Frame.java	(date 1688287050739)
-+@@ -264,6 +264,8 @@
-+         }
-+     }
-+ 
-++    private static String wordInContext (ArrayList<>)
-++
-+     public static void main ( String[] args )
-+     {
-+         new Frame();
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_07_[Changes]/shelved.patch
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_07_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_07_[Changes]/shelved.patch
-new file mode 100644
---- /dev/null	(date 1688293687389)
-+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_07_[Changes]/shelved.patch	(date 1688293687389)
-@@ -0,0 +1,18 @@
-+Index: src/main/java/Frame.java
-+IDEA additional info:
-+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-+<+>import javax.swing.*;\r\nimport javax.swing.event.ChangeEvent;\r\nimport javax.swing.event.ChangeListener;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.event.WindowAdapter;\r\nimport java.awt.event.WindowEvent;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\npublic class Frame{\r\n    private JFrame frame;\r\n    private JTextField firstTextField;\r\n    private JPanel panelSpoiler;\r\n    private JPanel panelNeighbours;\r\n    private  JPanel panelDisplayedResults;\r\n\r\n    private JTextArea outputArea;\r\n\r\n    private String searchBy;\r\n\r\n\r\n    private List<List<List<String>>> src;\r\n    private int numberOfNeighbours=2;\r\n    private int numberOfDisplayedResults = 10;\r\n\r\n\r\n    Frame(){\r\n        frame=new JFrame(\"Test\");\r\n        frame.setSize(1000,600);\r\n        firstTextField=new JTextField(60);\r\n\r\n        firstTextField.setMaximumSize(new Dimension(200,50));\r\n\r\n\r\n        Dimension size = new Dimension(95, 30);\r\n\r\n        JButton loadButton = new JButton(\"load\");\r\n        loadButton.setMaximumSize(size);\r\n        loadButton.addActionListener(new LoadButtonHandler());\r\n\r\n        JButton searchButton = new JButton(\"search\");\r\n        searchButton.setMaximumSize(size);\r\n        searchButton.addActionListener(new SearchButtonHandler());\r\n\r\n        JRadioButton lemma = new JRadioButton(\"Lemma\");\r\n        JRadioButton pos = new JRadioButton(\"POS\");\r\n        JRadioButton word = new JRadioButton(\"Word\");\r\n\r\n        ButtonGroup buttonGroup = new ButtonGroup();\r\n        buttonGroup.add(lemma);\r\n        buttonGroup.add(pos);\r\n        buttonGroup.add(word);\r\n\r\n        lemma.addActionListener(new WordPosLemmaButtonHandler());\r\n        pos.addActionListener(new WordPosLemmaButtonHandler());\r\n        word.addActionListener(new WordPosLemmaButtonHandler());\r\n\r\n        Box box1 = Box.createVerticalBox();\r\n        box1.add(lemma);\r\n        box1.add(pos);\r\n        box1.add(word);\r\n\r\n        JPanel panel1=new JPanel();\r\n        BoxLayout aBoxLayout = new BoxLayout(panel1,BoxLayout.X_AXIS);\r\n        panel1.setLayout(aBoxLayout);\r\n\r\n        panel1.add(Box.createRigidArea(new Dimension(0,5)));\r\n        panel1.add(loadButton);\r\n        panel1.add(firstTextField);\r\n        panel1.add(box1);\r\n        panel1.add(Box.createHorizontalGlue());\r\n        panel1.add(searchButton);\r\n        //panel with spoiler panel\r\n        JPanel panel2=new JPanel();\r\n        BoxLayout bBoxLayout = new BoxLayout(panel2,BoxLayout.Y_AXIS);\r\n        panel2.setLayout(bBoxLayout);\r\n\r\n        panel2.add(Box.createRigidArea(new Dimension(0,5)));\r\n\r\n        JButton spoilerButton = new JButton(\"Additional filters\");\r\n        spoilerButton.setMaximumSize(new Dimension(frame.getWidth(),30));\r\n        spoilerButton.addActionListener(new SpoilerButtonHandler());\r\n        spoilerButton.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n        panel2.add(spoilerButton);\r\n\r\n        panel2.add(Box.createRigidArea(new Dimension(0,5)));\r\n        //spoiler panel\r\n        panelSpoiler=new JPanel();\r\n        BoxLayout spoilerBoxLayout = new BoxLayout(panelSpoiler,BoxLayout.X_AXIS);\r\n        panelSpoiler.setLayout(spoilerBoxLayout);\r\n\r\n        panel2.add(panelSpoiler);\r\n\r\n\r\n        panelNeighbours=new JPanel();\r\n        BoxLayout neigboursBoxLayout = new BoxLayout(panelNeighbours,BoxLayout.Y_AXIS);\r\n        panelNeighbours.setLayout(neigboursBoxLayout);\r\n        panelSpoiler.add(panelNeighbours);\r\n\r\n        JLabel neighbours= new JLabel(\"Neighbours\");\r\n        neighbours.setMaximumSize(size);\r\n\r\n        Integer[] neighboursStrings = {0, 1,2,3,4,5,6,7,8,9,10};\r\n        SpinnerListModel neighboursModel = new SpinnerListModel(neighboursStrings);\r\n        JSpinner spinner = new JSpinner(neighboursModel);\r\n        spinner.setMaximumSize(size);\r\n        spinner.setValue(numberOfNeighbours);\r\n        spinner.addChangeListener(new spinnerListener());\r\n\r\n        panelNeighbours.add(neighbours);\r\n        panelNeighbours.add(spinner);\r\n        neighbours.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        spinner.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n        panelSpoiler.add(Box.createRigidArea(new Dimension(5,0)));\r\n\r\n        panelDisplayedResults=new JPanel();\r\n        BoxLayout displayedResultsLayout = new BoxLayout(panelDisplayedResults,BoxLayout.Y_AXIS);\r\n        panelDisplayedResults.setLayout(displayedResultsLayout);\r\n        panelSpoiler.add(panelDisplayedResults);\r\n\r\n        JLabel displayedResults= new JLabel(\"Amount of displayed results\");\r\n        displayedResults.setMaximumSize(new Dimension(300,30));\r\n\r\n        JSlider slider = new JSlider(JSlider.HORIZONTAL,\r\n                1, 50, numberOfDisplayedResults);\r\n        slider.setMaximumSize(new Dimension(300,100));\r\n        slider.setMajorTickSpacing(10);\r\n        slider.setMinorTickSpacing(1);\r\n        slider.setPaintTicks(true);\r\n        slider.setPaintLabels(true);\r\n        slider.addChangeListener(new sliderListener());\r\n\r\n        panelDisplayedResults.add(displayedResults);\r\n        panelDisplayedResults.add(slider);\r\n        displayedResults.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        slider.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n\r\n        JPanel panel3=new JPanel();\r\n        BoxLayout cBoxLayout = new BoxLayout(panel3,BoxLayout.X_AXIS);\r\n        panel3.setLayout(cBoxLayout);\r\n\r\n        panel3.add(Box.createRigidArea(new Dimension(0,5)));\r\n\r\n\r\n        frame.getContentPane().setLayout(new BoxLayout(frame.getContentPane(),BoxLayout.Y_AXIS));\r\n        frame.getContentPane().add(panel1);\r\n        frame.getContentPane().add(panel2);\r\n        frame.getContentPane().add(panel3);\r\n        //This is the common size of the buttons\r\n\r\n        frame.addWindowListener(new MyWindowListener());\r\n        frame.setVisible(true);\r\n\r\n\r\n        // Create the JTextArea for displaying the output\r\n        outputArea = new JTextArea();\r\n        outputArea.setEditable(false); // Make it read-only\r\n        frame.add(outputArea);\r\n\r\n    }\r\n    public class SpoilerButtonHandler implements ActionListener {\r\n        public void actionPerformed(ActionEvent e) {\r\n            if (panelSpoiler.isVisible()){\r\n                panelSpoiler.setVisible(false);\r\n\r\n            } else {\r\n\r\n                panelSpoiler.setVisible(true);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public class LoadButtonHandler implements ActionListener {\r\n        public void actionPerformed(ActionEvent e) {\r\n            JFileChooser fileChooser = new JFileChooser();\r\n            fileChooser.setCurrentDirectory(new File(System.getProperty(\"user.home\")));\r\n            int result = fileChooser.showOpenDialog(frame);\r\n            if (result == JFileChooser.APPROVE_OPTION) {\r\n                File selectedFile = fileChooser.getSelectedFile();\r\n\r\n            String text=\"\";\r\n            Scanner inputStream;\r\n            try{\r\n                inputStream=new Scanner(selectedFile);\r\n\r\n            } catch (FileNotFoundException ex) {\r\n                JOptionPane.showMessageDialog(frame,\"File can not be found\");\r\n                throw new RuntimeException(ex);\r\n            }\r\n            while (inputStream.hasNextLine()){\r\n                text=text+inputStream.nextLine();\r\n            }\r\n\r\n            CorpusBuilder corp= new CorpusBuilder(text);\r\n            corp.getSentences();\r\n            corp.getTokens();\r\n            corp.getPosTags();\r\n            corp.getLemmas();\r\n\r\n            src = corp.getWordPosLemma();\r\n\r\n            inputStream.close();\r\n            }\r\n        }\r\n    }\r\n\r\n    private class spinnerListener implements ChangeListener {\r\n        public void stateChanged(ChangeEvent e) {\r\n            JSpinner spinner= (JSpinner) e.getSource();\r\n            SpinnerModel spinnerModel = (SpinnerModel) spinner.getModel();\r\n            if (spinnerModel instanceof SpinnerDateModel) {\r\n                numberOfNeighbours=(int)spinnerModel.getValue();\r\n            }\r\n        }\r\n    }\r\n    private class sliderListener implements ChangeListener {\r\n        public void stateChanged(ChangeEvent e) {\r\n\r\n        JSlider source = (JSlider) e.getSource();\r\n        if(!source.getValueIsAdjusting())\r\n\r\n        {\r\n             numberOfDisplayedResults= source.getValue();\r\n\r\n        }\r\n    }\r\n    }\r\n    private class QuitButtonHandler implements ActionListener {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            System.exit(0);\r\n        }\r\n    }\r\n    private class MyWindowListener extends WindowAdapter {\r\n\r\n        public void windowClosing(WindowEvent e) {\r\n            System.exit(0);\r\n        }\r\n    }\r\n\r\n    private class WordPosLemmaButtonHandler implements ActionListener {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            JRadioButton button = (JRadioButton) e.getSource();\r\n            searchBy = button.getText();\r\n        }\r\n    }\r\n\r\n\r\n    private class SearchButtonHandler implements ActionListener {\r\n        String s = firstTextField.getText();\r\n        public void actionPerformed(ActionEvent e) {\r\n            if (searchBy.equals(\"Word\")){\r\n                for (int i=0;i<src.size();i++){   //iteration by sentences\r\n                    for (int k=0;k<src.get(i).size();k++){   //iteration by words\r\n                        if (src.get(i).get(k).get(2).equals(s)){\r\n                            System.out.println(src.get(i)); //this should be fixed in the future\r\n                        }\r\n                    }\r\n                }\r\n                //**public static ArrayList<String> getContextWords(ArrayList<String> sentence, int index) {\r\n                //        ArrayList<String> contextWords = new ArrayList<>();\r\n                //\r\n                //        if (index >= 2) {\r\n                //            contextWords.addAll(sentence.subList(index - 2, index));\r\n                //        } else {\r\n                //            contextWords.addAll(sentence.subList(0, index));\r\n                //        }\r\n                //\r\n                //        if (index < sentence.size() - 3) {\r\n                //            contextWords.addAll(sentence.subList(index + 1, index + 4));\r\n                //        } else {\r\n                //            contextWords.addAll(sentence.subList(index + 1, sentence.size()));\r\n                //        }\r\n                //\r\n                //        return contextWords;\r\n                //    }*/\r\n            } else if (searchBy.equals(\"Lemma\")) {\r\n\r\n\r\n            } else if (searchBy.equals(\"POS\")) {\r\n\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public static void main ( String[] args )\r\n    {\r\n        new Frame();\r\n    }\r\n}
-+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-+<+>UTF-8
-+===================================================================
-+diff --git a/src/main/java/Frame.java b/src/main/java/Frame.java
-+--- a/src/main/java/Frame.java	(revision 89fece41338a635b83ee0219705d255b1d144fd9)
-++++ b/src/main/java/Frame.java	(date 1688288616574)
-+@@ -99,6 +99,7 @@
-+         panel2.add(panelSpoiler);
-+ 
-+ 
-++
-+         panelNeighbours=new JPanel();
-+         BoxLayout neigboursBoxLayout = new BoxLayout(panelNeighbours,BoxLayout.Y_AXIS);
-+         panelNeighbours.setLayout(neigboursBoxLayout);
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_12_14_[Changes]/shelved.patch
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_12_14_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_12_14_[Changes]/shelved.patch
-new file mode 100644
---- /dev/null	(date 1688293687407)
-+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_12_14_[Changes]/shelved.patch	(date 1688293687407)
-@@ -0,0 +1,74 @@
-+Index: src/main/java/Frame.java
-+IDEA additional info:
-+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-+<+>import javax.swing.*;\r\nimport javax.swing.event.ChangeEvent;\r\nimport javax.swing.event.ChangeListener;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.event.WindowAdapter;\r\nimport java.awt.event.WindowEvent;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\npublic class Frame{\r\n    private JFrame frame;\r\n    private JTextField firstTextField;\r\n    private JPanel panelSpoiler;\r\n    private JPanel panelNeighbours;\r\n    private  JPanel panelDisplayedResults;\r\n\r\n    private JTextArea outputArea;\r\n\r\n    private String searchBy;\r\n\r\n\r\n    private List<List<List<String>>> src;\r\n    private int numberOfNeighbours=2;\r\n    private int numberOfDisplayedResults = 10;\r\n\r\n\r\n    Frame(){\r\n        frame=new JFrame(\"Test\");\r\n        frame.setSize(1000,600);\r\n        firstTextField=new JTextField(60);\r\n\r\n        firstTextField.setMaximumSize(new Dimension(200,50));\r\n\r\n\r\n        Dimension size = new Dimension(95, 30);\r\n\r\n        JButton loadButton = new JButton(\"load\");\r\n        loadButton.setMaximumSize(size);\r\n        loadButton.addActionListener(new LoadButtonHandler());\r\n\r\n        JButton searchButton = new JButton(\"search\");\r\n        searchButton.setMaximumSize(size);\r\n        searchButton.addActionListener(new SearchButtonHandler());\r\n\r\n        JRadioButton lemma = new JRadioButton(\"Lemma\");\r\n        JRadioButton pos = new JRadioButton(\"POS\");\r\n        JRadioButton word = new JRadioButton(\"Word\");\r\n\r\n        ButtonGroup buttonGroup = new ButtonGroup();\r\n        buttonGroup.add(lemma);\r\n        buttonGroup.add(pos);\r\n        buttonGroup.add(word);\r\n\r\n        lemma.addActionListener(new WordPosLemmaButtonHandler());\r\n        pos.addActionListener(new WordPosLemmaButtonHandler());\r\n        word.addActionListener(new WordPosLemmaButtonHandler());\r\n\r\n        Box box1 = Box.createVerticalBox();\r\n        box1.add(lemma);\r\n        box1.add(pos);\r\n        box1.add(word);\r\n\r\n        JPanel panel1=new JPanel();\r\n        BoxLayout aBoxLayout = new BoxLayout(panel1,BoxLayout.X_AXIS);\r\n        panel1.setLayout(aBoxLayout);\r\n\r\n        panel1.add(Box.createRigidArea(new Dimension(0,5)));\r\n        panel1.add(loadButton);\r\n        panel1.add(firstTextField);\r\n        panel1.add(box1);\r\n        panel1.add(Box.createHorizontalGlue());\r\n        panel1.add(searchButton);\r\n        //panel with spoiler panel\r\n        JPanel panel2=new JPanel();\r\n        BoxLayout bBoxLayout = new BoxLayout(panel2,BoxLayout.Y_AXIS);\r\n        panel2.setLayout(bBoxLayout);\r\n\r\n        panel2.add(Box.createRigidArea(new Dimension(0,5)));\r\n\r\n        JButton spoilerButton = new JButton(\"Additional filters\");\r\n        spoilerButton.setMaximumSize(new Dimension(frame.getWidth(),30));\r\n        spoilerButton.addActionListener(new SpoilerButtonHandler());\r\n        spoilerButton.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n        panel2.add(spoilerButton);\r\n\r\n        panel2.add(Box.createRigidArea(new Dimension(0,5)));\r\n        //spoiler panel\r\n        panelSpoiler=new JPanel();\r\n        BoxLayout spoilerBoxLayout = new BoxLayout(panelSpoiler,BoxLayout.X_AXIS);\r\n        panelSpoiler.setLayout(spoilerBoxLayout);\r\n\r\n        panel2.add(panelSpoiler);\r\n\r\n        JList<CheckboxListItem> list = new JList<CheckboxListItem>(\r\n                new CheckboxListItem[] { new CheckboxListItem(\"apple\"),\r\n                        new CheckboxListItem(\"orange\"),\r\n                        new CheckboxListItem(\"mango\"),\r\n                        new CheckboxListItem(\"paw paw\"),\r\n                        new CheckboxListItem(\"banana\") });\r\n\r\n        list.setCellRenderer(new CheckboxListRenderer());\r\n        list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\r\n\r\n        panelSpoiler.add(new JScrollPane(list));\r\n\r\n        panelNeighbours=new JPanel();\r\n        BoxLayout neigboursBoxLayout = new BoxLayout(panelNeighbours,BoxLayout.Y_AXIS);\r\n        panelNeighbours.setLayout(neigboursBoxLayout);\r\n        panelSpoiler.add(panelNeighbours);\r\n\r\n        JLabel neighbours= new JLabel(\"Neighbours\");\r\n        neighbours.setMaximumSize(size);\r\n\r\n        Integer[] neighboursStrings = {0, 1,2,3,4,5,6,7,8,9,10};\r\n        SpinnerListModel neighboursModel = new SpinnerListModel(neighboursStrings);\r\n        JSpinner spinner = new JSpinner(neighboursModel);\r\n        spinner.setMaximumSize(size);\r\n        spinner.setValue(numberOfNeighbours);\r\n        spinner.addChangeListener(new spinnerListener());\r\n\r\n        panelNeighbours.add(neighbours);\r\n        panelNeighbours.add(spinner);\r\n        neighbours.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        spinner.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n        panelSpoiler.add(Box.createRigidArea(new Dimension(5,0)));\r\n\r\n        panelDisplayedResults=new JPanel();\r\n        BoxLayout displayedResultsLayout = new BoxLayout(panelDisplayedResults,BoxLayout.Y_AXIS);\r\n        panelDisplayedResults.setLayout(displayedResultsLayout);\r\n        panelSpoiler.add(panelDisplayedResults);\r\n\r\n        JLabel displayedResults= new JLabel(\"Amount of displayed results\");\r\n        displayedResults.setMaximumSize(new Dimension(300,30));\r\n\r\n        JSlider slider = new JSlider(JSlider.HORIZONTAL,\r\n                1, 50, numberOfDisplayedResults);\r\n        slider.setMaximumSize(new Dimension(300,100));\r\n        slider.setMajorTickSpacing(10);\r\n        slider.setMinorTickSpacing(1);\r\n        slider.setPaintTicks(true);\r\n        slider.setPaintLabels(true);\r\n        slider.addChangeListener(new sliderListener());\r\n\r\n        panelDisplayedResults.add(displayedResults);\r\n        panelDisplayedResults.add(slider);\r\n        displayedResults.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        slider.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n\r\n        JPanel panel3=new JPanel();\r\n        BoxLayout cBoxLayout = new BoxLayout(panel3,BoxLayout.X_AXIS);\r\n        panel3.setLayout(cBoxLayout);\r\n\r\n        panel3.add(Box.createRigidArea(new Dimension(0,5)));\r\n\r\n\r\n        frame.getContentPane().setLayout(new BoxLayout(frame.getContentPane(),BoxLayout.Y_AXIS));\r\n        frame.getContentPane().add(panel1);\r\n        frame.getContentPane().add(panel2);\r\n        frame.getContentPane().add(panel3);\r\n        //This is the common size of the buttons\r\n\r\n        frame.addWindowListener(new MyWindowListener());\r\n        frame.setVisible(true);\r\n\r\n\r\n        // Create the JTextArea for displaying the output\r\n        outputArea = new JTextArea();\r\n        outputArea.setEditable(false);\r\n\r\n        frame.add(outputArea);\r\n        outputArea.setVisible(true);\r\n\r\n\r\n        Design.applyDesign(frame);\r\n\r\n\r\n        Design.applyTextFieldStyle(firstTextField);\r\n        Design.applyButtonStyle(loadButton);\r\n        Design.applyButtonStyle(searchButton);\r\n        Design.applyRadioButtonStyle(lemma);\r\n        Design.applyRadioButtonStyle(pos);\r\n        Design.applyRadioButtonStyle(word);\r\n\r\n\r\n    }\r\n    public class SpoilerButtonHandler implements ActionListener {\r\n        public void actionPerformed(ActionEvent e) {\r\n            if (panelSpoiler.isVisible()){\r\n                panelSpoiler.setVisible(false);\r\n\r\n            } else {\r\n\r\n                panelSpoiler.setVisible(true);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public class LoadButtonHandler implements ActionListener {\r\n        public void actionPerformed(ActionEvent e) {\r\n            JFileChooser fileChooser = new JFileChooser();\r\n            fileChooser.setCurrentDirectory(new File(System.getProperty(\"user.home\")));\r\n            int result = fileChooser.showOpenDialog(frame);\r\n            if (result == JFileChooser.APPROVE_OPTION) {\r\n                File selectedFile = fileChooser.getSelectedFile();\r\n\r\n            String text=\"\";\r\n            Scanner inputStream;\r\n            try{\r\n                inputStream=new Scanner(selectedFile);\r\n\r\n            } catch (FileNotFoundException ex) {\r\n                JOptionPane.showMessageDialog(frame,\"File can not be found\");\r\n                throw new RuntimeException(ex);\r\n            }\r\n            while (inputStream.hasNextLine()){\r\n                text=text+inputStream.nextLine();\r\n            }\r\n\r\n            CorpusBuilder corp= new CorpusBuilder(text);\r\n            corp.getSentences();\r\n            corp.getTokens();\r\n            corp.getPosTags();\r\n            corp.getLemmas();\r\n\r\n            src = corp.getWordPosLemma();\r\n\r\n            inputStream.close();\r\n            }\r\n        }\r\n    }\r\n\r\n    private class spinnerListener implements ChangeListener {\r\n        public void stateChanged(ChangeEvent e) {\r\n            JSpinner spinner= (JSpinner) e.getSource();\r\n            SpinnerModel spinnerModel = (SpinnerModel) spinner.getModel();\r\n            if (spinnerModel instanceof SpinnerDateModel) {\r\n                numberOfNeighbours=(int)spinnerModel.getValue();\r\n            }\r\n        }\r\n    }\r\n    private class sliderListener implements ChangeListener {\r\n        public void stateChanged(ChangeEvent e) {\r\n\r\n        JSlider source = (JSlider) e.getSource();\r\n        if(!source.getValueIsAdjusting())\r\n\r\n        {\r\n             numberOfDisplayedResults= source.getValue();\r\n\r\n        }\r\n    }\r\n    }\r\n    private class QuitButtonHandler implements ActionListener {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            System.exit(0);\r\n        }\r\n    }\r\n    private class MyWindowListener extends WindowAdapter {\r\n\r\n        public void windowClosing(WindowEvent e) {\r\n            System.exit(0);\r\n        }\r\n    }\r\n\r\n    private class WordPosLemmaButtonHandler implements ActionListener {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            JRadioButton button = (JRadioButton) e.getSource();\r\n            searchBy = button.getText();\r\n        }\r\n    }\r\n\r\n    private class SearchButtonHandler implements ActionListener {\r\n        public void actionPerformed(ActionEvent e) {\r\n            String s = firstTextField.getText();\r\n            if (searchBy.equals(\"Word\")){\r\n                for (int i=0;i<src.size();i++){   //iteration by sentences\r\n                    for (int k=0;k<src.get(i).size();k++){   //iteration by words\r\n                        if (src.get(i).get(k).get(0).equals(s)){\r\n                            //System.out.println(src.get(i)); //prints a list of tokens, lemmas and pos tags\r\n                            //src.get(i).get(k).get(1) -- POS tag of the word\r\n                            //System.out.println(getContextWords(src.get(i), k, numberOfNeighbours)); //prints final sentences with neighbours\r\n                            outputArea.append(getContextWords(src.get(i), k, numberOfNeighbours));\r\n                            outputArea.append(\"\\n\");\r\n                        }\r\n                    }\r\n                }\r\n            } else if (searchBy.equals(\"Lemma\")) {\r\n\r\n\r\n            } else if (searchBy.equals(\"POS\")) {\r\n\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Helper method that gets a list from CorpusBuilder, index of the word and the number of neighbours\r\n     * @param sentenceList\r\n     * @param index\r\n     * @param numNeighbours\r\n     * @return a string with word and his neighbours\r\n     */\r\n    private static String getContextWords (List<List<String>> sentenceList, int index, int numNeighbours){\r\n        ArrayList<String> contextWords = new ArrayList<>();\r\n        ArrayList<String> sentenceArrayList = new ArrayList<>();\r\n\r\n        for (List<String> list : sentenceList) {\r\n            if (!list.isEmpty()) {\r\n                sentenceArrayList.add(list.get(0));\r\n            }\r\n        }\r\n\r\n        if (index >= numNeighbours) {\r\n            contextWords.addAll(sentenceArrayList.subList((index - numNeighbours), index));\r\n        } else {\r\n            contextWords.addAll(sentenceArrayList.subList(0, index));\r\n        }\r\n\r\n        if (index < sentenceList.size() - numNeighbours - 1) {\r\n            contextWords.addAll(sentenceArrayList.subList(index, index + numNeighbours + 1));\r\n        } else {\r\n            contextWords.addAll(sentenceArrayList.subList(index, sentenceList.size()));\r\n        }\r\n\r\n        return String.join(\" \", contextWords);\r\n    }\r\n\r\n    class CheckboxListRenderer extends JCheckBox implements\r\n            ListCellRenderer<CheckboxListItem> {\r\n\r\n        @Override\r\n        public Component getListCellRendererComponent(\r\n                JList<? extends CheckboxListItem> list, CheckboxListItem value,\r\n                int index, boolean isSelected, boolean cellHasFocus) {\r\n            setEnabled(list.isEnabled());\r\n            setSelected(value.isSelected());\r\n            setFont(list.getFont());\r\n            setBackground(list.getBackground());\r\n            setForeground(list.getForeground());\r\n            setText(value.toString());\r\n            return this;\r\n        }\r\n    }\r\n    public class CheckboxListItem {\r\n\r\n        private String label;\r\n        private boolean isSelected = false;\r\n\r\n        public CheckboxListItem(String label) {\r\n            this.label = label;\r\n        }\r\n\r\n        public boolean isSelected() {\r\n            return isSelected;\r\n        }\r\n\r\n        public void setSelected(boolean isSelected) {\r\n            this.isSelected = isSelected;\r\n        }\r\n\r\n        public String toString() {\r\n            return label;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public static void main ( String[] args )\r\n    {\r\n        new Frame();\r\n    }\r\n}
-+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-+<+>UTF-8
-+===================================================================
-+diff --git a/src/main/java/Frame.java b/src/main/java/Frame.java
-+--- a/src/main/java/Frame.java	(revision 2530583e2868afcc8a08b34ed3823e083209d420)
-++++ b/src/main/java/Frame.java	(date 1688292888792)
-+@@ -283,25 +283,36 @@
-+ 
-+     private class SearchButtonHandler implements ActionListener {
-+         public void actionPerformed(ActionEvent e) {
-++            outputArea.setText("");
-+             String s = firstTextField.getText();
-+             if (searchBy.equals("Word")){
-+                 for (int i=0;i<src.size();i++){   //iteration by sentences
-+                     for (int k=0;k<src.get(i).size();k++){   //iteration by words
-+-                        if (src.get(i).get(k).get(0).equals(s)){
-+-                            //System.out.println(src.get(i)); //prints a list of tokens, lemmas and pos tags
-++                        if (src.get(i).get(k).get(0).equalsIgnoreCase(s)){
-+                             //src.get(i).get(k).get(1) -- POS tag of the word
-+-                            //System.out.println(getContextWords(src.get(i), k, numberOfNeighbours)); //prints final sentences with neighbours
-+                             outputArea.append(getContextWords(src.get(i), k, numberOfNeighbours));
-+                             outputArea.append("\n");
-+                         }
-+                     }
-+                 }
-+             } else if (searchBy.equals("Lemma")) {
-+-
-+-
-++                for (int i=0;i<src.size();i++){   //iteration by sentences
-++                    for (int k=0;k<src.get(i).size();k++){   //iteration by words
-++                        if (src.get(i).get(k).get(2).equalsIgnoreCase(s)){
-++                            outputArea.append(getContextWords(src.get(i), k, numberOfNeighbours));
-++                            outputArea.append("\n");
-++                        }
-++                    }
-++                }
-+             } else if (searchBy.equals("POS")) {
-+-
-+-
-++                for (int i=0;i<src.size();i++){   //iteration by sentences
-++                    for (int k=0;k<src.get(i).size();k++){   //iteration by words
-++                        if (src.get(i).get(k).get(1).equalsIgnoreCase(s)){
-++                            outputArea.append(getContextWords(src.get(i), k, numberOfNeighbours));
-++                            outputArea.append("\n");
-++                        }
-++                    }
-++                }
-+             }
-+         }
-+     }
-+Index: .idea/misc.xml
-+IDEA additional info:
-+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-+<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"MavenProjectsManager\">\r\n    <option name=\"originalFiles\">\r\n      <list>\r\n        <option value=\"$PROJECT_DIR$/pom.xml\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_19\" default=\"true\" project-jdk-name=\"11\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
-+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-+<+>UTF-8
-+===================================================================
-+diff --git a/.idea/misc.xml b/.idea/misc.xml
-+--- a/.idea/misc.xml	(revision 2530583e2868afcc8a08b34ed3823e083209d420)
-++++ b/.idea/misc.xml	(date 1688290623128)
-+@@ -8,7 +8,7 @@
-+       </list>
-+     </option>
-+   </component>
-+-  <component name="ProjectRootManager" version="2" languageLevel="JDK_19" default="true" project-jdk-name="11" project-jdk-type="JavaSDK">
-++  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="11" project-jdk-type="JavaSDK">
-+     <output url="file://$PROJECT_DIR$/out" />
-+   </component>
-+ </project>
-+\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_7_2_2023_10_39_AM__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_7_2_2023_10_39_AM__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_7_2_2023_10_39_AM__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_7_2_2023_10_39_AM__Changes_.xml	(revision 8516ea608a7e74fae166f37c49de725b402a5430)
+++ /dev/null	(revision 8516ea608a7e74fae166f37c49de725b402a5430)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_7_2_2023_10_39_AM_[Changes]" date="1688287143908" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_2_2023_10_39_AM_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 7/2/2023 10:39 AM [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_10_37__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_10_37__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_10_37__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_10_37__Changes_.xml	(revision 8516ea608a7e74fae166f37c49de725b402a5430)
+++ /dev/null	(revision 8516ea608a7e74fae166f37c49de725b402a5430)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_02_07_2023_10_37_[Changes]" date="1688287057861" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_10_37_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 02/07/2023 10:37 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_7_2_2023_12_33_PM__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_7_2_2023_12_33_PM__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_7_2_2023_12_33_PM__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_7_2_2023_12_33_PM__Changes_.xml	(revision 8516ea608a7e74fae166f37c49de725b402a5430)
+++ /dev/null	(revision 8516ea608a7e74fae166f37c49de725b402a5430)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_7_2_2023_12_33_PM_[Changes]" date="1688294312413" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_2_2023_12_33_PM_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 7/2/2023 12:33 PM [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_07__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_07__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_07__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_07__Changes_.xml	(revision 8516ea608a7e74fae166f37c49de725b402a5430)
+++ /dev/null	(revision 8516ea608a7e74fae166f37c49de725b402a5430)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_02_07_2023_11_07_[Changes]" date="1688288838997" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_02_07_2023_11_07_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 02.07.2023 11:07 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_7_2_2023_11_32_AM__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_7_2_2023_11_32_AM__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_7_2_2023_11_32_AM__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_7_2_2023_11_32_AM__Changes_.xml	(revision 8516ea608a7e74fae166f37c49de725b402a5430)
+++ /dev/null	(revision 8516ea608a7e74fae166f37c49de725b402a5430)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_7_2_2023_11_32_AM_[Changes]" date="1688290347250" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_2_2023_11_32_AM_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 7/2/2023 11:32 AM [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"990f553a-7720-4ae2-9361-4947b0095cc3\" name=\"Changes\" comment=\"search lemma, search pos\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"MavenImportPreferences\">\r\n    <option name=\"generalSettings\">\r\n      <MavenGeneralSettings>\r\n        <option name=\"useMavenConfig\" value=\"true\" />\r\n      </MavenGeneralSettings>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2RNHFbAW2TzpcUiKcFvSiKIX3xJ\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/iii0f/Open-NLP-Project&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;project.structure.last.edited&quot;: &quot;Project&quot;,\r\n    &quot;project.structure.proportion&quot;: &quot;0.0&quot;,\r\n    &quot;project.structure.side.proportion&quot;: &quot;0.0&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\iii0f\\Open-NLP-Project\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\iii0f\\Open-NLP-Project\" />\r\n      <recent name=\"C:\\Users\\iii0f\\Open-NLP-Project\\src\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"Frame\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"Frame\" />\r\n      <module name=\"CorpusBuilder\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"JetRunConfigurationType\">\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"KotlinStandaloneScriptRunConfigurationType\">\r\n      <option name=\"filePath\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.Frame\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"990f553a-7720-4ae2-9361-4947b0095cc3\" name=\"Changes\" comment=\"\" />\r\n      <created>1687083521233</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1687083521233</updated>\r\n      <workItem from=\"1687083522497\" duration=\"6211000\" />\r\n      <workItem from=\"1687093416339\" duration=\"65000\" />\r\n      <workItem from=\"1687109553754\" duration=\"4488000\" />\r\n      <workItem from=\"1687187765900\" duration=\"2074000\" />\r\n      <workItem from=\"1687280270052\" duration=\"264000\" />\r\n      <workItem from=\"1687436751658\" duration=\"70000\" />\r\n      <workItem from=\"1687506904065\" duration=\"993000\" />\r\n      <workItem from=\"1687944654976\" duration=\"376000\" />\r\n      <workItem from=\"1687968192552\" duration=\"85000\" />\r\n      <workItem from=\"1688287931605\" duration=\"5411000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"обновляю\">\r\n      <created>1687084851965</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1687084851965</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"обновляю\">\r\n      <created>1687085134980</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1687085134980</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"спойлер добавил\">\r\n      <created>1687087015902</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1687087015903</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"обновлено всё.\">\r\n      <created>1687089412401</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1687089412401</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"добавил спиннер(neighbours) и слайдер(displayed results)\">\r\n      <created>1687113969758</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1687113969758</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"просто удалил две строчки\">\r\n      <created>1687189256449</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1687189256449</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"добавил лист с POS\">\r\n      <created>1688289918476</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1688289918476</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"лист с ПОС теперь работает\">\r\n      <created>1688291156608</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1688291156608</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"лист с ПОС теперь работает\">\r\n      <created>1688291223743</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1688291223743</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"лист с ПОС теперь работает\">\r\n      <created>1688292864062</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1688292864062</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"search lemma, search pos\">\r\n      <created>1688295527275</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1688295527275</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"search lemma, search pos\">\r\n      <created>1688295561358</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1688295561358</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"13\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"обновляю\" />\r\n    <MESSAGE value=\"спойлер добавил\" />\r\n    <MESSAGE value=\"обновлено всё.\" />\r\n    <MESSAGE value=\"добавил спиннер(neighbours) и слайдер(displayed results)\" />\r\n    <MESSAGE value=\"просто удалил две строчки\" />\r\n    <MESSAGE value=\"добавил лист с POS\" />\r\n    <MESSAGE value=\"лист с ПОС теперь работает\" />\r\n    <MESSAGE value=\"search lemma, search pos\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"search lemma, search pos\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 8516ea608a7e74fae166f37c49de725b402a5430)
+++ b/.idea/workspace.xml	(date 1688834246803)
@@ -4,7 +4,15 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="990f553a-7720-4ae2-9361-4947b0095cc3" name="Changes" comment="search lemma, search pos" />
+    <list default="true" id="990f553a-7720-4ae2-9361-4947b0095cc3" name="Changes" comment="search lemma, search pos">
+      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_2_2023_10_39_AM__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_2_2023_10_39_AM__Changes_.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_2_2023_11_01_AM__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_2_2023_11_01_AM__Changes_.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_2_2023_11_32_AM__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_2_2023_11_32_AM__Changes_.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_2_2023_12_26_PM__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_2_2023_12_26_PM__Changes_.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_2_2023_12_33_PM__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_2_2023_12_33_PM__Changes_.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -19,6 +27,7 @@
   </component>
   <component name="Git.Settings">
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
+    <option name="UPDATE_TYPE" value="REBASE" />
   </component>
   <component name="MarkdownSettingsMigration">
     <option name="stateVersion" value="1" />
@@ -35,24 +44,24 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent">{
-  &quot;keyToString&quot;: {
-    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
-    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
-    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
-    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
-    &quot;last_opened_file_path&quot;: &quot;C:/Users/iii0f/Open-NLP-Project&quot;,
-    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
-    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
-    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
-    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
-    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
-    &quot;project.structure.last.edited&quot;: &quot;Project&quot;,
-    &quot;project.structure.proportion&quot;: &quot;0.0&quot;,
-    &quot;project.structure.side.proportion&quot;: &quot;0.0&quot;,
-    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "RunOnceActivity.OpenProjectViewOnStart": "true",
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
+    "WebServerToolWindowFactoryState": "false",
+    "last_opened_file_path": "C:/Users/Nutzer/Java2/Open-NLP-Project",
+    "node.js.detected.package.eslint": "true",
+    "node.js.detected.package.tslint": "true",
+    "node.js.selected.package.eslint": "(autodetect)",
+    "node.js.selected.package.tslint": "(autodetect)",
+    "nodejs_package_manager_path": "npm",
+    "project.structure.last.edited": "Project",
+    "project.structure.proportion": "0.0",
+    "project.structure.side.proportion": "0.0",
+    "vue.rearranger.settings.migration": "true"
   }
-}</component>
+}]]></component>
   <component name="RecentsManager">
     <key name="CopyFile.RECENT_KEYS">
       <recent name="C:\Users\iii0f\Open-NLP-Project" />
@@ -105,6 +114,7 @@
       <workItem from="1687944654976" duration="376000" />
       <workItem from="1687968192552" duration="85000" />
       <workItem from="1688287931605" duration="5411000" />
+      <workItem from="1688833753539" duration="492000" />
     </task>
     <task id="LOCAL-00001" summary="обновляю">
       <created>1687084851965</created>
@@ -190,11 +200,29 @@
       <option name="project" value="LOCAL" />
       <updated>1688295561358</updated>
     </task>
-    <option name="localTasksCounter" value="13" />
+    <task id="LOCAL-00013" summary="search lemma, search pos">
+      <created>1688295949909</created>
+      <option name="number" value="00013" />
+      <option name="presentableId" value="LOCAL-00013" />
+      <option name="project" value="LOCAL" />
+      <updated>1688295949909</updated>
+    </task>
+    <option name="localTasksCounter" value="14" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
     <option name="version" value="3" />
+  </component>
+  <component name="Vcs.Log.Tabs.Properties">
+    <option name="TAB_STATES">
+      <map>
+        <entry key="MAIN">
+          <value>
+            <State />
+          </value>
+        </entry>
+      </map>
+    </option>
   </component>
   <component name="VcsManagerConfiguration">
     <MESSAGE value="обновляю" />
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"MavenProjectsManager\">\r\n    <option name=\"originalFiles\">\r\n      <list>\r\n        <option value=\"$PROJECT_DIR$/pom.xml\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_19\" default=\"true\" project-jdk-name=\"11\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 8516ea608a7e74fae166f37c49de725b402a5430)
+++ b/.idea/misc.xml	(date 1688296162253)
@@ -8,7 +8,7 @@
       </list>
     </option>
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_19" default="true" project-jdk-name="11" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="11" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file
